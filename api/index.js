Index.PACKAGES = {"org.mongodb.scala" : [], "monix.connect.hdfs" : [{"name" : "monix.connect.hdfs.Hdfs", "shortDescription" : "", "object" : "monix\/connect\/hdfs\/Hdfs$.html", "members_object" : [{"label" : "read", "tail" : "(fs: FileSystem, path: Path, chunkSize: Int)(scheduler: Scheduler): Observable[Array[Byte]]", "member" : "monix.connect.hdfs.Hdfs.read", "link" : "monix\/connect\/hdfs\/Hdfs$.html#read(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path,chunkSize:Int)(implicitscheduler:monix.execution.Scheduler):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "write", "tail" : "(fs: FileSystem, path: Path, overwrite: Boolean, replication: Short, bufferSize: Int, blockSize: Int)(scheduler: Scheduler): Consumer[Array[Byte], Long]", "member" : "monix.connect.hdfs.Hdfs.write", "link" : "monix\/connect\/hdfs\/Hdfs$.html#write(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path,overwrite:Boolean,replication:Short,bufferSize:Int,blockSize:Int)(implicitscheduler:monix.execution.Scheduler):monix.reactive.Consumer[Array[Byte],Long]", "kind" : "def"}, {"label" : "append", "tail" : "(fs: FileSystem, path: Path)(scheduler: Scheduler): Consumer[Array[Byte], Long]", "member" : "monix.connect.hdfs.Hdfs.append", "link" : "monix\/connect\/hdfs\/Hdfs$.html#append(fs:org.apache.hadoop.fs.FileSystem,path:org.apache.hadoop.fs.Path)(implicitscheduler:monix.execution.Scheduler):monix.reactive.Consumer[Array[Byte],Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/hdfs\/Hdfs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/hdfs\/Hdfs$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/hdfs\/Hdfs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/hdfs\/Hdfs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/hdfs\/Hdfs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/hdfs\/Hdfs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/hdfs\/Hdfs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/hdfs\/Hdfs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/hdfs\/Hdfs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/hdfs\/Hdfs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/hdfs\/Hdfs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/hdfs\/Hdfs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/hdfs\/Hdfs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/hdfs\/Hdfs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/hdfs\/Hdfs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/hdfs\/Hdfs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/hdfs\/Hdfs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/hdfs\/Hdfs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/hdfs\/Hdfs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.mongodb.domain" : [{"name" : "monix.connect.mongodb.domain.DeleteResult", "shortDescription" : "", "members_case class" : [{"member" : "monix.connect.mongodb.domain.DeleteResult#<init>", "error" : "unsupported entity"}, {"label" : "wasAcknowledged", "tail" : ": Boolean", "member" : "monix.connect.mongodb.domain.DeleteResult.wasAcknowledged", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#wasAcknowledged:Boolean", "kind" : "val"}, {"label" : "deleteCount", "tail" : ": Long", "member" : "monix.connect.mongodb.domain.DeleteResult.deleteCount", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#deleteCount:Long", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/DeleteResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/mongodb\/domain\/DeleteResult.html", "kind" : "case class"}, {"name" : "monix.connect.mongodb.domain.InsertManyResult", "shortDescription" : "", "members_case class" : [{"member" : "monix.connect.mongodb.domain.InsertManyResult#<init>", "error" : "unsupported entity"}, {"label" : "wasAcknowledged", "tail" : ": Boolean", "member" : "monix.connect.mongodb.domain.InsertManyResult.wasAcknowledged", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#wasAcknowledged:Boolean", "kind" : "val"}, {"label" : "insertedIds", "tail" : ": Set[String]", "member" : "monix.connect.mongodb.domain.InsertManyResult.insertedIds", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#insertedIds:Set[String]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/mongodb\/domain\/InsertManyResult.html", "kind" : "case class"}, {"name" : "monix.connect.mongodb.domain.InsertOneResult", "shortDescription" : "", "members_case class" : [{"member" : "monix.connect.mongodb.domain.InsertOneResult#<init>", "error" : "unsupported entity"}, {"label" : "wasAcknowledged", "tail" : ": Boolean", "member" : "monix.connect.mongodb.domain.InsertOneResult.wasAcknowledged", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#wasAcknowledged:Boolean", "kind" : "val"}, {"label" : "insertedId", "tail" : ": Option[String]", "member" : "monix.connect.mongodb.domain.InsertOneResult.insertedId", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#insertedId:Option[String]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/mongodb\/domain\/InsertOneResult.html", "kind" : "case class"}, {"name" : "monix.connect.mongodb.domain.RetryStrategy", "shortDescription" : "A retry strategy is defined by the amount of retries and backoff delay per operation.", "members_case class" : [{"member" : "monix.connect.mongodb.domain.RetryStrategy#<init>", "error" : "unsupported entity"}, {"label" : "backoffDelay", "tail" : ": FiniteDuration", "member" : "monix.connect.mongodb.domain.RetryStrategy.backoffDelay", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#backoffDelay:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "attempts", "tail" : ": Int", "member" : "monix.connect.mongodb.domain.RetryStrategy.attempts", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#attempts:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/mongodb\/domain\/RetryStrategy.html", "kind" : "case class"}, {"name" : "monix.connect.mongodb.domain.UpdateResult", "shortDescription" : "", "members_case class" : [{"member" : "monix.connect.mongodb.domain.UpdateResult#<init>", "error" : "unsupported entity"}, {"label" : "wasAcknowledged", "tail" : ": Boolean", "member" : "monix.connect.mongodb.domain.UpdateResult.wasAcknowledged", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#wasAcknowledged:Boolean", "kind" : "val"}, {"label" : "modifiedCount", "tail" : ": Long", "member" : "monix.connect.mongodb.domain.UpdateResult.modifiedCount", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#modifiedCount:Long", "kind" : "val"}, {"label" : "matchedCount", "tail" : ": Long", "member" : "monix.connect.mongodb.domain.UpdateResult.matchedCount", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#matchedCount:Long", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/domain\/UpdateResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/mongodb\/domain\/UpdateResult.html", "kind" : "case class"}], "monix.connect.sqs.producer" : [{"name" : "monix.connect.sqs.producer.FifoMessage", "shortDescription" : "The message representation to be sent to a FIFO queue.", "members_case class" : [{"member" : "monix.connect.sqs.producer.FifoMessage#<init>", "error" : "unsupported entity"}, {"label" : "awsTraceHeader", "tail" : ": Option[MessageAttribute]", "member" : "monix.connect.sqs.producer.FifoMessage.awsTraceHeader", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#awsTraceHeader:Option[monix.connect.sqs.domain.MessageAttribute]", "kind" : "val"}, {"label" : "messageAttributes", "tail" : ": Map[String, MessageAttribute]", "member" : "monix.connect.sqs.producer.FifoMessage.messageAttributes", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#messageAttributes:Map[String,monix.connect.sqs.domain.MessageAttribute]", "kind" : "val"}, {"label" : "deduplicationId", "tail" : ": Option[String]", "member" : "monix.connect.sqs.producer.FifoMessage.deduplicationId", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#deduplicationId:Option[String]", "kind" : "val"}, {"label" : "groupId", "tail" : ": String", "member" : "monix.connect.sqs.producer.FifoMessage.groupId", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#groupId:String", "kind" : "val"}, {"label" : "body", "tail" : ": String", "member" : "monix.connect.sqs.producer.FifoMessage.body", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#body:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/producer\/FifoMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/sqs\/producer\/FifoMessage.html", "kind" : "case class"}, {"name" : "monix.connect.sqs.producer.Message", "shortDescription" : "Generic abstraction for queue messages, which will be implemented differently for standardand fifo queue messages.", "members_class" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/producer\/Message.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/producer\/Message.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/producer\/Message.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/producer\/Message.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/producer\/Message.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/producer\/Message.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/producer\/Message.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/Message.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/Message.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/Message.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/producer\/Message.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/producer\/Message.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/producer\/Message.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/producer\/Message.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/producer\/Message.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/producer\/Message.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/producer\/Message.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/producer\/Message.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/producer\/Message.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/sqs\/producer\/Message.html", "kind" : "class"}, {"name" : "monix.connect.sqs.producer.SqsProducer", "shortDescription" : "", "members_class" : [{"label" : "sendParBatchSink", "tail" : "(queueUrl: QueueUrl, onErrorHandleWith: (Throwable) => Task[Ack]): Consumer[List[Message], Unit]", "member" : "monix.connect.sqs.producer.SqsProducer.sendParBatchSink", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#sendParBatchSink(queueUrl:monix.connect.sqs.domain.QueueUrl,onErrorHandleWith:Throwable=>monix.eval.Task[monix.execution.Ack]):monix.reactive.Consumer[List[monix.connect.sqs.producer.Message],Unit]", "kind" : "def"}, {"label" : "sendSink", "tail" : "(queueUrl: QueueUrl, onErrorHandleWith: (Throwable) => Task[Ack]): Consumer[Message, Unit]", "member" : "monix.connect.sqs.producer.SqsProducer.sendSink", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#sendSink(queueUrl:monix.connect.sqs.domain.QueueUrl,onErrorHandleWith:Throwable=>monix.eval.Task[monix.execution.Ack]):monix.reactive.Consumer[monix.connect.sqs.producer.Message,Unit]", "kind" : "def"}, {"label" : "sendParBatch", "tail" : "(messages: List[Message], queueUrl: QueueUrl): Task[List[SendMessageBatchResponse]]", "member" : "monix.connect.sqs.producer.SqsProducer.sendParBatch", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#sendParBatch(messages:List[monix.connect.sqs.producer.Message],queueUrl:monix.connect.sqs.domain.QueueUrl):monix.eval.Task[List[software.amazon.awssdk.services.sqs.model.SendMessageBatchResponse]]", "kind" : "def"}, {"label" : "sendSingleMessage", "tail" : "(message: Message, queueUrl: QueueUrl): Task[SendMessageResponse]", "member" : "monix.connect.sqs.producer.SqsProducer.sendSingleMessage", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#sendSingleMessage(message:monix.connect.sqs.producer.Message,queueUrl:monix.connect.sqs.domain.QueueUrl):monix.eval.Task[software.amazon.awssdk.services.sqs.model.SendMessageResponse]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/producer\/SqsProducer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/sqs\/producer\/SqsProducer.html", "kind" : "class"}, {"name" : "monix.connect.sqs.producer.StandardMessage", "shortDescription" : "The message type representation to be sent to a Standard Sqs queue.", "members_case class" : [{"member" : "monix.connect.sqs.producer.StandardMessage#<init>", "error" : "unsupported entity"}, {"label" : "delayDuration", "tail" : ": Option[FiniteDuration]", "member" : "monix.connect.sqs.producer.StandardMessage.delayDuration", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#delayDuration:Option[scala.concurrent.duration.FiniteDuration]", "kind" : "val"}, {"label" : "awsTraceHeader", "tail" : ": Option[MessageAttribute]", "member" : "monix.connect.sqs.producer.StandardMessage.awsTraceHeader", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#awsTraceHeader:Option[monix.connect.sqs.domain.MessageAttribute]", "kind" : "val"}, {"label" : "messageAttributes", "tail" : ": Map[String, MessageAttribute]", "member" : "monix.connect.sqs.producer.StandardMessage.messageAttributes", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#messageAttributes:Map[String,monix.connect.sqs.domain.MessageAttribute]", "kind" : "val"}, {"label" : "body", "tail" : ": String", "member" : "monix.connect.sqs.producer.StandardMessage.body", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#body:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/producer\/StandardMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/sqs\/producer\/StandardMessage.html", "kind" : "case class"}], "monix.connect.gcp" : [], "monix.connect" : [], "monix.connect.akka" : [], "monix.connect.sqs.domain" : [{"name" : "monix.connect.sqs.domain.BinaryMessageAttribute", "shortDescription" : "", "members_case class" : [{"label" : "toSystemAttrValue", "tail" : "(): MessageSystemAttributeValue", "member" : "monix.connect.sqs.domain.BinaryMessageAttribute.toSystemAttrValue", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#toSystemAttrValue:software.amazon.awssdk.services.sqs.model.MessageSystemAttributeValue", "kind" : "def"}, {"label" : "toAttrValue", "tail" : "(): MessageAttributeValue", "member" : "monix.connect.sqs.domain.BinaryMessageAttribute.toAttrValue", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#toAttrValue:software.amazon.awssdk.services.sqs.model.MessageAttributeValue", "kind" : "def"}, {"member" : "monix.connect.sqs.domain.BinaryMessageAttribute#<init>", "error" : "unsupported entity"}, {"label" : "attributeValue", "tail" : ": Array[Byte]", "member" : "monix.connect.sqs.domain.BinaryMessageAttribute.attributeValue", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#attributeValue:Array[Byte]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/sqs\/domain\/BinaryMessageAttribute.html", "kind" : "case class"}, {"name" : "monix.connect.sqs.domain.MessageAttribute", "trait" : "monix\/connect\/sqs\/domain\/MessageAttribute.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toSystemAttrValue", "tail" : "(): MessageSystemAttributeValue", "member" : "monix.connect.sqs.domain.MessageAttribute.toSystemAttrValue", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#toSystemAttrValue:software.amazon.awssdk.services.sqs.model.MessageSystemAttributeValue", "kind" : "abstract def"}, {"label" : "toAttrValue", "tail" : "(): MessageAttributeValue", "member" : "monix.connect.sqs.domain.MessageAttribute.toAttrValue", "link" : "monix\/connect\/sqs\/domain\/MessageAttribute.html#toAttrValue:software.amazon.awssdk.services.sqs.model.MessageAttributeValue", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "monix.connect.sqs.domain.QueueName", "shortDescription" : "Simple case class representing a QueueName.", "members_case class" : [{"label" : "map", "tail" : "(f: (String) => String): QueueName", "member" : "monix.connect.sqs.domain.QueueName.map", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#map[A,B](f:String=>String):monix.connect.sqs.domain.QueueName", "kind" : "def"}, {"member" : "monix.connect.sqs.domain.QueueName#<init>", "error" : "unsupported entity"}, {"label" : "name", "tail" : ": String", "member" : "monix.connect.sqs.domain.QueueName.name", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#name:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/domain\/QueueName.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/domain\/QueueName.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/sqs\/domain\/QueueName.html", "kind" : "case class"}, {"name" : "monix.connect.sqs.domain.QueueUrl", "shortDescription" : "Simple case class encodes the queueUrl.", "members_case class" : [{"member" : "monix.connect.sqs.domain.QueueUrl#<init>", "error" : "unsupported entity"}, {"label" : "url", "tail" : ": String", "member" : "monix.connect.sqs.domain.QueueUrl.url", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#url:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/domain\/QueueUrl.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/sqs\/domain\/QueueUrl.html", "kind" : "case class"}, {"name" : "monix.connect.sqs.domain.StringMessageAttribute", "shortDescription" : "", "members_case class" : [{"label" : "toSystemAttrValue", "tail" : "(): MessageSystemAttributeValue", "member" : "monix.connect.sqs.domain.StringMessageAttribute.toSystemAttrValue", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#toSystemAttrValue:software.amazon.awssdk.services.sqs.model.MessageSystemAttributeValue", "kind" : "def"}, {"label" : "toAttrValue", "tail" : "(): MessageAttributeValue", "member" : "monix.connect.sqs.domain.StringMessageAttribute.toAttrValue", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#toAttrValue:software.amazon.awssdk.services.sqs.model.MessageAttributeValue", "kind" : "def"}, {"member" : "monix.connect.sqs.domain.StringMessageAttribute#<init>", "error" : "unsupported entity"}, {"label" : "attributeValue", "tail" : ": String", "member" : "monix.connect.sqs.domain.StringMessageAttribute.attributeValue", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#attributeValue:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/sqs\/domain\/StringMessageAttribute.html", "kind" : "case class"}], "org.mongodb" : [], "org" : [], "monix.connect.dynamodb" : [{"name" : "monix.connect.dynamodb.DynamoDb", "object" : "monix\/connect\/dynamodb\/DynamoDb$.html", "members_object" : [{"label" : "transformer", "tail" : "(retries: Int, delayAfterFailure: Option[FiniteDuration])(dynamoDbOp: DynamoDbOp[In, Out], client: DynamoDbAsyncClient): (Observable[In]) => Observable[Out]", "member" : "monix.connect.dynamodb.DynamoDb.transformer", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#transformer[In<:software.amazon.awssdk.services.dynamodb.model.DynamoDbRequest,Out<:software.amazon.awssdk.services.dynamodb.model.DynamoDbResponse](retries:Int,delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration])(implicitdynamoDbOp:monix.connect.dynamodb.DynamoDbOp[In,Out],implicitclient:software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient):monix.reactive.Observable[In]=>monix.reactive.Observable[Out]", "kind" : "def"}, {"label" : "consumer", "tail" : "(retries: Int, delayAfterFailure: Option[FiniteDuration])(dynamoDbOp: DynamoDbOp[In, Out], client: DynamoDbAsyncClient): Consumer[In, Unit]", "member" : "monix.connect.dynamodb.DynamoDb.consumer", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#consumer[In<:software.amazon.awssdk.services.dynamodb.model.DynamoDbRequest,Out<:software.amazon.awssdk.services.dynamodb.model.DynamoDbResponse](retries:Int,delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration])(implicitdynamoDbOp:monix.connect.dynamodb.DynamoDbOp[In,Out],implicitclient:software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient):monix.reactive.Consumer[In,Unit]", "kind" : "def"}, {"label" : "createUnsafe", "tail" : "(credentialsProvider: AwsCredentialsProvider, region: Region, endpoint: Option[String], httpClient: Option[SdkAsyncHttpClient]): DynamoDb", "member" : "monix.connect.dynamodb.DynamoDb.createUnsafe", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#createUnsafe(credentialsProvider:software.amazon.awssdk.auth.credentials.AwsCredentialsProvider,region:software.amazon.awssdk.regions.Region,endpoint:Option[String],httpClient:Option[software.amazon.awssdk.http.async.SdkAsyncHttpClient]):monix.connect.dynamodb.DynamoDb", "kind" : "def"}, {"label" : "createUnsafe", "tail" : "(dynamoDbAsyncClient: DynamoDbAsyncClient): DynamoDb", "member" : "monix.connect.dynamodb.DynamoDb.createUnsafe", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#createUnsafe(dynamoDbAsyncClient:software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient):monix.connect.dynamodb.DynamoDb", "kind" : "def"}, {"label" : "create", "tail" : "(credentialsProvider: AwsCredentialsProvider, region: Region, endpoint: Option[String], httpClient: Option[SdkAsyncHttpClient]): Resource[Task, DynamoDb]", "member" : "monix.connect.dynamodb.DynamoDb.create", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#create(credentialsProvider:software.amazon.awssdk.auth.credentials.AwsCredentialsProvider,region:software.amazon.awssdk.regions.Region,endpoint:Option[String],httpClient:Option[software.amazon.awssdk.http.async.SdkAsyncHttpClient]):cats.effect.Resource[monix.eval.Task,monix.connect.dynamodb.DynamoDb]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(monixAwsConf: Task[MonixAwsConf]): Resource[Task, DynamoDb]", "member" : "monix.connect.dynamodb.DynamoDb.fromConfig", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#fromConfig(monixAwsConf:monix.eval.Task[monix.connect.aws.auth.MonixAwsConf]):cats.effect.Resource[monix.eval.Task,monix.connect.dynamodb.DynamoDb]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(monixAwsConf: MonixAwsConf): Resource[Task, DynamoDb]", "member" : "monix.connect.dynamodb.DynamoDb.fromConfig", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#fromConfig(monixAwsConf:monix.connect.aws.auth.MonixAwsConf):cats.effect.Resource[monix.eval.Task,monix.connect.dynamodb.DynamoDb]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(namingConvention: NamingConvention): Resource[Task, DynamoDb]", "member" : "monix.connect.dynamodb.DynamoDb.fromConfig", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#fromConfig(namingConvention:pureconfig.NamingConvention):cats.effect.Resource[monix.eval.Task,monix.connect.dynamodb.DynamoDb]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(): Resource[Task, DynamoDb]", "member" : "monix.connect.dynamodb.DynamoDb.fromConfig", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#fromConfig:cats.effect.Resource[monix.eval.Task,monix.connect.dynamodb.DynamoDb]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDb$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/dynamodb\/DynamoDb.html", "kind" : "object", "members_trait" : [{"label" : "close", "tail" : "(): Task[Unit]", "member" : "monix.connect.dynamodb.DynamoDb.close", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#close:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "single", "tail" : "(request: In, retryStrategy: RetryStrategy)(dynamoDbOp: DynamoDbOp[In, Out]): Task[Out]", "member" : "monix.connect.dynamodb.DynamoDb.single", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#single[In<:software.amazon.awssdk.services.dynamodb.model.DynamoDbRequest,Out<:software.amazon.awssdk.services.dynamodb.model.DynamoDbResponse](request:In,retryStrategy:monix.connect.dynamodb.domain.RetryStrategy)(implicitdynamoDbOp:monix.connect.dynamodb.DynamoDbOp[In,Out]):monix.eval.Task[Out]", "kind" : "def"}, {"label" : "transformer", "tail" : "(retryStrategy: RetryStrategy)(dynamoDbOp: DynamoDbOp[In, Out]): (Observable[In]) => Observable[Out]", "member" : "monix.connect.dynamodb.DynamoDb.transformer", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#transformer[In<:software.amazon.awssdk.services.dynamodb.model.DynamoDbRequest,Out<:software.amazon.awssdk.services.dynamodb.model.DynamoDbResponse](retryStrategy:monix.connect.dynamodb.domain.RetryStrategy)(implicitdynamoDbOp:monix.connect.dynamodb.DynamoDbOp[In,Out]):monix.reactive.Observable[In]=>monix.reactive.Observable[Out]", "kind" : "def"}, {"label" : "sink", "tail" : "(retryStrategy: RetryStrategy)(dynamoDbOp: DynamoDbOp[In, Out]): Consumer[In, Unit]", "member" : "monix.connect.dynamodb.DynamoDb.sink", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#sink[In<:software.amazon.awssdk.services.dynamodb.model.DynamoDbRequest,Out<:software.amazon.awssdk.services.dynamodb.model.DynamoDbResponse](retryStrategy:monix.connect.dynamodb.domain.RetryStrategy)(implicitdynamoDbOp:monix.connect.dynamodb.DynamoDbOp[In,Out]):monix.reactive.Consumer[In,Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/dynamodb\/DynamoDb.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDb.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "An idiomatic DynamoDb client integrated with Monix ecosystem."}, {"name" : "monix.connect.dynamodb.DynamoDbOp", "shortDescription" : "Defines all the available dynamodb operations available from DynamoDbAsyncClient as a DynamoDbOp.", "object" : "monix\/connect\/dynamodb\/DynamoDbOp$.html", "members_object" : [{"label" : "create", "tail" : "(request: In, retries: Int, delayAfterFailure: Option[FiniteDuration])(dynamoDbOp: DynamoDbOp[In, Out], client: DynamoDbAsyncClient): Task[Out]", "member" : "monix.connect.dynamodb.DynamoDbOp.create", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#create[In<:software.amazon.awssdk.services.dynamodb.model.DynamoDbRequest,Out<:software.amazon.awssdk.services.dynamodb.model.DynamoDbResponse](request:In,retries:Int,delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration])(implicitdynamoDbOp:monix.connect.dynamodb.DynamoDbOp[In,Out],implicitclient:software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient):monix.eval.Task[Out]", "kind" : "final def"}, {"label" : "Implicits", "tail" : "", "member" : "monix.connect.dynamodb.DynamoDbOp.Implicits", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#Implicits", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/dynamodb\/DynamoDbOp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.elasticsearch" : [{"name" : "monix.connect.elasticsearch.Elasticsearch", "object" : "monix\/connect\/elasticsearch\/Elasticsearch$.html", "members_object" : [{"label" : "createUnsafe", "tail" : "(esClient: ElasticClient): Elasticsearch", "member" : "monix.connect.elasticsearch.Elasticsearch.createUnsafe", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#createUnsafe(esClient:com.sksamuel.elastic4s.ElasticClient):monix.connect.elasticsearch.Elasticsearch", "kind" : "def"}, {"label" : "create", "tail" : "(uri: String): Resource[Task, Elasticsearch]", "member" : "monix.connect.elasticsearch.Elasticsearch.create", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#create(uri:String):cats.effect.Resource[monix.eval.Task,monix.connect.elasticsearch.Elasticsearch]", "kind" : "def"}, {"label" : "create", "tail" : "(httpClientFactory: => HttpClient): Resource[Task, Elasticsearch]", "member" : "monix.connect.elasticsearch.Elasticsearch.create", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#create(httpClientFactory:=>com.sksamuel.elastic4s.HttpClient):cats.effect.Resource[monix.eval.Task,monix.connect.elasticsearch.Elasticsearch]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/elasticsearch\/Elasticsearch$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/elasticsearch\/Elasticsearch.html", "kind" : "object", "members_trait" : [{"label" : "close", "tail" : "(): Task[Unit]", "member" : "monix.connect.elasticsearch.Elasticsearch.close", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#close:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "bulkRequestSink", "tail" : "(es: Elasticsearch): Consumer[Seq[BulkCompatibleRequest], Unit]", "member" : "monix.connect.elasticsearch.Elasticsearch.bulkRequestSink", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#bulkRequestSink(es:monix.connect.elasticsearch.Elasticsearch):monix.reactive.Consumer[Seq[com.sksamuel.elastic4s.requests.bulk.BulkCompatibleRequest],Unit]", "kind" : "def"}, {"label" : "scroll", "tail" : "(searchRequest: SearchRequest): Observable[SearchHit]", "member" : "monix.connect.elasticsearch.Elasticsearch.scroll", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#scroll(searchRequest:com.sksamuel.elastic4s.requests.searches.SearchRequest):monix.reactive.Observable[com.sksamuel.elastic4s.requests.searches.SearchHit]", "kind" : "def"}, {"label" : "refresh", "tail" : "(first: String, rest: String*): Task[Response[RefreshIndexResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.refresh", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#refresh(first:String,rest:String*):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.indexes.admin.RefreshIndexResponse]]", "kind" : "def"}, {"label" : "refresh", "tail" : "(indexes: Iterable[String]): Task[Response[RefreshIndexResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.refresh", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#refresh(indexes:Iterable[String]):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.indexes.admin.RefreshIndexResponse]]", "kind" : "def"}, {"label" : "singleCount", "tail" : "(request: CountRequest): Task[Response[CountResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.singleCount", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#singleCount(request:com.sksamuel.elastic4s.requests.count.CountRequest):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.count.CountResponse]]", "kind" : "def"}, {"label" : "deleteIndex", "tail" : "(request: DeleteIndexRequest): Task[Response[DeleteIndexResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.deleteIndex", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#deleteIndex(request:com.sksamuel.elastic4s.requests.indexes.DeleteIndexRequest):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.indexes.admin.DeleteIndexResponse]]", "kind" : "def"}, {"label" : "createIndex", "tail" : "(request: CreateIndexRequest): Task[Response[CreateIndexResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.createIndex", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#createIndex(request:com.sksamuel.elastic4s.requests.indexes.CreateIndexRequest):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.indexes.CreateIndexResponse]]", "kind" : "def"}, {"label" : "singleDeleteByQuery", "tail" : "(request: DeleteByQueryRequest): Task[Response[DeleteByQueryResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.singleDeleteByQuery", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#singleDeleteByQuery(request:com.sksamuel.elastic4s.requests.delete.DeleteByQueryRequest):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.delete.DeleteByQueryResponse]]", "kind" : "def"}, {"label" : "singleDeleteById", "tail" : "(request: DeleteByIdRequest): Task[Response[DeleteResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.singleDeleteById", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#singleDeleteById(request:com.sksamuel.elastic4s.requests.delete.DeleteByIdRequest):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.delete.DeleteResponse]]", "kind" : "def"}, {"label" : "search", "tail" : "(request: SearchRequest): Task[Response[SearchResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.search", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#search(request:com.sksamuel.elastic4s.requests.searches.SearchRequest):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.searches.SearchResponse]]", "kind" : "def"}, {"label" : "singleUpdate", "tail" : "(request: UpdateRequest): Task[Response[UpdateResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.singleUpdate", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#singleUpdate(request:com.sksamuel.elastic4s.requests.update.UpdateRequest):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.update.UpdateResponse]]", "kind" : "def"}, {"label" : "getIndex", "tail" : "(request: GetIndexRequest): Task[Response[Map[String, GetIndexResponse]]]", "member" : "monix.connect.elasticsearch.Elasticsearch.getIndex", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#getIndex(request:com.sksamuel.elastic4s.requests.indexes.GetIndexRequest):monix.eval.Task[com.sksamuel.elastic4s.Response[Map[String,com.sksamuel.elastic4s.requests.indexes.GetIndexResponse]]]", "kind" : "def"}, {"label" : "getById", "tail" : "(request: GetRequest): Task[Response[GetResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.getById", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#getById(request:com.sksamuel.elastic4s.requests.get.GetRequest):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.get.GetResponse]]", "kind" : "def"}, {"label" : "bulkExecuteRequest", "tail" : "(requests: Seq[BulkCompatibleRequest]): Task[Response[BulkResponse]]", "member" : "monix.connect.elasticsearch.Elasticsearch.bulkExecuteRequest", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#bulkExecuteRequest(requests:Seq[com.sksamuel.elastic4s.requests.bulk.BulkCompatibleRequest]):monix.eval.Task[com.sksamuel.elastic4s.Response[com.sksamuel.elastic4s.requests.bulk.BulkResponse]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/elasticsearch\/Elasticsearch.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Singleton object that provides builders for Elasticsearch client."}, {"name" : "monix.connect.elasticsearch.ElasticsearchSource", "shortDescription" : "", "object" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html", "members_object" : [{"label" : "search", "tail" : "(request: SearchRequest)(client: ElasticClient): ElasticsearchSource", "member" : "monix.connect.elasticsearch.ElasticsearchSource.search", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#search(request:com.sksamuel.elastic4s.requests.searches.SearchRequest)(implicitclient:com.sksamuel.elastic4s.ElasticClient):monix.connect.elasticsearch.ElasticsearchSource", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/elasticsearch\/ElasticsearchSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.gcp.storage" : [{"name" : "monix.connect.gcp.storage.GcsBlob", "shortDescription" : "", "object" : "monix\/connect\/gcp\/storage\/GcsBlob$.html", "members_object" : [{"label" : "apply", "tail" : "(blob: Blob): GcsBlob", "member" : "monix.connect.gcp.storage.GcsBlob.apply", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#apply(blob:com.google.cloud.storage.Blob):monix.connect.gcp.storage.GcsBlob", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsBlob$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.gcp.storage.GcsBucket", "shortDescription" : "This class wraps the com.google.cloud.storage.Bucket class, providing an idiomatic scala APIhandling null values with Option where applicable, as well as wrapping all side-effectful callsin monix.eval.Task or monix.reactive.Observable.", "object" : "monix\/connect\/gcp\/storage\/GcsBucket$.html", "members_class" : [{"label" : "bucketInfo", "tail" : "(): GcsBucketInfo", "member" : "monix.connect.gcp.storage.GcsBucket.bucketInfo", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#bucketInfo:monix.connect.gcp.storage.configuration.GcsBucketInfo", "kind" : "def"}, {"label" : "getStorage", "tail" : "(): GcsStorage", "member" : "monix.connect.gcp.storage.GcsBucket.getStorage", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#getStorage:monix.connect.gcp.storage.GcsStorage", "kind" : "def"}, {"label" : "lockRetentionPolicy", "tail" : "(options: BucketTargetOption*): Task[GcsBucket]", "member" : "monix.connect.gcp.storage.GcsBucket.lockRetentionPolicy", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#lockRetentionPolicy(options:com.google.cloud.storage.Storage.BucketTargetOption*):monix.eval.Task[monix.connect.gcp.storage.GcsBucket]", "kind" : "def"}, {"label" : "listDefaultAcls", "tail" : "(): Observable[Acl]", "member" : "monix.connect.gcp.storage.GcsBucket.listDefaultAcls", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#listDefaultAcls():monix.reactive.Observable[com.google.cloud.storage.Acl]", "kind" : "def"}, {"label" : "deleteDefaultAcl", "tail" : "(acl: Entity): Task[Boolean]", "member" : "monix.connect.gcp.storage.GcsBucket.deleteDefaultAcl", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#deleteDefaultAcl(acl:com.google.cloud.storage.Acl.Entity):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "updateDefaultAcl", "tail" : "(acl: Acl): Task[Acl]", "member" : "monix.connect.gcp.storage.GcsBucket.updateDefaultAcl", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#updateDefaultAcl(acl:com.google.cloud.storage.Acl):monix.eval.Task[com.google.cloud.storage.Acl]", "kind" : "def"}, {"label" : "getDefaultAcl", "tail" : "(acl: Entity): Task[Option[Acl]]", "member" : "monix.connect.gcp.storage.GcsBucket.getDefaultAcl", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#getDefaultAcl(acl:com.google.cloud.storage.Acl.Entity):monix.eval.Task[Option[com.google.cloud.storage.Acl]]", "kind" : "def"}, {"label" : "createDefaultAcl", "tail" : "(acl: Acl): Task[Acl]", "member" : "monix.connect.gcp.storage.GcsBucket.createDefaultAcl", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#createDefaultAcl(acl:com.google.cloud.storage.Acl):monix.eval.Task[com.google.cloud.storage.Acl]", "kind" : "def"}, {"label" : "listAcls", "tail" : "(): Observable[Acl]", "member" : "monix.connect.gcp.storage.GcsBucket.listAcls", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#listAcls():monix.reactive.Observable[com.google.cloud.storage.Acl]", "kind" : "def"}, {"label" : "deleteAcl", "tail" : "(acl: Entity): Task[Boolean]", "member" : "monix.connect.gcp.storage.GcsBucket.deleteAcl", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#deleteAcl(acl:com.google.cloud.storage.Acl.Entity):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "updateAcl", "tail" : "(acl: Acl): Task[Acl]", "member" : "monix.connect.gcp.storage.GcsBucket.updateAcl", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#updateAcl(acl:com.google.cloud.storage.Acl):monix.eval.Task[com.google.cloud.storage.Acl]", "kind" : "def"}, {"label" : "getAcl", "tail" : "(acl: Entity): Task[Option[Acl]]", "member" : "monix.connect.gcp.storage.GcsBucket.getAcl", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#getAcl(acl:com.google.cloud.storage.Acl.Entity):monix.eval.Task[Option[com.google.cloud.storage.Acl]]", "kind" : "def"}, {"label" : "createAcl", "tail" : "(acl: Acl): Task[Acl]", "member" : "monix.connect.gcp.storage.GcsBucket.createAcl", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#createAcl(acl:com.google.cloud.storage.Acl):monix.eval.Task[com.google.cloud.storage.Acl]", "kind" : "def"}, {"label" : "listBlobs", "tail" : "(options: BlobListOption*): Observable[GcsBlob]", "member" : "monix.connect.gcp.storage.GcsBucket.listBlobs", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#listBlobs(options:com.google.cloud.storage.Storage.BlobListOption*):monix.reactive.Observable[monix.connect.gcp.storage.GcsBlob]", "kind" : "def"}, {"label" : "getBlobs", "tail" : "(names: NonEmptyList[String]): Observable[GcsBlob]", "member" : "monix.connect.gcp.storage.GcsBucket.getBlobs", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#getBlobs(names:cats.data.NonEmptyList[String]):monix.reactive.Observable[monix.connect.gcp.storage.GcsBlob]", "kind" : "def"}, {"label" : "getBlob", "tail" : "(name: String, options: BlobGetOption*): Task[Option[GcsBlob]]", "member" : "monix.connect.gcp.storage.GcsBucket.getBlob", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#getBlob(name:String,options:com.google.cloud.storage.Storage.BlobGetOption*):monix.eval.Task[Option[monix.connect.gcp.storage.GcsBlob]]", "kind" : "def"}, {"label" : "delete", "tail" : "(options: BucketSourceOption*): Task[Boolean]", "member" : "monix.connect.gcp.storage.GcsBucket.delete", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#delete(options:com.google.cloud.storage.Bucket.BucketSourceOption*):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "update", "tail" : "(options: BucketTargetOption*): Task[GcsBucket]", "member" : "monix.connect.gcp.storage.GcsBucket.update", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#update(options:com.google.cloud.storage.Storage.BucketTargetOption*):monix.eval.Task[monix.connect.gcp.storage.GcsBucket]", "kind" : "def"}, {"label" : "reload", "tail" : "(options: BucketSourceOption*): Task[Option[GcsBucket]]", "member" : "monix.connect.gcp.storage.GcsBucket.reload", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#reload(options:com.google.cloud.storage.Bucket.BucketSourceOption*):monix.eval.Task[Option[monix.connect.gcp.storage.GcsBucket]]", "kind" : "def"}, {"label" : "uploadFromFile", "tail" : "(blobName: String, path: Path, metadata: Option[Metadata], chunkSize: Int, options: List[BlobWriteOption]): Task[Unit]", "member" : "monix.connect.gcp.storage.GcsBucket.uploadFromFile", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#uploadFromFile(blobName:String,path:java.nio.file.Path,metadata:Option[monix.connect.gcp.storage.configuration.GcsBlobInfo.Metadata],chunkSize:Int,options:List[com.google.cloud.storage.Storage.BlobWriteOption]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "upload", "tail" : "(name: String, metadata: Option[Metadata], chunkSize: Int, options: List[BlobWriteOption]): GcsUploader", "member" : "monix.connect.gcp.storage.GcsBucket.upload", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#upload(name:String,metadata:Option[monix.connect.gcp.storage.configuration.GcsBlobInfo.Metadata],chunkSize:Int,options:List[com.google.cloud.storage.Storage.BlobWriteOption]):monix.connect.gcp.storage.components.GcsUploader", "kind" : "def"}, {"label" : "downloadToFile", "tail" : "(blobName: String, path: Path, chunkSize: Int): Task[Unit]", "member" : "monix.connect.gcp.storage.GcsBucket.downloadToFile", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#downloadToFile(blobName:String,path:java.nio.file.Path,chunkSize:Int):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "download", "tail" : "(blobName: String, chunkSize: Int): Observable[Array[Byte]]", "member" : "monix.connect.gcp.storage.GcsBucket.download", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#download(blobName:String,chunkSize:Int):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "exists", "tail" : "(options: BucketSourceOption*): Task[Boolean]", "member" : "monix.connect.gcp.storage.GcsBucket.exists", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#exists(options:com.google.cloud.storage.Bucket.BucketSourceOption*):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "walk", "tail" : "(f: Task[Page[A]]): Observable[A]", "member" : "monix.connect.gcp.storage.components.Paging.walk", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#walk[A](f:monix.eval.Task[com.google.api.gax.paging.Page[A]]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "openFileOutputStream", "tail" : "(path: Path): Observable[BufferedOutputStream]", "member" : "monix.connect.gcp.storage.components.FileIO.openFileOutputStream", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#openFileOutputStream(path:java.nio.file.Path):monix.reactive.Observable[java.io.BufferedOutputStream]", "kind" : "def"}, {"label" : "openFileInputStream", "tail" : "(path: Path): Resource[Task, BufferedInputStream]", "member" : "monix.connect.gcp.storage.components.FileIO.openFileInputStream", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#openFileInputStream(path:java.nio.file.Path):cats.effect.Resource[monix.eval.Task,java.io.BufferedInputStream]", "kind" : "def"}, {"label" : "download", "tail" : "(storage: Storage, blobId: BlobId, chunkSize: Int): Observable[Array[Byte]]", "member" : "monix.connect.gcp.storage.components.GcsDownloader.download", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#download(storage:com.google.cloud.storage.Storage,blobId:com.google.cloud.storage.BlobId,chunkSize:Int):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsBucket.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(bucket: Bucket): GcsBucket", "member" : "monix.connect.gcp.storage.GcsBucket.apply", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#apply(bucket:com.google.cloud.storage.Bucket):monix.connect.gcp.storage.GcsBucket", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsBucket$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/gcp\/storage\/GcsBucket.html", "kind" : "class"}, {"name" : "monix.connect.gcp.storage.GcsStorage", "shortDescription" : "This class wraps the com.google.cloud.storage.Storage class,providing an idiomatic scala API that only exposes side-effectful callsand automatically returns the right types from the monix connect api.", "object" : "monix\/connect\/gcp\/storage\/GcsStorage$.html", "members_class" : [{"label" : "listBlobs", "tail" : "(bucketName: String, options: BlobListOption*): Observable[GcsBlob]", "member" : "monix.connect.gcp.storage.GcsStorage.listBlobs", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#listBlobs(bucketName:String,options:com.google.cloud.storage.Storage.BlobListOption*):monix.reactive.Observable[monix.connect.gcp.storage.GcsBlob]", "kind" : "def"}, {"label" : "listBuckets", "tail" : "(options: BucketListOption*): Observable[GcsBucket]", "member" : "monix.connect.gcp.storage.GcsStorage.listBuckets", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#listBuckets(options:com.google.cloud.storage.Storage.BucketListOption*):monix.reactive.Observable[monix.connect.gcp.storage.GcsBucket]", "kind" : "def"}, {"label" : "getBlobs", "tail" : "(blobIds: List[BlobId]): Task[List[GcsBlob]]", "member" : "monix.connect.gcp.storage.GcsStorage.getBlobs", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#getBlobs(blobIds:List[com.google.cloud.storage.BlobId]):monix.eval.Task[List[monix.connect.gcp.storage.GcsBlob]]", "kind" : "def"}, {"label" : "getBlob", "tail" : "(bucketName: String, blobName: String): Task[Option[GcsBlob]]", "member" : "monix.connect.gcp.storage.GcsStorage.getBlob", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#getBlob(bucketName:String,blobName:String):monix.eval.Task[Option[monix.connect.gcp.storage.GcsBlob]]", "kind" : "def"}, {"label" : "getBlob", "tail" : "(blobId: BlobId): Task[Option[GcsBlob]]", "member" : "monix.connect.gcp.storage.GcsStorage.getBlob", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#getBlob(blobId:com.google.cloud.storage.BlobId):monix.eval.Task[Option[monix.connect.gcp.storage.GcsBlob]]", "kind" : "def"}, {"label" : "getBucket", "tail" : "(bucketName: String, options: BucketGetOption*): Task[Option[GcsBucket]]", "member" : "monix.connect.gcp.storage.GcsStorage.getBucket", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#getBucket(bucketName:String,options:com.google.cloud.storage.Storage.BucketGetOption*):monix.eval.Task[Option[monix.connect.gcp.storage.GcsBucket]]", "kind" : "def"}, {"label" : "createBlob", "tail" : "(bucketName: String, blobName: String, options: List[BlobTargetOption]): Task[GcsBlob]", "member" : "monix.connect.gcp.storage.GcsStorage.createBlob", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#createBlob(bucketName:String,blobName:String,options:List[com.google.cloud.storage.Storage.BlobTargetOption]):monix.eval.Task[monix.connect.gcp.storage.GcsBlob]", "kind" : "def"}, {"label" : "createBucket", "tail" : "(bucketName: String, location: Location, metadata: Option[Metadata], options: List[BucketTargetOption]): Task[GcsBucket]", "member" : "monix.connect.gcp.storage.GcsStorage.createBucket", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#createBucket(bucketName:String,location:monix.connect.gcp.storage.configuration.GcsBucketInfo.Locations.Location,metadata:Option[monix.connect.gcp.storage.configuration.GcsBucketInfo.Metadata],options:List[com.google.cloud.storage.Storage.BucketTargetOption]):monix.eval.Task[monix.connect.gcp.storage.GcsBucket]", "kind" : "def"}, {"member" : "monix.connect.gcp.storage.GcsStorage#<init>", "error" : "unsupported entity"}, {"label" : "underlying", "tail" : ": Storage", "member" : "monix.connect.gcp.storage.GcsStorage.underlying", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#underlying:com.google.cloud.storage.Storage", "kind" : "val"}, {"label" : "walk", "tail" : "(f: Task[Page[A]]): Observable[A]", "member" : "monix.connect.gcp.storage.components.Paging.walk", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#walk[A](f:monix.eval.Task[com.google.api.gax.paging.Page[A]]):monix.reactive.Observable[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsStorage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "create", "tail" : "(projectId: String, credentials: Path): GcsStorage", "member" : "monix.connect.gcp.storage.GcsStorage.create", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#create(projectId:String,credentials:java.nio.file.Path):monix.connect.gcp.storage.GcsStorage", "kind" : "def"}, {"label" : "create", "tail" : "(): GcsStorage", "member" : "monix.connect.gcp.storage.GcsStorage.create", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#create():monix.connect.gcp.storage.GcsStorage", "kind" : "def"}, {"label" : "apply", "tail" : "(underlying: Storage): GcsStorage", "member" : "monix.connect.gcp.storage.GcsStorage.apply", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#apply(underlying:com.google.cloud.storage.Storage):monix.connect.gcp.storage.GcsStorage", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/gcp\/storage\/GcsStorage$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/gcp\/storage\/GcsStorage.html", "kind" : "class"}], "monix.connect.mongodb.client" : [{"name" : "monix.connect.mongodb.client.CollectionCodecRef", "shortDescription" : "Represents the reference to a collection with a custom codec.", "members_case class" : [{"member" : "monix.connect.mongodb.client.CollectionCodecRef#<init>", "error" : "unsupported entity"}, {"label" : "codecProviders", "tail" : ": CodecProvider*", "member" : "monix.connect.mongodb.client.CollectionCodecRef.codecProviders", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#codecProviders:org.bson.codecs.configuration.CodecProvider*", "kind" : "val"}, {"label" : "clazz", "tail" : ": Class[Doc]", "member" : "monix.connect.mongodb.client.CollectionCodecRef.clazz", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#clazz:Class[Doc]", "kind" : "val"}, {"label" : "collection", "tail" : ": String", "member" : "monix.connect.mongodb.client.CollectionCodecRef.collection", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#collection:String", "kind" : "val"}, {"label" : "database", "tail" : ": String", "member" : "monix.connect.mongodb.client.CollectionCodecRef.database", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#database:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/mongodb\/client\/CollectionCodecRef.html", "kind" : "case class"}, {"name" : "monix.connect.mongodb.client.CollectionDocumentRef", "shortDescription" : "Represents the reference to a collection, typed in a generic abstraction, as Document.", "members_case class" : [{"member" : "monix.connect.mongodb.client.CollectionDocumentRef#<init>", "error" : "unsupported entity"}, {"label" : "collection", "tail" : ": String", "member" : "monix.connect.mongodb.client.CollectionDocumentRef.collection", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#collection:String", "kind" : "val"}, {"label" : "database", "tail" : ": String", "member" : "monix.connect.mongodb.client.CollectionDocumentRef.database", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#database:String", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/mongodb\/client\/CollectionDocumentRef.html", "kind" : "case class"}, {"name" : "monix.connect.mongodb.client.CollectionOperator", "shortDescription" : "Comprehends the set of classes needed to communicate and operate with mongodb.", "members_case class" : [{"member" : "monix.connect.mongodb.client.CollectionOperator#<init>", "error" : "unsupported entity"}, {"label" : "sink", "tail" : ": MongoSink[Doc]", "member" : "monix.connect.mongodb.client.CollectionOperator.sink", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#sink:monix.connect.mongodb.MongoSink[Doc]", "kind" : "val"}, {"label" : "single", "tail" : ": MongoSingle[Doc]", "member" : "monix.connect.mongodb.client.CollectionOperator.single", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#single:monix.connect.mongodb.MongoSingle[Doc]", "kind" : "val"}, {"label" : "source", "tail" : ": MongoSource[Doc]", "member" : "monix.connect.mongodb.client.CollectionOperator.source", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#source:monix.connect.mongodb.MongoSource[Doc]", "kind" : "val"}, {"label" : "db", "tail" : ": MongoDb", "member" : "monix.connect.mongodb.client.CollectionOperator.db", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#db:monix.connect.mongodb.MongoDb", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/client\/CollectionOperator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/mongodb\/client\/CollectionOperator.html", "kind" : "case class"}, {"name" : "monix.connect.mongodb.client.CollectionRef", "trait" : "monix\/connect\/mongodb\/client\/CollectionRef.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "collection", "tail" : ": String", "member" : "monix.connect.mongodb.client.CollectionRef.collection", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#collection:String", "kind" : "abstract val"}, {"label" : "database", "tail" : ": String", "member" : "monix.connect.mongodb.client.CollectionRef.database", "link" : "monix\/connect\/mongodb\/client\/CollectionRef.html#database:String", "kind" : "abstract val"}], "shortDescription" : ""}, {"name" : "monix.connect.mongodb.client.MongoConnection", "shortDescription" : "Singleton object that exposes signatures to create a connection to the desiredspecified mongo collections, the abstraction to operate with collections isreturned in form of CollectionOperator, which is based of three differentcomponents, the db, source, single and sink.", "object" : "monix\/connect\/mongodb\/client\/MongoConnection$.html", "members_object" : [{"label" : "createUnsafe8", "tail" : "(client: MongoClient, collections: Tuple8F[CollectionRef, T1, T2, T3, T4, T5, T6, T7, T8]): Task[Tuple8F[CollectionOperator, T1, T2, T3, T4, T5, T6, T7, T8]]", "member" : "monix.connect.mongodb.client.MongoConnection.createUnsafe8", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#createUnsafe8[T1,T2,T3,T4,T5,T6,T7,T8](client:com.mongodb.reactivestreams.client.MongoClient,collections:monix.connect.mongodb.domain.Tuple8F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5,T6,T7,T8]):monix.eval.Task[monix.connect.mongodb.domain.Tuple8F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5,T6,T7,T8]]", "kind" : "def"}, {"label" : "create8", "tail" : "(clientSettings: MongoClientSettings, collections: Tuple8F[CollectionRef, T1, T2, T3, T4, T5, T6, T7, T8]): Resource[Task, Tuple8F[CollectionOperator, T1, T2, T3, T4, T5, T6, T7, T8]]", "member" : "monix.connect.mongodb.client.MongoConnection.create8", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create8[T1,T2,T3,T4,T5,T6,T7,T8](clientSettings:com.mongodb.MongoClientSettings,collections:monix.connect.mongodb.domain.Tuple8F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5,T6,T7,T8]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple8F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5,T6,T7,T8]]", "kind" : "def"}, {"label" : "create8", "tail" : "(connectionString: String, collections: Tuple8F[CollectionRef, T1, T2, T3, T4, T5, T6, T7, T8]): Resource[Task, Tuple8F[CollectionOperator, T1, T2, T3, T4, T5, T6, T7, T8]]", "member" : "monix.connect.mongodb.client.MongoConnection.create8", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create8[T1,T2,T3,T4,T5,T6,T7,T8](connectionString:String,collections:monix.connect.mongodb.domain.Tuple8F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5,T6,T7,T8]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple8F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5,T6,T7,T8]]", "kind" : "def"}, {"label" : "createUnsafe7", "tail" : "(client: MongoClient, collections: Tuple7F[CollectionRef, T1, T2, T3, T4, T5, T6, T7]): Task[Tuple7F[CollectionOperator, T1, T2, T3, T4, T5, T6, T7]]", "member" : "monix.connect.mongodb.client.MongoConnection.createUnsafe7", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#createUnsafe7[T1,T2,T3,T4,T5,T6,T7](client:com.mongodb.reactivestreams.client.MongoClient,collections:monix.connect.mongodb.domain.Tuple7F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5,T6,T7]):monix.eval.Task[monix.connect.mongodb.domain.Tuple7F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5,T6,T7]]", "kind" : "def"}, {"label" : "create7", "tail" : "(clientSettings: MongoClientSettings, collections: Tuple7F[CollectionRef, T1, T2, T3, T4, T5, T6, T7]): Resource[Task, Tuple7F[CollectionOperator, T1, T2, T3, T4, T5, T6, T7]]", "member" : "monix.connect.mongodb.client.MongoConnection.create7", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create7[T1,T2,T3,T4,T5,T6,T7](clientSettings:com.mongodb.MongoClientSettings,collections:monix.connect.mongodb.domain.Tuple7F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5,T6,T7]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple7F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5,T6,T7]]", "kind" : "def"}, {"label" : "create7", "tail" : "(connectionString: String, collections: Tuple7F[CollectionRef, T1, T2, T3, T4, T5, T6, T7]): Resource[Task, Tuple7F[CollectionOperator, T1, T2, T3, T4, T5, T6, T7]]", "member" : "monix.connect.mongodb.client.MongoConnection.create7", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create7[T1,T2,T3,T4,T5,T6,T7](connectionString:String,collections:monix.connect.mongodb.domain.Tuple7F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5,T6,T7]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple7F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5,T6,T7]]", "kind" : "def"}, {"label" : "createUnsafe6", "tail" : "(client: MongoClient, collections: Tuple6F[CollectionRef, T1, T2, T3, T4, T5, T6]): Task[Tuple6F[CollectionOperator, T1, T2, T3, T4, T5, T6]]", "member" : "monix.connect.mongodb.client.MongoConnection.createUnsafe6", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#createUnsafe6[T1,T2,T3,T4,T5,T6](client:com.mongodb.reactivestreams.client.MongoClient,collections:monix.connect.mongodb.domain.Tuple6F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5,T6]):monix.eval.Task[monix.connect.mongodb.domain.Tuple6F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5,T6]]", "kind" : "def"}, {"label" : "create6", "tail" : "(clientSettings: MongoClientSettings, collections: Tuple6F[CollectionRef, T1, T2, T3, T4, T5, T6]): Resource[Task, Tuple6F[CollectionOperator, T1, T2, T3, T4, T5, T6]]", "member" : "monix.connect.mongodb.client.MongoConnection.create6", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create6[T1,T2,T3,T4,T5,T6](clientSettings:com.mongodb.MongoClientSettings,collections:monix.connect.mongodb.domain.Tuple6F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5,T6]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple6F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5,T6]]", "kind" : "def"}, {"label" : "create6", "tail" : "(connectionString: String, collections: Tuple6F[CollectionRef, T1, T2, T3, T4, T5, T6]): Resource[Task, Tuple6F[CollectionOperator, T1, T2, T3, T4, T5, T6]]", "member" : "monix.connect.mongodb.client.MongoConnection.create6", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create6[T1,T2,T3,T4,T5,T6](connectionString:String,collections:monix.connect.mongodb.domain.Tuple6F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5,T6]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple6F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5,T6]]", "kind" : "def"}, {"label" : "createUnsafe5", "tail" : "(client: MongoClient, collections: Tuple5F[CollectionRef, T1, T2, T3, T4, T5]): Task[Tuple5F[CollectionOperator, T1, T2, T3, T4, T5]]", "member" : "monix.connect.mongodb.client.MongoConnection.createUnsafe5", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#createUnsafe5[T1,T2,T3,T4,T5](client:com.mongodb.reactivestreams.client.MongoClient,collections:monix.connect.mongodb.domain.Tuple5F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5]):monix.eval.Task[monix.connect.mongodb.domain.Tuple5F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5]]", "kind" : "def"}, {"label" : "create5", "tail" : "(clientSettings: MongoClientSettings, collections: Tuple5F[CollectionRef, T1, T2, T3, T4, T5]): Resource[Task, Tuple5F[CollectionOperator, T1, T2, T3, T4, T5]]", "member" : "monix.connect.mongodb.client.MongoConnection.create5", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create5[T1,T2,T3,T4,T5](clientSettings:com.mongodb.MongoClientSettings,collections:monix.connect.mongodb.domain.Tuple5F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple5F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5]]", "kind" : "def"}, {"label" : "create5", "tail" : "(connectionString: String, collections: Tuple5F[CollectionRef, T1, T2, T3, T4, T5]): Resource[Task, Tuple5F[CollectionOperator, T1, T2, T3, T4, T5]]", "member" : "monix.connect.mongodb.client.MongoConnection.create5", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create5[T1,T2,T3,T4,T5](connectionString:String,collections:monix.connect.mongodb.domain.Tuple5F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4,T5]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple5F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4,T5]]", "kind" : "def"}, {"label" : "createUnsafe4", "tail" : "(client: MongoClient, collections: Tuple4F[CollectionRef, T1, T2, T3, T4]): Task[Tuple4F[CollectionOperator, T1, T2, T3, T4]]", "member" : "monix.connect.mongodb.client.MongoConnection.createUnsafe4", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#createUnsafe4[T1,T2,T3,T4](client:com.mongodb.reactivestreams.client.MongoClient,collections:monix.connect.mongodb.domain.Tuple4F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4]):monix.eval.Task[monix.connect.mongodb.domain.Tuple4F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4]]", "kind" : "def"}, {"label" : "create4", "tail" : "(clientSettings: MongoClientSettings, collections: Tuple4F[CollectionRef, T1, T2, T3, T4]): Resource[Task, Tuple4F[CollectionOperator, T1, T2, T3, T4]]", "member" : "monix.connect.mongodb.client.MongoConnection.create4", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create4[T1,T2,T3,T4](clientSettings:com.mongodb.MongoClientSettings,collections:monix.connect.mongodb.domain.Tuple4F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple4F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4]]", "kind" : "def"}, {"label" : "create4", "tail" : "(connectionString: String, collections: Tuple4F[CollectionRef, T1, T2, T3, T4]): Resource[Task, Tuple4F[CollectionOperator, T1, T2, T3, T4]]", "member" : "monix.connect.mongodb.client.MongoConnection.create4", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create4[T1,T2,T3,T4](connectionString:String,collections:monix.connect.mongodb.domain.Tuple4F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3,T4]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple4F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3,T4]]", "kind" : "def"}, {"label" : "createUnsafe3", "tail" : "(client: MongoClient, collections: Tuple3F[CollectionRef, T1, T2, T3]): Task[Tuple3F[CollectionOperator, T1, T2, T3]]", "member" : "monix.connect.mongodb.client.MongoConnection.createUnsafe3", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#createUnsafe3[T1,T2,T3](client:com.mongodb.reactivestreams.client.MongoClient,collections:monix.connect.mongodb.domain.Tuple3F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3]):monix.eval.Task[monix.connect.mongodb.domain.Tuple3F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3]]", "kind" : "def"}, {"label" : "create3", "tail" : "(clientSettings: MongoClientSettings, collections: Tuple3F[CollectionRef, T1, T2, T3]): Resource[Task, Tuple3F[CollectionOperator, T1, T2, T3]]", "member" : "monix.connect.mongodb.client.MongoConnection.create3", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create3[T1,T2,T3](clientSettings:com.mongodb.MongoClientSettings,collections:monix.connect.mongodb.domain.Tuple3F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple3F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3]]", "kind" : "def"}, {"label" : "create3", "tail" : "(connectionString: String, collections: Tuple3F[CollectionRef, T1, T2, T3]): Resource[Task, Tuple3F[CollectionOperator, T1, T2, T3]]", "member" : "monix.connect.mongodb.client.MongoConnection.create3", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create3[T1,T2,T3](connectionString:String,collections:monix.connect.mongodb.domain.Tuple3F[monix.connect.mongodb.client.CollectionRef,T1,T2,T3]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple3F[monix.connect.mongodb.client.CollectionOperator,T1,T2,T3]]", "kind" : "def"}, {"label" : "createUnsafe2", "tail" : "(client: MongoClient, collections: Tuple2F[CollectionRef, T1, T2]): Task[Tuple2F[CollectionOperator, T1, T2]]", "member" : "monix.connect.mongodb.client.MongoConnection.createUnsafe2", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#createUnsafe2[T1,T2](client:com.mongodb.reactivestreams.client.MongoClient,collections:monix.connect.mongodb.domain.Tuple2F[monix.connect.mongodb.client.CollectionRef,T1,T2]):monix.eval.Task[monix.connect.mongodb.domain.Tuple2F[monix.connect.mongodb.client.CollectionOperator,T1,T2]]", "kind" : "def"}, {"label" : "create2", "tail" : "(clientSettings: MongoClientSettings, collections: Tuple2F[CollectionRef, T1, T2]): Resource[Task, Tuple2F[CollectionOperator, T1, T2]]", "member" : "monix.connect.mongodb.client.MongoConnection.create2", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create2[T1,T2](clientSettings:com.mongodb.MongoClientSettings,collections:monix.connect.mongodb.domain.Tuple2F[monix.connect.mongodb.client.CollectionRef,T1,T2]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple2F[monix.connect.mongodb.client.CollectionOperator,T1,T2]]", "kind" : "def"}, {"label" : "create2", "tail" : "(connectionString: String, collections: Tuple2F[CollectionRef, T1, T2]): Resource[Task, Tuple2F[CollectionOperator, T1, T2]]", "member" : "monix.connect.mongodb.client.MongoConnection.create2", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create2[T1,T2](connectionString:String,collections:monix.connect.mongodb.domain.Tuple2F[monix.connect.mongodb.client.CollectionRef,T1,T2]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.domain.Tuple2F[monix.connect.mongodb.client.CollectionOperator,T1,T2]]", "kind" : "def"}, {"label" : "createUnsafe1", "tail" : "(client: MongoClient, collection: CollectionRef[T1]): Task[CollectionOperator[T1]]", "member" : "monix.connect.mongodb.client.MongoConnection.createUnsafe1", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#createUnsafe1[T1](client:com.mongodb.reactivestreams.client.MongoClient,collection:monix.connect.mongodb.client.CollectionRef[T1]):monix.eval.Task[monix.connect.mongodb.client.CollectionOperator[T1]]", "kind" : "def"}, {"label" : "create1", "tail" : "(clientSettings: MongoClientSettings, collection: CollectionRef[T1]): Resource[Task, CollectionOperator[T1]]", "member" : "monix.connect.mongodb.client.MongoConnection.create1", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create1[T1](clientSettings:com.mongodb.MongoClientSettings,collection:monix.connect.mongodb.client.CollectionRef[T1]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.client.CollectionOperator[T1]]", "kind" : "def"}, {"label" : "create1", "tail" : "(connectionString: String, collection: CollectionRef[T1]): Resource[Task, CollectionOperator[T1]]", "member" : "monix.connect.mongodb.client.MongoConnection.create1", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#create1[T1](connectionString:String,collection:monix.connect.mongodb.client.CollectionRef[T1]):cats.effect.Resource[monix.eval.Task,monix.connect.mongodb.client.CollectionOperator[T1]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/client\/MongoConnection$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.redis.client" : [{"name" : "monix.connect.redis.client.BytesCodec", "trait" : "monix\/connect\/redis\/client\/BytesCodec.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/BytesCodec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(enc: Array[Byte]): T", "member" : "monix.connect.redis.client.Codec.decode", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#decode(enc:R):T", "kind" : "abstract def"}, {"label" : "encode", "tail" : "(dec: T): Array[Byte]", "member" : "monix.connect.redis.client.Codec.encode", "link" : "monix\/connect\/redis\/client\/BytesCodec.html#encode(dec:T):R", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "monix.connect.redis.client.ClusterConnection", "shortDescription" : "Represents a connection to a set of redis servers (cluster),extending the RedisConnection interface thatdefines the set of methods to create a connection that canencode in UTF and ByteArray with custom Codecs.", "members_class" : [{"label" : "connectByteArray", "tail" : "(keyCodec: BytesCodec[K], valueCodec: BytesCodec[V]): Resource[Task, RedisCmd[K, V]]", "member" : "monix.connect.redis.client.ClusterConnection.connectByteArray", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#connectByteArray[K,V](implicitkeyCodec:monix.connect.redis.client.BytesCodec[K],implicitvalueCodec:monix.connect.redis.client.BytesCodec[V]):cats.effect.Resource[monix.eval.Task,monix.connect.redis.client.RedisCmd[K,V]]", "kind" : "def"}, {"label" : "connectByteArray", "tail" : "(): Resource[Task, RedisCmd[Array[Byte], Array[Byte]]]", "member" : "monix.connect.redis.client.ClusterConnection.connectByteArray", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#connectByteArray:cats.effect.Resource[monix.eval.Task,monix.connect.redis.client.RedisCmd[Array[Byte],Array[Byte]]]", "kind" : "def"}, {"label" : "connectUtf", "tail" : "(keyCodec: UtfCodec[K], valueCodec: UtfCodec[V]): Resource[Task, RedisCmd[K, V]]", "member" : "monix.connect.redis.client.ClusterConnection.connectUtf", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#connectUtf[K,V](implicitkeyCodec:monix.connect.redis.client.UtfCodec[K],implicitvalueCodec:monix.connect.redis.client.UtfCodec[V]):cats.effect.Resource[monix.eval.Task,monix.connect.redis.client.RedisCmd[K,V]]", "kind" : "def"}, {"label" : "connectUtf", "tail" : "(): Resource[Task, RedisCmd[String, String]]", "member" : "monix.connect.redis.client.ClusterConnection.connectUtf", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#connectUtf:cats.effect.Resource[monix.eval.Task,monix.connect.redis.client.RedisCmd[String,String]]", "kind" : "def"}, {"member" : "monix.connect.redis.client.ClusterConnection#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/ClusterConnection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/client\/ClusterConnection.html", "kind" : "class"}, {"name" : "monix.connect.redis.client.Codec", "object" : "monix\/connect\/redis\/client\/Codec$.html", "members_object" : [{"label" : "byteArray", "tail" : "(encoder: (T) => Array[Byte], decoder: (Array[Byte]) => T): BytesCodec[T]", "member" : "monix.connect.redis.client.Codec.byteArray", "link" : "monix\/connect\/redis\/client\/Codec$.html#byteArray[T](encoder:T=>Array[Byte],decoder:Array[Byte]=>T):monix.connect.redis.client.BytesCodec[T]", "kind" : "def"}, {"label" : "utf", "tail" : "(encoder: (T) => String, decoder: (String) => T): UtfCodec[T]", "member" : "monix.connect.redis.client.Codec.utf", "link" : "monix\/connect\/redis\/client\/Codec$.html#utf[T](encoder:T=>String,decoder:String=>T):monix.connect.redis.client.UtfCodec[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/Codec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/Codec$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/Codec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/Codec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/Codec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/Codec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/Codec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/Codec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/Codec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/Codec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/Codec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/Codec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/client\/Codec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/Codec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/client\/Codec$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/client\/Codec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/Codec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/Codec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/Codec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/redis\/client\/Codec.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/Codec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/Codec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/Codec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/Codec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/Codec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/Codec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/Codec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/Codec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/Codec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/Codec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/Codec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/Codec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/client\/Codec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/Codec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/client\/Codec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/client\/Codec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/Codec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/Codec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/Codec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(enc: R): T", "member" : "monix.connect.redis.client.Codec.decode", "link" : "monix\/connect\/redis\/client\/Codec.html#decode(enc:R):T", "kind" : "abstract def"}, {"label" : "encode", "tail" : "(dec: T): R", "member" : "monix.connect.redis.client.Codec.encode", "link" : "monix\/connect\/redis\/client\/Codec.html#encode(dec:T):R", "kind" : "abstract def"}], "shortDescription" : "A Codec encodes keys and values sent to Redis,and decodes keys and values in the command output."}, {"name" : "monix.connect.redis.client.RedisCmd", "shortDescription" : "Aggregates the different redis commands into a single cmd instance.", "members_case class" : [{"member" : "monix.connect.redis.client.RedisCmd#<init>", "error" : "unsupported entity"}, {"label" : "string", "tail" : ": StringCommands[K, V]", "member" : "monix.connect.redis.client.RedisCmd.string", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#string:monix.connect.redis.commands.StringCommands[K,V]", "kind" : "val"}, {"label" : "sortedSet", "tail" : ": SortedSetCommands[K, V]", "member" : "monix.connect.redis.client.RedisCmd.sortedSet", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#sortedSet:monix.connect.redis.commands.SortedSetCommands[K,V]", "kind" : "val"}, {"label" : "set", "tail" : ": SetCommands[K, V]", "member" : "monix.connect.redis.client.RedisCmd.set", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#set:monix.connect.redis.commands.SetCommands[K,V]", "kind" : "val"}, {"label" : "server", "tail" : ": ServerCommands[K, V]", "member" : "monix.connect.redis.client.RedisCmd.server", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#server:monix.connect.redis.commands.ServerCommands[K,V]", "kind" : "val"}, {"label" : "list", "tail" : ": ListCommands[K, V]", "member" : "monix.connect.redis.client.RedisCmd.list", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#list:monix.connect.redis.commands.ListCommands[K,V]", "kind" : "val"}, {"label" : "key", "tail" : ": KeyCommands[K, V]", "member" : "monix.connect.redis.client.RedisCmd.key", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#key:monix.connect.redis.commands.KeyCommands[K,V]", "kind" : "val"}, {"label" : "hash", "tail" : ": HashCommands[K, V]", "member" : "monix.connect.redis.client.RedisCmd.hash", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#hash:monix.connect.redis.commands.HashCommands[K,V]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/RedisCmd.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisCmd.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/redis\/client\/RedisCmd.html", "kind" : "case class"}, {"name" : "monix.connect.redis.client.RedisConnection", "object" : "monix\/connect\/redis\/client\/RedisConnection$.html", "members_object" : [{"label" : "cluster", "tail" : "(uris: List[RedisUri]): RedisConnection", "member" : "monix.connect.redis.client.RedisConnection.cluster", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#cluster[K,V](uris:List[monix.connect.redis.client.RedisUri]):monix.connect.redis.client.RedisConnection", "kind" : "def"}, {"label" : "standalone", "tail" : "(uri: RedisUri): RedisConnection", "member" : "monix.connect.redis.client.RedisConnection.standalone", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#standalone[K,V](uri:monix.connect.redis.client.RedisUri):monix.connect.redis.client.RedisConnection", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisConnection$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/redis\/client\/RedisConnection.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/RedisConnection.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "connectByteArray", "tail" : "(keyCodec: BytesCodec[K], valueCodec: BytesCodec[V]): Resource[Task, RedisCmd[K, V]]", "member" : "monix.connect.redis.client.RedisConnection.connectByteArray", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#connectByteArray[K,V](implicitkeyCodec:monix.connect.redis.client.BytesCodec[K],implicitvalueCodec:monix.connect.redis.client.BytesCodec[V]):cats.effect.Resource[monix.eval.Task,monix.connect.redis.client.RedisCmd[K,V]]", "kind" : "abstract def"}, {"label" : "connectByteArray", "tail" : "(): Resource[Task, RedisCmd[Array[Byte], Array[Byte]]]", "member" : "monix.connect.redis.client.RedisConnection.connectByteArray", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#connectByteArray:cats.effect.Resource[monix.eval.Task,monix.connect.redis.client.RedisCmd[Array[Byte],Array[Byte]]]", "kind" : "abstract def"}, {"label" : "connectUtf", "tail" : "(keyCodec: UtfCodec[K], valueCodec: UtfCodec[V]): Resource[Task, RedisCmd[K, V]]", "member" : "monix.connect.redis.client.RedisConnection.connectUtf", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#connectUtf[K,V](implicitkeyCodec:monix.connect.redis.client.UtfCodec[K],implicitvalueCodec:monix.connect.redis.client.UtfCodec[V]):cats.effect.Resource[monix.eval.Task,monix.connect.redis.client.RedisCmd[K,V]]", "kind" : "abstract def"}, {"label" : "connectUtf", "tail" : "(): Resource[Task, RedisCmd[String, String]]", "member" : "monix.connect.redis.client.RedisConnection.connectUtf", "link" : "monix\/connect\/redis\/client\/RedisConnection.html#connectUtf:cats.effect.Resource[monix.eval.Task,monix.connect.redis.client.RedisCmd[String,String]]", "kind" : "abstract def"}], "shortDescription" : "Trait that defines the generic set of methods to connect with Redis."}, {"name" : "monix.connect.redis.client.RedisUri", "shortDescription" : "Contains connection details for the communication with standalone redis servers.", "object" : "monix\/connect\/redis\/client\/RedisUri$.html", "members_class" : [{"label" : "withClientName", "tail" : "(clientName: String): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withClientName", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withClientName(clientName:String):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "withSentinelMasterId", "tail" : "(sentinelMasterId: String): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withSentinelMasterId", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withSentinelMasterId(sentinelMasterId:String):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "withSocket", "tail" : "(socket: String): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withSocket", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withSocket(socket:String):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "withSentinels", "tail" : "(sentinels: List[String]): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withSentinels", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withSentinels(sentinels:List[String]):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "withTimeout", "tail" : "(timeout: FiniteDuration): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withTimeout", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "withStartTls", "tail" : "(startTls: Boolean): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withStartTls", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withStartTls(startTls:Boolean):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "withVerifyPeer", "tail" : "(verifyPeer: Boolean): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withVerifyPeer", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withVerifyPeer(verifyPeer:Boolean):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "withSsl", "tail" : "(ssl: Boolean): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withSsl", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withSsl(ssl:Boolean):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "withPassword", "tail" : "(password: String): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withPassword", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withPassword(password:String):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "withDatabase", "tail" : "(database: Int): RedisUri", "member" : "monix.connect.redis.client.RedisUri.withDatabase", "link" : "monix\/connect\/redis\/client\/RedisUri.html#withDatabase(database:Int):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"member" : "monix.connect.redis.client.RedisUri#<init>", "error" : "unsupported entity"}, {"label" : "clientName", "tail" : ": Option[String]", "member" : "monix.connect.redis.client.RedisUri.clientName", "link" : "monix\/connect\/redis\/client\/RedisUri.html#clientName:Option[String]", "kind" : "val"}, {"label" : "sentinelMasterId", "tail" : ": Option[String]", "member" : "monix.connect.redis.client.RedisUri.sentinelMasterId", "link" : "monix\/connect\/redis\/client\/RedisUri.html#sentinelMasterId:Option[String]", "kind" : "val"}, {"label" : "socket", "tail" : ": Option[String]", "member" : "monix.connect.redis.client.RedisUri.socket", "link" : "monix\/connect\/redis\/client\/RedisUri.html#socket:Option[String]", "kind" : "val"}, {"label" : "sentinels", "tail" : ": List[String]", "member" : "monix.connect.redis.client.RedisUri.sentinels", "link" : "monix\/connect\/redis\/client\/RedisUri.html#sentinels:List[String]", "kind" : "val"}, {"label" : "timeout", "tail" : ": Option[FiniteDuration]", "member" : "monix.connect.redis.client.RedisUri.timeout", "link" : "monix\/connect\/redis\/client\/RedisUri.html#timeout:Option[scala.concurrent.duration.FiniteDuration]", "kind" : "val"}, {"label" : "startTls", "tail" : ": Option[Boolean]", "member" : "monix.connect.redis.client.RedisUri.startTls", "link" : "monix\/connect\/redis\/client\/RedisUri.html#startTls:Option[Boolean]", "kind" : "val"}, {"label" : "verifyPeer", "tail" : ": Option[Boolean]", "member" : "monix.connect.redis.client.RedisUri.verifyPeer", "link" : "monix\/connect\/redis\/client\/RedisUri.html#verifyPeer:Option[Boolean]", "kind" : "val"}, {"label" : "ssl", "tail" : ": Option[Boolean]", "member" : "monix.connect.redis.client.RedisUri.ssl", "link" : "monix\/connect\/redis\/client\/RedisUri.html#ssl:Option[Boolean]", "kind" : "val"}, {"label" : "password", "tail" : ": Option[String]", "member" : "monix.connect.redis.client.RedisUri.password", "link" : "monix\/connect\/redis\/client\/RedisUri.html#password:Option[String]", "kind" : "val"}, {"label" : "database", "tail" : ": Option[Int]", "member" : "monix.connect.redis.client.RedisUri.database", "link" : "monix\/connect\/redis\/client\/RedisUri.html#database:Option[Int]", "kind" : "val"}, {"label" : "uri", "tail" : ": Either[String, (String, Int)]", "member" : "monix.connect.redis.client.RedisUri.uri", "link" : "monix\/connect\/redis\/client\/RedisUri.html#uri:Either[String,(String,Int)]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/RedisUri.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/RedisUri.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/RedisUri.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/RedisUri.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/RedisUri.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/RedisUri.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/RedisUri.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisUri.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisUri.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisUri.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/RedisUri.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/RedisUri.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/client\/RedisUri.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/RedisUri.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/client\/RedisUri.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/client\/RedisUri.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/RedisUri.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisUri.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisUri.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(uri: String): RedisUri", "member" : "monix.connect.redis.client.RedisUri.apply", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#apply(uri:String):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "apply", "tail" : "(host: String, port: Int): RedisUri", "member" : "monix.connect.redis.client.RedisUri.apply", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#apply(host:String,port:Int):monix.connect.redis.client.RedisUri", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/RedisUri$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/RedisUri$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/client\/RedisUri.html", "kind" : "class"}, {"name" : "monix.connect.redis.client.UtfCodec", "trait" : "monix\/connect\/redis\/client\/UtfCodec.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/client\/UtfCodec.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "decode", "tail" : "(enc: String): T", "member" : "monix.connect.redis.client.Codec.decode", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#decode(enc:R):T", "kind" : "abstract def"}, {"label" : "encode", "tail" : "(dec: T): String", "member" : "monix.connect.redis.client.Codec.encode", "link" : "monix\/connect\/redis\/client\/UtfCodec.html#encode(dec:T):R", "kind" : "abstract def"}], "shortDescription" : ""}], "monix.connect.s3" : [{"name" : "monix.connect.s3.S3", "object" : "monix\/connect\/s3\/S3$.html", "members_object" : [{"label" : "uploadMultipart", "tail" : "(bucket: String, key: String, minChunkSize: Int, uploadSettings: UploadSettings)(s3AsyncClient: S3AsyncClient): Consumer[Array[Byte], CompleteMultipartUploadResponse]", "member" : "monix.connect.s3.S3.uploadMultipart", "link" : "monix\/connect\/s3\/S3$.html#uploadMultipart(bucket:String,key:String,minChunkSize:Int,uploadSettings:monix.connect.s3.domain.UploadSettings)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.reactive.Consumer[Array[Byte],software.amazon.awssdk.services.s3.model.CompleteMultipartUploadResponse]", "kind" : "def"}, {"label" : "upload", "tail" : "(request: PutObjectRequest, content: Array[Byte])(s3AsyncClient: S3AsyncClient): Task[PutObjectResponse]", "member" : "monix.connect.s3.S3.upload", "link" : "monix\/connect\/s3\/S3$.html#upload(request:software.amazon.awssdk.services.s3.model.PutObjectRequest,content:Array[Byte])(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.PutObjectResponse]", "kind" : "def"}, {"label" : "upload", "tail" : "(bucket: String, key: String, content: Array[Byte], uploadSettings: UploadSettings)(s3AsyncClient: S3AsyncClient): Task[PutObjectResponse]", "member" : "monix.connect.s3.S3.upload", "link" : "monix\/connect\/s3\/S3$.html#upload(bucket:String,key:String,content:Array[Byte],uploadSettings:monix.connect.s3.domain.UploadSettings)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.PutObjectResponse]", "kind" : "def"}, {"label" : "listObjects", "tail" : "(bucket: String, prefix: Option[String], maxTotalKeys: Option[Int], requestPayer: Option[RequestPayer])(s3AsyncClient: S3AsyncClient): Observable[S3Object]", "member" : "monix.connect.s3.S3.listObjects", "link" : "monix\/connect\/s3\/S3$.html#listObjects(bucket:String,prefix:Option[String],maxTotalKeys:Option[Int],requestPayer:Option[software.amazon.awssdk.services.s3.model.RequestPayer])(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.reactive.Observable[software.amazon.awssdk.services.s3.model.S3Object]", "kind" : "def"}, {"label" : "listBuckets", "tail" : "()(s3AsyncClient: S3AsyncClient): Observable[Bucket]", "member" : "monix.connect.s3.S3.listBuckets", "link" : "monix\/connect\/s3\/S3$.html#listBuckets()(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.reactive.Observable[software.amazon.awssdk.services.s3.model.Bucket]", "kind" : "def"}, {"label" : "downloadMultipart", "tail" : "(bucket: String, key: String, chunkSize: Long, downloadSettings: DownloadSettings)(s3AsyncClient: S3AsyncClient): Observable[Array[Byte]]", "member" : "monix.connect.s3.S3.downloadMultipart", "link" : "monix\/connect\/s3\/S3$.html#downloadMultipart(bucket:String,key:String,chunkSize:Long,downloadSettings:monix.connect.s3.domain.DownloadSettings)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "download", "tail" : "(request: GetObjectRequest)(s3AsyncClient: S3AsyncClient): Task[Array[Byte]]", "member" : "monix.connect.s3.S3.download", "link" : "monix\/connect\/s3\/S3$.html#download(request:software.amazon.awssdk.services.s3.model.GetObjectRequest)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "download", "tail" : "(bucket: String, key: String, firstNBytes: Option[Int], downloadSettings: DownloadSettings)(s3AsyncClient: S3AsyncClient): Task[Array[Byte]]", "member" : "monix.connect.s3.S3.download", "link" : "monix\/connect\/s3\/S3$.html#download(bucket:String,key:String,firstNBytes:Option[Int],downloadSettings:monix.connect.s3.domain.DownloadSettings)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "existsObject", "tail" : "(bucket: String, key: String)(s3AsyncClient: S3AsyncClient): Task[Boolean]", "member" : "monix.connect.s3.S3.existsObject", "link" : "monix\/connect\/s3\/S3$.html#existsObject(bucket:String,key:String)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "existsBucket", "tail" : "(bucket: String)(s3AsyncClient: S3AsyncClient): Task[Boolean]", "member" : "monix.connect.s3.S3.existsBucket", "link" : "monix\/connect\/s3\/S3$.html#existsBucket(bucket:String)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "deleteObject", "tail" : "(request: DeleteObjectRequest)(s3AsyncClient: S3AsyncClient): Task[DeleteObjectResponse]", "member" : "monix.connect.s3.S3.deleteObject", "link" : "monix\/connect\/s3\/S3$.html#deleteObject(request:software.amazon.awssdk.services.s3.model.DeleteObjectRequest)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteObjectResponse]", "kind" : "def"}, {"label" : "deleteObject", "tail" : "(bucket: String, key: String, bypassGovernanceRetention: Option[Boolean], mfa: Option[String], requestPayer: Option[String], versionId: Option[String])(s3AsyncClient: S3AsyncClient): Task[DeleteObjectResponse]", "member" : "monix.connect.s3.S3.deleteObject", "link" : "monix\/connect\/s3\/S3$.html#deleteObject(bucket:String,key:String,bypassGovernanceRetention:Option[Boolean],mfa:Option[String],requestPayer:Option[String],versionId:Option[String])(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteObjectResponse]", "kind" : "def"}, {"label" : "deleteBucket", "tail" : "(request: DeleteBucketRequest)(s3AsyncClient: S3AsyncClient): Task[DeleteBucketResponse]", "member" : "monix.connect.s3.S3.deleteBucket", "link" : "monix\/connect\/s3\/S3$.html#deleteBucket(request:software.amazon.awssdk.services.s3.model.DeleteBucketRequest)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteBucketResponse]", "kind" : "def"}, {"label" : "deleteBucket", "tail" : "(bucket: String)(s3AsyncClient: S3AsyncClient): Task[DeleteBucketResponse]", "member" : "monix.connect.s3.S3.deleteBucket", "link" : "monix\/connect\/s3\/S3$.html#deleteBucket(bucket:String)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteBucketResponse]", "kind" : "def"}, {"label" : "copyObject", "tail" : "(request: CopyObjectRequest)(s3AsyncClient: S3AsyncClient): Task[CopyObjectResponse]", "member" : "monix.connect.s3.S3.copyObject", "link" : "monix\/connect\/s3\/S3$.html#copyObject(request:software.amazon.awssdk.services.s3.model.CopyObjectRequest)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.CopyObjectResponse]", "kind" : "def"}, {"label" : "copyObject", "tail" : "(sourceBucket: String, sourceKey: String, destinationBucket: String, destinationKey: String, copyObjectSettings: CopyObjectSettings)(s3AsyncClient: S3AsyncClient): Task[CopyObjectResponse]", "member" : "monix.connect.s3.S3.copyObject", "link" : "monix\/connect\/s3\/S3$.html#copyObject(sourceBucket:String,sourceKey:String,destinationBucket:String,destinationKey:String,copyObjectSettings:monix.connect.s3.domain.CopyObjectSettings)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.CopyObjectResponse]", "kind" : "def"}, {"label" : "createBucket", "tail" : "(request: CreateBucketRequest)(s3AsyncClient: S3AsyncClient): Task[CreateBucketResponse]", "member" : "monix.connect.s3.S3.createBucket", "link" : "monix\/connect\/s3\/S3$.html#createBucket(request:software.amazon.awssdk.services.s3.model.CreateBucketRequest)(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.CreateBucketResponse]", "kind" : "def"}, {"label" : "createBucket", "tail" : "(bucket: String, acl: Option[BucketCannedACL], grantFullControl: Option[String], grantRead: Option[String], grantReadACP: Option[String], grantWrite: Option[String], grantWriteACP: Option[String], objectLockEnabledForBucket: Option[Boolean])(s3AsyncClient: S3AsyncClient): Task[CreateBucketResponse]", "member" : "monix.connect.s3.S3.createBucket", "link" : "monix\/connect\/s3\/S3$.html#createBucket(bucket:String,acl:Option[software.amazon.awssdk.services.s3.model.BucketCannedACL],grantFullControl:Option[String],grantRead:Option[String],grantReadACP:Option[String],grantWrite:Option[String],grantWriteACP:Option[String],objectLockEnabledForBucket:Option[Boolean])(implicits3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.eval.Task[software.amazon.awssdk.services.s3.model.CreateBucketResponse]", "kind" : "def"}, {"label" : "createUnsafe", "tail" : "(credentialsProvider: AwsCredentialsProvider, region: Region, endpoint: Option[String], httpClient: Option[SdkAsyncHttpClient]): S3", "member" : "monix.connect.s3.S3.createUnsafe", "link" : "monix\/connect\/s3\/S3$.html#createUnsafe(credentialsProvider:software.amazon.awssdk.auth.credentials.AwsCredentialsProvider,region:software.amazon.awssdk.regions.Region,endpoint:Option[String],httpClient:Option[software.amazon.awssdk.http.async.SdkAsyncHttpClient]):monix.connect.s3.S3", "kind" : "def"}, {"label" : "createUnsafe", "tail" : "(s3AsyncClient: S3AsyncClient): S3", "member" : "monix.connect.s3.S3.createUnsafe", "link" : "monix\/connect\/s3\/S3$.html#createUnsafe(s3AsyncClient:software.amazon.awssdk.services.s3.S3AsyncClient):monix.connect.s3.S3", "kind" : "def"}, {"label" : "create", "tail" : "(credentialsProvider: AwsCredentialsProvider, region: Region, endpoint: Option[String], httpClient: Option[SdkAsyncHttpClient]): Resource[Task, S3]", "member" : "monix.connect.s3.S3.create", "link" : "monix\/connect\/s3\/S3$.html#create(credentialsProvider:software.amazon.awssdk.auth.credentials.AwsCredentialsProvider,region:software.amazon.awssdk.regions.Region,endpoint:Option[String],httpClient:Option[software.amazon.awssdk.http.async.SdkAsyncHttpClient]):cats.effect.Resource[monix.eval.Task,monix.connect.s3.S3]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(monixAwsConf: Task[MonixAwsConf]): Resource[Task, S3]", "member" : "monix.connect.s3.S3.fromConfig", "link" : "monix\/connect\/s3\/S3$.html#fromConfig(monixAwsConf:monix.eval.Task[monix.connect.aws.auth.MonixAwsConf]):cats.effect.Resource[monix.eval.Task,monix.connect.s3.S3]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(monixAwsConf: MonixAwsConf): Resource[Task, S3]", "member" : "monix.connect.s3.S3.fromConfig", "link" : "monix\/connect\/s3\/S3$.html#fromConfig(monixAwsConf:monix.connect.aws.auth.MonixAwsConf):cats.effect.Resource[monix.eval.Task,monix.connect.s3.S3]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(namingConvention: NamingConvention): Resource[Task, S3]", "member" : "monix.connect.s3.S3.fromConfig", "link" : "monix\/connect\/s3\/S3$.html#fromConfig(namingConvention:pureconfig.NamingConvention):cats.effect.Resource[monix.eval.Task,monix.connect.s3.S3]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(): Resource[Task, S3]", "member" : "monix.connect.s3.S3.fromConfig", "link" : "monix\/connect\/s3\/S3$.html#fromConfig:cats.effect.Resource[monix.eval.Task,monix.connect.s3.S3]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/s3\/S3$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/s3\/S3$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/s3\/S3$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/s3\/S3$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/s3\/S3$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/s3\/S3$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/s3\/S3$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/S3$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/S3$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/S3$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/s3\/S3$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/s3\/S3$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/s3\/S3$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/s3\/S3$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/s3\/S3$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/s3\/S3$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/s3\/S3$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/s3\/S3$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/s3\/S3$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/s3\/S3.html", "kind" : "object", "members_trait" : [{"label" : "close", "tail" : "(): Task[Unit]", "member" : "monix.connect.s3.S3.close", "link" : "monix\/connect\/s3\/S3.html#close:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "uploadMultipart", "tail" : "(bucket: String, key: String, minChunkSize: Int, uploadSettings: UploadSettings): Consumer[Array[Byte], CompleteMultipartUploadResponse]", "member" : "monix.connect.s3.S3.uploadMultipart", "link" : "monix\/connect\/s3\/S3.html#uploadMultipart(bucket:String,key:String,minChunkSize:Int,uploadSettings:monix.connect.s3.domain.UploadSettings):monix.reactive.Consumer[Array[Byte],software.amazon.awssdk.services.s3.model.CompleteMultipartUploadResponse]", "kind" : "def"}, {"label" : "upload", "tail" : "(request: PutObjectRequest, content: Array[Byte]): Task[PutObjectResponse]", "member" : "monix.connect.s3.S3.upload", "link" : "monix\/connect\/s3\/S3.html#upload(request:software.amazon.awssdk.services.s3.model.PutObjectRequest,content:Array[Byte]):monix.eval.Task[software.amazon.awssdk.services.s3.model.PutObjectResponse]", "kind" : "def"}, {"label" : "upload", "tail" : "(bucket: String, key: String, content: Array[Byte], uploadSettings: UploadSettings): Task[PutObjectResponse]", "member" : "monix.connect.s3.S3.upload", "link" : "monix\/connect\/s3\/S3.html#upload(bucket:String,key:String,content:Array[Byte],uploadSettings:monix.connect.s3.domain.UploadSettings):monix.eval.Task[software.amazon.awssdk.services.s3.model.PutObjectResponse]", "kind" : "def"}, {"label" : "listOldestObject", "tail" : "(bucket: String, prefix: Option[String], requestPayer: Option[RequestPayer]): Task[Option[S3Object]]", "member" : "monix.connect.s3.S3.listOldestObject", "link" : "monix\/connect\/s3\/S3.html#listOldestObject(bucket:String,prefix:Option[String],requestPayer:Option[software.amazon.awssdk.services.s3.model.RequestPayer]):monix.eval.Task[Option[software.amazon.awssdk.services.s3.model.S3Object]]", "kind" : "def"}, {"label" : "listLatestObject", "tail" : "(bucket: String, prefix: Option[String], requestPayer: Option[RequestPayer]): Task[Option[S3Object]]", "member" : "monix.connect.s3.S3.listLatestObject", "link" : "monix\/connect\/s3\/S3.html#listLatestObject(bucket:String,prefix:Option[String],requestPayer:Option[software.amazon.awssdk.services.s3.model.RequestPayer]):monix.eval.Task[Option[software.amazon.awssdk.services.s3.model.S3Object]]", "kind" : "def"}, {"label" : "listLatestNObjects", "tail" : "(bucket: String, n: Int, prefix: Option[String], requestPayer: Option[RequestPayer]): Observable[S3Object]", "member" : "monix.connect.s3.S3.listLatestNObjects", "link" : "monix\/connect\/s3\/S3.html#listLatestNObjects(bucket:String,n:Int,prefix:Option[String],requestPayer:Option[software.amazon.awssdk.services.s3.model.RequestPayer]):monix.reactive.Observable[software.amazon.awssdk.services.s3.model.S3Object]", "kind" : "def"}, {"label" : "listOldestNObjects", "tail" : "(bucket: String, n: Int, prefix: Option[String], requestPayer: Option[RequestPayer]): Observable[S3Object]", "member" : "monix.connect.s3.S3.listOldestNObjects", "link" : "monix\/connect\/s3\/S3.html#listOldestNObjects(bucket:String,n:Int,prefix:Option[String],requestPayer:Option[software.amazon.awssdk.services.s3.model.RequestPayer]):monix.reactive.Observable[software.amazon.awssdk.services.s3.model.S3Object]", "kind" : "def"}, {"label" : "listObjects", "tail" : "(bucket: String, prefix: Option[String], maxTotalKeys: Option[Int], requestPayer: Option[RequestPayer]): Observable[S3Object]", "member" : "monix.connect.s3.S3.listObjects", "link" : "monix\/connect\/s3\/S3.html#listObjects(bucket:String,prefix:Option[String],maxTotalKeys:Option[Int],requestPayer:Option[software.amazon.awssdk.services.s3.model.RequestPayer]):monix.reactive.Observable[software.amazon.awssdk.services.s3.model.S3Object]", "kind" : "def"}, {"label" : "listBuckets", "tail" : "(): Observable[Bucket]", "member" : "monix.connect.s3.S3.listBuckets", "link" : "monix\/connect\/s3\/S3.html#listBuckets():monix.reactive.Observable[software.amazon.awssdk.services.s3.model.Bucket]", "kind" : "def"}, {"label" : "downloadMultipart", "tail" : "(bucket: String, key: String, chunkSize: Long, downloadSettings: DownloadSettings): Observable[Array[Byte]]", "member" : "monix.connect.s3.S3.downloadMultipart", "link" : "monix\/connect\/s3\/S3.html#downloadMultipart(bucket:String,key:String,chunkSize:Long,downloadSettings:monix.connect.s3.domain.DownloadSettings):monix.reactive.Observable[Array[Byte]]", "kind" : "def"}, {"label" : "download", "tail" : "(request: GetObjectRequest): Task[Array[Byte]]", "member" : "monix.connect.s3.S3.download", "link" : "monix\/connect\/s3\/S3.html#download(request:software.amazon.awssdk.services.s3.model.GetObjectRequest):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "download", "tail" : "(bucket: String, key: String, firstNBytes: Option[Int], downloadSettings: DownloadSettings): Task[Array[Byte]]", "member" : "monix.connect.s3.S3.download", "link" : "monix\/connect\/s3\/S3.html#download(bucket:String,key:String,firstNBytes:Option[Int],downloadSettings:monix.connect.s3.domain.DownloadSettings):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "existsObject", "tail" : "(bucket: String, key: String): Task[Boolean]", "member" : "monix.connect.s3.S3.existsObject", "link" : "monix\/connect\/s3\/S3.html#existsObject(bucket:String,key:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "existsBucket", "tail" : "(bucket: String): Task[Boolean]", "member" : "monix.connect.s3.S3.existsBucket", "link" : "monix\/connect\/s3\/S3.html#existsBucket(bucket:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "deleteObject", "tail" : "(request: DeleteObjectRequest): Task[DeleteObjectResponse]", "member" : "monix.connect.s3.S3.deleteObject", "link" : "monix\/connect\/s3\/S3.html#deleteObject(request:software.amazon.awssdk.services.s3.model.DeleteObjectRequest):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteObjectResponse]", "kind" : "def"}, {"label" : "deleteObject", "tail" : "(bucket: String, key: String, bypassGovernanceRetention: Option[Boolean], mfa: Option[String], requestPayer: Option[String], versionId: Option[String]): Task[DeleteObjectResponse]", "member" : "monix.connect.s3.S3.deleteObject", "link" : "monix\/connect\/s3\/S3.html#deleteObject(bucket:String,key:String,bypassGovernanceRetention:Option[Boolean],mfa:Option[String],requestPayer:Option[String],versionId:Option[String]):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteObjectResponse]", "kind" : "def"}, {"label" : "deleteBucket", "tail" : "(request: DeleteBucketRequest): Task[DeleteBucketResponse]", "member" : "monix.connect.s3.S3.deleteBucket", "link" : "monix\/connect\/s3\/S3.html#deleteBucket(request:software.amazon.awssdk.services.s3.model.DeleteBucketRequest):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteBucketResponse]", "kind" : "def"}, {"label" : "deleteBucket", "tail" : "(bucket: String): Task[DeleteBucketResponse]", "member" : "monix.connect.s3.S3.deleteBucket", "link" : "monix\/connect\/s3\/S3.html#deleteBucket(bucket:String):monix.eval.Task[software.amazon.awssdk.services.s3.model.DeleteBucketResponse]", "kind" : "def"}, {"label" : "copyObject", "tail" : "(request: CopyObjectRequest): Task[CopyObjectResponse]", "member" : "monix.connect.s3.S3.copyObject", "link" : "monix\/connect\/s3\/S3.html#copyObject(request:software.amazon.awssdk.services.s3.model.CopyObjectRequest):monix.eval.Task[software.amazon.awssdk.services.s3.model.CopyObjectResponse]", "kind" : "def"}, {"label" : "copyObject", "tail" : "(sourceBucket: String, sourceKey: String, destinationBucket: String, destinationKey: String, copyObjectSettings: CopyObjectSettings): Task[CopyObjectResponse]", "member" : "monix.connect.s3.S3.copyObject", "link" : "monix\/connect\/s3\/S3.html#copyObject(sourceBucket:String,sourceKey:String,destinationBucket:String,destinationKey:String,copyObjectSettings:monix.connect.s3.domain.CopyObjectSettings):monix.eval.Task[software.amazon.awssdk.services.s3.model.CopyObjectResponse]", "kind" : "def"}, {"label" : "createBucket", "tail" : "(request: CreateBucketRequest): Task[CreateBucketResponse]", "member" : "monix.connect.s3.S3.createBucket", "link" : "monix\/connect\/s3\/S3.html#createBucket(request:software.amazon.awssdk.services.s3.model.CreateBucketRequest):monix.eval.Task[software.amazon.awssdk.services.s3.model.CreateBucketResponse]", "kind" : "def"}, {"label" : "createBucket", "tail" : "(bucket: String, acl: Option[BucketCannedACL], grantFullControl: Option[String], grantRead: Option[String], grantReadACP: Option[String], grantWrite: Option[String], grantWriteACP: Option[String], objectLockEnabledForBucket: Option[Boolean]): Task[CreateBucketResponse]", "member" : "monix.connect.s3.S3.createBucket", "link" : "monix\/connect\/s3\/S3.html#createBucket(bucket:String,acl:Option[software.amazon.awssdk.services.s3.model.BucketCannedACL],grantFullControl:Option[String],grantRead:Option[String],grantReadACP:Option[String],grantWrite:Option[String],grantWriteACP:Option[String],objectLockEnabledForBucket:Option[Boolean]):monix.eval.Task[software.amazon.awssdk.services.s3.model.CreateBucketResponse]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/s3\/S3.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/s3\/S3.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/s3\/S3.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/s3\/S3.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/s3\/S3.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/s3\/S3.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/s3\/S3.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/S3.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/S3.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/S3.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/s3\/S3.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/s3\/S3.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/s3\/S3.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/s3\/S3.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/s3\/S3.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/s3\/S3.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/s3\/S3.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/s3\/S3.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/s3\/S3.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "Singleton object provides builders for S3."}], "monix.connect.parquet" : [{"name" : "monix.connect.parquet.Parquet", "shortDescription" : "", "object" : "monix\/connect\/parquet\/Parquet$.html", "members_object" : [{"label" : "writer", "tail" : "(writer: ParquetWriter[T]): Consumer[T, Long]", "member" : "monix.connect.parquet.Parquet.writer", "link" : "monix\/connect\/parquet\/Parquet$.html#writer[T](writer:org.apache.parquet.hadoop.ParquetWriter[T]):monix.reactive.Consumer[T,Long]", "kind" : "def"}, {"label" : "reader", "tail" : "(reader: ParquetReader[T]): Observable[T]", "member" : "monix.connect.parquet.Parquet.reader", "link" : "monix\/connect\/parquet\/Parquet$.html#reader[T](reader:org.apache.parquet.hadoop.ParquetReader[T]):monix.reactive.Observable[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/parquet\/Parquet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/parquet\/Parquet$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/parquet\/Parquet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/parquet\/Parquet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/parquet\/Parquet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/parquet\/Parquet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/parquet\/Parquet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/Parquet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/Parquet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/Parquet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/parquet\/Parquet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/parquet\/Parquet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/parquet\/Parquet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/parquet\/Parquet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/parquet\/Parquet$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/parquet\/Parquet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/parquet\/Parquet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/parquet\/Parquet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/parquet\/Parquet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.parquet.ParquetSink", "shortDescription" : "", "object" : "monix\/connect\/parquet\/ParquetSink$.html", "members_object" : [{"label" : "fromWriter", "tail" : "(writer: Coeval[ParquetWriter[T]]): Consumer[T, Long]", "member" : "monix.connect.parquet.ParquetSink.fromWriter", "link" : "monix\/connect\/parquet\/ParquetSink$.html#fromWriter[T](writer:monix.eval.Coeval[org.apache.parquet.hadoop.ParquetWriter[T]]):monix.reactive.Consumer[T,Long]", "kind" : "def"}, {"label" : "fromWriterUnsafe", "tail" : "(writer: ParquetWriter[T]): Consumer[T, Long]", "member" : "monix.connect.parquet.ParquetSink.fromWriterUnsafe", "link" : "monix\/connect\/parquet\/ParquetSink$.html#fromWriterUnsafe[T](writer:org.apache.parquet.hadoop.ParquetWriter[T]):monix.reactive.Consumer[T,Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/parquet\/ParquetSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/parquet\/ParquetSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/parquet\/ParquetSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/parquet\/ParquetSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/parquet\/ParquetSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/parquet\/ParquetSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/parquet\/ParquetSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/parquet\/ParquetSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/parquet\/ParquetSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/parquet\/ParquetSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/parquet\/ParquetSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/parquet\/ParquetSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/parquet\/ParquetSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/parquet\/ParquetSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/parquet\/ParquetSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/parquet\/ParquetSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.parquet.ParquetSource", "shortDescription" : "", "object" : "monix\/connect\/parquet\/ParquetSource$.html", "members_object" : [{"label" : "fromReader", "tail" : "(reader: Coeval[ParquetReader[T]]): Observable[T]", "member" : "monix.connect.parquet.ParquetSource.fromReader", "link" : "monix\/connect\/parquet\/ParquetSource$.html#fromReader[T](reader:monix.eval.Coeval[org.apache.parquet.hadoop.ParquetReader[T]]):monix.reactive.Observable[T]", "kind" : "def"}, {"label" : "fromReader", "tail" : "(reader: Task[ParquetReader[T]]): Observable[T]", "member" : "monix.connect.parquet.ParquetSource.fromReader", "link" : "monix\/connect\/parquet\/ParquetSource$.html#fromReader[T](reader:monix.eval.Task[org.apache.parquet.hadoop.ParquetReader[T]]):monix.reactive.Observable[T]", "kind" : "def"}, {"label" : "fromReaderUnsafe", "tail" : "(reader: ParquetReader[T]): Observable[T]", "member" : "monix.connect.parquet.ParquetSource.fromReaderUnsafe", "link" : "monix\/connect\/parquet\/ParquetSource$.html#fromReaderUnsafe[T](reader:org.apache.parquet.hadoop.ParquetReader[T]):monix.reactive.Observable[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/parquet\/ParquetSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/parquet\/ParquetSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/parquet\/ParquetSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/parquet\/ParquetSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/parquet\/ParquetSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/parquet\/ParquetSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/parquet\/ParquetSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/parquet\/ParquetSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/parquet\/ParquetSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/parquet\/ParquetSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/parquet\/ParquetSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/parquet\/ParquetSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/parquet\/ParquetSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/parquet\/ParquetSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/parquet\/ParquetSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/parquet\/ParquetSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/parquet\/ParquetSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.redis.domain" : [{"name" : "monix.connect.redis.domain.VScore", "shortDescription" : "Represents a value with a score associated, only usable in sorted sets redis api.", "object" : "monix\/connect\/redis\/domain\/VScore$.html", "members_object" : [{"label" : "empty", "tail" : "(): VScore[V]", "member" : "monix.connect.redis.domain.VScore.empty", "link" : "monix\/connect\/redis\/domain\/VScore$.html#empty[V]:monix.connect.redis.domain.VScore[V]", "kind" : "def"}, {"label" : "apply", "tail" : "(value: V, score: Double): VScore[V]", "member" : "monix.connect.redis.domain.VScore.apply", "link" : "monix\/connect\/redis\/domain\/VScore$.html#apply[V](value:V,score:Double):monix.connect.redis.domain.VScore[V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/domain\/VScore$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/domain\/VScore$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/domain\/VScore$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/domain\/VScore$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/domain\/VScore$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/domain\/VScore$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/domain\/VScore$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/VScore$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/VScore$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/VScore$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/domain\/VScore$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/domain\/VScore$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/domain\/VScore$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/domain\/VScore$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/domain\/VScore$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/domain\/VScore$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/domain\/VScore$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/domain\/VScore$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/domain\/VScore$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "flatMap", "tail" : "(f: (Option[V]) => Option[V]): VScore[V]", "member" : "monix.connect.redis.domain.VScore.flatMap", "link" : "monix\/connect\/redis\/domain\/VScore.html#flatMap(f:Option[V]=>Option[V]):monix.connect.redis.domain.VScore[V]", "kind" : "def"}, {"label" : "mapScore", "tail" : "(f: (Double) => Double): VScore[V]", "member" : "monix.connect.redis.domain.VScore.mapScore", "link" : "monix\/connect\/redis\/domain\/VScore.html#mapScore(f:Double=>Double):monix.connect.redis.domain.VScore[V]", "kind" : "def"}, {"label" : "score", "tail" : ": Double", "member" : "monix.connect.redis.domain.VScore.score", "link" : "monix\/connect\/redis\/domain\/VScore.html#score:Double", "kind" : "val"}, {"label" : "value", "tail" : ": Option[V]", "member" : "monix.connect.redis.domain.VScore.value", "link" : "monix\/connect\/redis\/domain\/VScore.html#value:Option[V]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/redis\/domain\/VScore.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/domain\/VScore.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/domain\/VScore.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/domain\/VScore.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/domain\/VScore.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/domain\/VScore.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/domain\/VScore.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/domain\/VScore.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/VScore.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/VScore.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/VScore.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/domain\/VScore.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/domain\/VScore.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/domain\/VScore.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/domain\/VScore.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/domain\/VScore.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/domain\/VScore.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/redis\/domain\/VScore.html", "kind" : "case class"}, {"name" : "monix.connect.redis.domain.ZArgs", "shortDescription" : "", "object" : "monix\/connect\/redis\/domain\/ZArgs$.html", "members_object" : [{"label" : "ValueSet", "tail" : "", "member" : "scala.Enumeration.ValueSet", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#ValueSetextendsAbstractSet[Enumeration.this.Value]withSortedSet[Enumeration.this.Value]withSortedSetOps[Enumeration.this.Value,scala.collection.immutable.SortedSet,Enumeration.this.ValueSet]withStrictOptimizedIterableOps[Enumeration.this.Value,scala.collection.immutable.Set,Enumeration.this.ValueSet]withSerializable", "kind" : "class"}, {"label" : "ValueOrdering", "tail" : "", "member" : "scala.Enumeration.ValueOrdering", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#ValueOrdering", "kind" : "implicit object"}, {"label" : "Val", "tail" : "", "member" : "scala.Enumeration.Val", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#ValextendsEnumeration.this.ValuewithSerializable", "kind" : "class"}, {"label" : "Value", "tail" : "", "member" : "scala.Enumeration.Value", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#ValueextendsOrdered[Enumeration.this.Value]withSerializable", "kind" : "abstract class"}, {"label" : "parse", "tail" : "(zArg: ZArg): ZAddArgs", "member" : "monix.connect.redis.domain.ZArgs.parse", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#parse(zArg:monix.connect.redis.domain.ZArgs.ZArg):io.lettuce.core.ZAddArgs", "kind" : "def"}, {"label" : "ZArg", "tail" : "", "member" : "monix.connect.redis.domain.ZArgs.ZArg", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#ZArg=monix.connect.redis.domain.ZArgs.Value", "kind" : "type"}, {"label" : "NX", "tail" : ": Value", "member" : "monix.connect.redis.domain.ZArgs.NX", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#NX:monix.connect.redis.domain.ZArgs.Value", "kind" : "val"}, {"label" : "CH", "tail" : ": Value", "member" : "monix.connect.redis.domain.ZArgs.CH", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#CH:monix.connect.redis.domain.ZArgs.Value", "kind" : "val"}, {"label" : "XX", "tail" : ": Value", "member" : "monix.connect.redis.domain.ZArgs.XX", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#XX:monix.connect.redis.domain.ZArgs.Value", "kind" : "val"}, {"label" : "Value", "tail" : "(i: Int, name: String): Value", "member" : "scala.Enumeration.Value", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#Value(i:Int,name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(name: String): Value", "member" : "scala.Enumeration.Value", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#Value(name:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(i: Int): Value", "member" : "scala.Enumeration.Value", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#Value(i:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "Value", "tail" : "(): Value", "member" : "scala.Enumeration.Value", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#Value:Enumeration.this.Value", "kind" : "final def"}, {"label" : "withName", "tail" : "(s: String): Value", "member" : "scala.Enumeration.withName", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#withName(s:String):Enumeration.this.Value", "kind" : "final def"}, {"label" : "apply", "tail" : "(x: Int): Value", "member" : "scala.Enumeration.apply", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#apply(x:Int):Enumeration.this.Value", "kind" : "final def"}, {"label" : "maxId", "tail" : "(): Int", "member" : "scala.Enumeration.maxId", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#maxId:Int", "kind" : "final def"}, {"label" : "nextName", "tail" : ": Iterator[String]", "member" : "scala.Enumeration.nextName", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#nextName:Iterator[String]", "kind" : "var"}, {"label" : "nextId", "tail" : ": Int", "member" : "scala.Enumeration.nextId", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#nextId:Int", "kind" : "var"}, {"label" : "values", "tail" : "(): ValueSet", "member" : "scala.Enumeration.values", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#values:Enumeration.this.ValueSet", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Enumeration.toString", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#toString():String", "kind" : "def"}, {"label" : "readResolve", "tail" : "(): AnyRef", "member" : "scala.Enumeration.readResolve", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#readResolve():AnyRef", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/domain\/ZArgs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.domain.ZRange", "shortDescription" : "Defines lower and upper boundaries to retrieve items from a sorted set.", "object" : "monix\/connect\/redis\/domain\/ZRange$.html", "members_class" : [{"member" : "monix.connect.redis.domain.ZRange#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/domain\/ZRange.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/domain\/ZRange.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/domain\/ZRange.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/domain\/ZRange.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/domain\/ZRange.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/domain\/ZRange.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/domain\/ZRange.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/ZRange.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/ZRange.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/ZRange.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/domain\/ZRange.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/domain\/ZRange.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/domain\/ZRange.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/domain\/ZRange.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/domain\/ZRange.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/domain\/ZRange.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/domain\/ZRange.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/domain\/ZRange.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/domain\/ZRange.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "gte", "tail" : "(lowerLimit: T): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.gte", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#gte[T](lowerLimit:T):monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "gt", "tail" : "(lowerLimit: T): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.gt", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#gt[T](lowerLimit:T):monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "lte", "tail" : "(upperLimit: T): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.lte", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#lte[T](upperLimit:T):monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "lt", "tail" : "(upperLimit: T): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.lt", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#lt[T](upperLimit:T):monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "unbounded", "tail" : "(): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.unbounded", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#unbounded[T]():monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "excluding", "tail" : "(lower: T, upper: T): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.excluding", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#excluding[T](lower:T,upper:T):monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "excludingLower", "tail" : "(lower: T, upper: T): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.excludingLower", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#excludingLower[T](lower:T,upper:T):monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "excludingUpper", "tail" : "(lower: T, upper: T): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.excludingUpper", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#excludingUpper[T](lower:T,upper:T):monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "including", "tail" : "(lower: T, upper: T): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.including", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#including[T](lower:T,upper:T):monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "apply", "tail" : "(lower: T, upper: T): ZRange[T]", "member" : "monix.connect.redis.domain.ZRange.apply", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#apply[T](lower:T,upper:T):monix.connect.redis.domain.ZRange[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/domain\/ZRange$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/domain\/ZRange$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/domain\/ZRange.html", "kind" : "class"}], "monix.connect.akka.stream" : [{"name" : "monix.connect.akka.stream.Converters", "shortDescription" : "", "object" : "monix\/connect\/akka\/stream\/Converters$.html", "members_object" : [{"label" : "ExtendedMonixConsumer", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedMonixConsumer", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedMonixConsumer[-In,+R]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ExtendedObservable", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedObservable", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedObservable[+In]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ExtendedAkkaSource", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedAkkaSource", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedAkkaSource[+In,+Mat]extendsAnyRef", "kind" : "implicit class"}, {"label" : "ExtendedAkkaFlow", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedAkkaFlow", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedAkkaFlow[-In,+Out,+Mat]extendsConverters.ExtendedAkkaSink[In,scala.concurrent.Future[Out],Out]", "kind" : "implicit class"}, {"label" : "ExtendedAkkaSink", "tail" : "", "member" : "monix.connect.akka.stream.Converters.ExtendedAkkaSink", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ExtendedAkkaSink[-In,+R<:scala.concurrent.Future[_],+Out]extendsAnyRef", "kind" : "implicit class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/akka\/stream\/Converters$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/akka\/stream\/Converters$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/akka\/stream\/Converters$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/akka\/stream\/Converters$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/akka\/stream\/Converters$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/akka\/stream\/Converters$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/akka\/stream\/Converters$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/akka\/stream\/Converters$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/akka\/stream\/Converters$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/akka\/stream\/Converters$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/akka\/stream\/Converters$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/akka\/stream\/Converters$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/akka\/stream\/Converters$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/akka\/stream\/Converters$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/akka\/stream\/Converters$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/akka\/stream\/Converters$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/akka\/stream\/Converters$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/akka\/stream\/Converters$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/akka\/stream\/Converters$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.gcp.storage.configuration" : [{"name" : "monix.connect.gcp.storage.configuration.GcsBlobInfo", "shortDescription" : "Object that provides builder and conversion (from java) methods for GcsBlobInfo.", "object" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html", "members_object" : [{"label" : "Metadata", "tail" : "", "member" : "monix.connect.gcp.storage.configuration.GcsBlobInfo.Metadata", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#MetadataextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "fromJava", "tail" : "(blobInfo: BlobInfo): GcsBlobInfo", "member" : "monix.connect.gcp.storage.configuration.GcsBlobInfo.fromJava", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#fromJava(blobInfo:com.google.cloud.storage.BlobInfo):monix.connect.gcp.storage.configuration.GcsBlobInfo", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBlobInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.gcp.storage.configuration.GcsBucketInfo", "shortDescription" : "This class wraps the com.google.cloud.storage.Blob class, providing an idiomatic scala APIhandling null values with Option where applicable, as well as wrapping all side-effectful calls", "object" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html", "members_object" : [{"label" : "Metadata", "tail" : "", "member" : "monix.connect.gcp.storage.configuration.GcsBucketInfo.Metadata", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#MetadataextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Locations", "tail" : "", "member" : "monix.connect.gcp.storage.configuration.GcsBucketInfo.Locations", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#Locations", "kind" : "object"}, {"label" : "withMetadata", "tail" : "(bucketName: String, location: Location, metadata: Option[Metadata]): BucketInfo", "member" : "monix.connect.gcp.storage.configuration.GcsBucketInfo.withMetadata", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#withMetadata(bucketName:String,location:monix.connect.gcp.storage.configuration.GcsBucketInfo.Locations.Location,metadata:Option[monix.connect.gcp.storage.configuration.GcsBucketInfo.Metadata]):com.google.cloud.storage.BucketInfo", "kind" : "def"}, {"label" : "fromJava", "tail" : "(bucketInfo: BucketInfo): GcsBucketInfo", "member" : "monix.connect.gcp.storage.configuration.GcsBucketInfo.fromJava", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#fromJava(bucketInfo:com.google.cloud.storage.BucketInfo):monix.connect.gcp.storage.configuration.GcsBucketInfo", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/gcp\/storage\/configuration\/GcsBucketInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.redis.commands" : [{"name" : "monix.connect.redis.commands.HashCommands", "shortDescription" : "Exposes the set of redis hash commands.", "members_class" : [{"label" : "hVals", "tail" : "(key: K): Observable[V]", "member" : "monix.connect.redis.commands.HashCommands.hVals", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hVals(key:K):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "hStrLen", "tail" : "(key: K, field: K): Task[Long]", "member" : "monix.connect.redis.commands.HashCommands.hStrLen", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hStrLen(key:K,field:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hSetNx", "tail" : "(key: K, field: K, value: V): Task[Boolean]", "member" : "monix.connect.redis.commands.HashCommands.hSetNx", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hSetNx(key:K,field:K,value:V):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hSet", "tail" : "(key: K, field: K, value: V): Task[Boolean]", "member" : "monix.connect.redis.commands.HashCommands.hSet", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hSet(key:K,field:K,value:V):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hMSet", "tail" : "(key: K, map: Map[K, V]): Task[Unit]", "member" : "monix.connect.redis.commands.HashCommands.hMSet", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hMSet(key:K,map:Map[K,V]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "hMGet", "tail" : "(key: K, fields: K*): Observable[(K, Option[V])]", "member" : "monix.connect.redis.commands.HashCommands.hMGet", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hMGet(key:K,fields:K*):monix.reactive.Observable[(K,Option[V])]", "kind" : "def"}, {"label" : "hLen", "tail" : "(key: K): Task[Long]", "member" : "monix.connect.redis.commands.HashCommands.hLen", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hLen(key:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hKeys", "tail" : "(key: K): Observable[K]", "member" : "monix.connect.redis.commands.HashCommands.hKeys", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hKeys(key:K):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "hGetAll", "tail" : "(key: K): Observable[(K, V)]", "member" : "monix.connect.redis.commands.HashCommands.hGetAll", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hGetAll(key:K):monix.reactive.Observable[(K,V)]", "kind" : "def"}, {"label" : "hIncrBy", "tail" : "(key: K, field: K, amount: Double): Task[Double]", "member" : "monix.connect.redis.commands.HashCommands.hIncrBy", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hIncrBy(key:K,field:K,amount:Double):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "hIncrBy", "tail" : "(key: K, field: K, amount: Long): Task[Long]", "member" : "monix.connect.redis.commands.HashCommands.hIncrBy", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hIncrBy(key:K,field:K,amount:Long):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hGet", "tail" : "(key: K, field: K): Task[Option[V]]", "member" : "monix.connect.redis.commands.HashCommands.hGet", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hGet(key:K,field:K):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "hExists", "tail" : "(key: K, field: K): Task[Boolean]", "member" : "monix.connect.redis.commands.HashCommands.hExists", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hExists(key:K,field:K):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hDel", "tail" : "(key: K, field: K): Task[Boolean]", "member" : "monix.connect.redis.commands.HashCommands.hDel", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hDel(key:K,field:K):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hDel", "tail" : "(key: K, fields: List[K]): Task[Long]", "member" : "monix.connect.redis.commands.HashCommands.hDel", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hDel(key:K,fields:List[K]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/HashCommands.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/HashCommands.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/commands\/HashCommands.html", "kind" : "class"}, {"name" : "monix.connect.redis.commands.KeyCommands", "shortDescription" : "Exposes the set of redis key commands available.", "members_class" : [{"label" : "unLink", "tail" : "(keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.KeyCommands.unLink", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#unLink(keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "keyType", "tail" : "(key: K): Task[Option[String]]", "member" : "monix.connect.redis.commands.KeyCommands.keyType", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#keyType(key:K):monix.eval.Task[Option[String]]", "kind" : "def"}, {"label" : "pttl", "tail" : "(key: K): Task[FiniteDuration]", "member" : "monix.connect.redis.commands.KeyCommands.pttl", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#pttl(key:K):monix.eval.Task[scala.concurrent.duration.FiniteDuration]", "kind" : "def"}, {"label" : "touch", "tail" : "(keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.KeyCommands.touch", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#touch(keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sort", "tail" : "(key: K): Observable[V]", "member" : "monix.connect.redis.commands.KeyCommands.sort", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#sort(key:K):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "restore", "tail" : "(key: K, ttl: FiniteDuration, value: Array[Byte]): Task[Unit]", "member" : "monix.connect.redis.commands.KeyCommands.restore", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#restore(key:K,ttl:scala.concurrent.duration.FiniteDuration,value:Array[Byte]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "renameNx", "tail" : "(key: K, newKey: K): Task[Boolean]", "member" : "monix.connect.redis.commands.KeyCommands.renameNx", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#renameNx(key:K,newKey:K):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "rename", "tail" : "(key: K, newKey: K): Task[Unit]", "member" : "monix.connect.redis.commands.KeyCommands.rename", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#rename(key:K,newKey:K):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "randomKey", "tail" : "(): Task[Option[K]]", "member" : "monix.connect.redis.commands.KeyCommands.randomKey", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#randomKey():monix.eval.Task[Option[K]]", "kind" : "def"}, {"label" : "persist", "tail" : "(key: K): Task[Boolean]", "member" : "monix.connect.redis.commands.KeyCommands.persist", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#persist(key:K):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "objectRefCount", "tail" : "(key: K): Task[Long]", "member" : "monix.connect.redis.commands.KeyCommands.objectRefCount", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#objectRefCount(key:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "objectIdleTime", "tail" : "(key: K): Task[Option[FiniteDuration]]", "member" : "monix.connect.redis.commands.KeyCommands.objectIdleTime", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#objectIdleTime(key:K):monix.eval.Task[Option[scala.concurrent.duration.FiniteDuration]]", "kind" : "def"}, {"label" : "objectEncoding", "tail" : "(key: K): Task[Option[String]]", "member" : "monix.connect.redis.commands.KeyCommands.objectEncoding", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#objectEncoding(key:K):monix.eval.Task[Option[String]]", "kind" : "def"}, {"label" : "move", "tail" : "(key: K, db: Int): Task[Boolean]", "member" : "monix.connect.redis.commands.KeyCommands.move", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#move(key:K,db:Int):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "keys", "tail" : "(pattern: K): Observable[K]", "member" : "monix.connect.redis.commands.KeyCommands.keys", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#keys(pattern:K):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "expireAt", "tail" : "(key: K, date: Date): Task[Boolean]", "member" : "monix.connect.redis.commands.KeyCommands.expireAt", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#expireAt(key:K,date:java.util.Date):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "expire", "tail" : "(key: K, timeout: FiniteDuration): Task[Boolean]", "member" : "monix.connect.redis.commands.KeyCommands.expire", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#expire(key:K,timeout:scala.concurrent.duration.FiniteDuration):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "exists", "tail" : "(key: K): Task[Boolean]", "member" : "monix.connect.redis.commands.KeyCommands.exists", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#exists(key:K):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "exists", "tail" : "(keys: List[K]): Task[Long]", "member" : "monix.connect.redis.commands.KeyCommands.exists", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#exists(keys:List[K]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "dump", "tail" : "(key: K): Task[Array[Byte]]", "member" : "monix.connect.redis.commands.KeyCommands.dump", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#dump(key:K):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "del", "tail" : "(keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.KeyCommands.del", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#del(keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/KeyCommands.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/commands\/KeyCommands.html", "kind" : "class"}, {"name" : "monix.connect.redis.commands.ListCommands", "shortDescription" : "Exposes the set of redis list commands available.", "object" : "monix\/connect\/redis\/commands\/ListCommands$.html", "members_class" : [{"label" : "rPushX", "tail" : "(key: K, values: List[V]): Task[Long]", "member" : "monix.connect.redis.commands.ListCommands.rPushX", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#rPushX(key:K,values:List[V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rPushX", "tail" : "(key: K, values: V*): Task[Long]", "member" : "monix.connect.redis.commands.ListCommands.rPushX", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#rPushX(key:K,values:V*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rPush", "tail" : "(key: K, values: List[V]): Task[Long]", "member" : "monix.connect.redis.commands.ListCommands.rPush", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#rPush(key:K,values:List[V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rPush", "tail" : "(key: K, values: V*): Task[Long]", "member" : "monix.connect.redis.commands.ListCommands.rPush", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#rPush(key:K,values:V*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rPopLPush", "tail" : "(source: K, destination: K): Task[Option[V]]", "member" : "monix.connect.redis.commands.ListCommands.rPopLPush", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#rPopLPush(source:K,destination:K):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "rPop", "tail" : "(key: K): Task[Option[V]]", "member" : "monix.connect.redis.commands.ListCommands.rPop", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#rPop(key:K):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "lTrim", "tail" : "(key: K, start: Long, stop: Long): Task[Unit]", "member" : "monix.connect.redis.commands.ListCommands.lTrim", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lTrim(key:K,start:Long,stop:Long):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "lSet", "tail" : "(key: K, index: Long, value: V): Task[Boolean]", "member" : "monix.connect.redis.commands.ListCommands.lSet", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lSet(key:K,index:Long,value:V):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "lRem", "tail" : "(key: K, count: Long, value: V): Task[Long]", "member" : "monix.connect.redis.commands.ListCommands.lRem", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lRem(key:K,count:Long,value:V):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lGetAll", "tail" : "(key: K): Observable[V]", "member" : "monix.connect.redis.commands.ListCommands.lGetAll", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lGetAll(key:K):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "lRange", "tail" : "(key: K, start: Long, stop: Long): Observable[V]", "member" : "monix.connect.redis.commands.ListCommands.lRange", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lRange(key:K,start:Long,stop:Long):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "lPush", "tail" : "(key: K, values: List[V]): Task[Long]", "member" : "monix.connect.redis.commands.ListCommands.lPush", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lPush(key:K,values:List[V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lPush", "tail" : "(key: K, values: V*): Task[Long]", "member" : "monix.connect.redis.commands.ListCommands.lPush", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lPush(key:K,values:V*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lPop", "tail" : "(key: K): Task[Option[V]]", "member" : "monix.connect.redis.commands.ListCommands.lPop", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lPop(key:K):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "lLen", "tail" : "(key: K): Task[Long]", "member" : "monix.connect.redis.commands.ListCommands.lLen", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lLen(key:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lInsertAfter", "tail" : "(key: K, pivot: V, value: V): Task[Boolean]", "member" : "monix.connect.redis.commands.ListCommands.lInsertAfter", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lInsertAfter(key:K,pivot:V,value:V):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "lInsertBefore", "tail" : "(key: K, pivot: V, value: V): Task[Boolean]", "member" : "monix.connect.redis.commands.ListCommands.lInsertBefore", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lInsertBefore(key:K,pivot:V,value:V):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "lInsert", "tail" : "(key: K, before: Boolean, pivot: V, value: V): Task[Long]", "member" : "monix.connect.redis.commands.ListCommands.lInsert", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lInsert(key:K,before:Boolean,pivot:V,value:V):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lIndex", "tail" : "(key: K, index: Long): Task[Option[V]]", "member" : "monix.connect.redis.commands.ListCommands.lIndex", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#lIndex(key:K,index:Long):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/ListCommands.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/ListCommands.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(reactiveCmd: RedisListReactiveCommands[K, V]): ListCommands[K, V]", "member" : "monix.connect.redis.commands.ListCommands.apply", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#apply[K,V](reactiveCmd:io.lettuce.core.api.reactive.RedisListReactiveCommands[K,V]):monix.connect.redis.commands.ListCommands[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/ListCommands$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/commands\/ListCommands.html", "kind" : "class"}, {"name" : "monix.connect.redis.commands.ServerCommands", "shortDescription" : "Exposes the set of redis **server** commands available.", "object" : "monix\/connect\/redis\/commands\/ServerCommands$.html", "members_class" : [{"label" : "save", "tail" : "(): Task[Unit]", "member" : "monix.connect.redis.commands.ServerCommands.save", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#save:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "memoryUsage", "tail" : "(key: K): Task[Long]", "member" : "monix.connect.redis.commands.ServerCommands.memoryUsage", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#memoryUsage(key:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lastSave", "tail" : "(): Task[Option[Date]]", "member" : "monix.connect.redis.commands.ServerCommands.lastSave", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#lastSave:monix.eval.Task[Option[java.util.Date]]", "kind" : "def"}, {"label" : "info", "tail" : "(section: String): Task[String]", "member" : "monix.connect.redis.commands.ServerCommands.info", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#info(section:String):monix.eval.Task[String]", "kind" : "def"}, {"label" : "info", "tail" : "(): Task[String]", "member" : "monix.connect.redis.commands.ServerCommands.info", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#info:monix.eval.Task[String]", "kind" : "def"}, {"label" : "flushDb", "tail" : "(): Task[Unit]", "member" : "monix.connect.redis.commands.ServerCommands.flushDb", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#flushDb:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "flushAll", "tail" : "(): Task[Unit]", "member" : "monix.connect.redis.commands.ServerCommands.flushAll", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#flushAll:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "dbSize", "tail" : "(): Task[Long]", "member" : "monix.connect.redis.commands.ServerCommands.dbSize", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#dbSize:monix.eval.Task[Long]", "kind" : "def"}, {"label" : "configSet", "tail" : "(parameter: String, value: String): Task[Unit]", "member" : "monix.connect.redis.commands.ServerCommands.configSet", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#configSet(parameter:String,value:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "configGet", "tail" : "(parameter: String): Task[Option[String]]", "member" : "monix.connect.redis.commands.ServerCommands.configGet", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#configGet(parameter:String):monix.eval.Task[Option[String]]", "kind" : "def"}, {"label" : "commandCount", "tail" : "(): Task[Long]", "member" : "monix.connect.redis.commands.ServerCommands.commandCount", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#commandCount:monix.eval.Task[Long]", "kind" : "def"}, {"label" : "clientList", "tail" : "(): Task[Option[String]]", "member" : "monix.connect.redis.commands.ServerCommands.clientList", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#clientList:monix.eval.Task[Option[String]]", "kind" : "def"}, {"label" : "clientNameSet", "tail" : "(name: K): Task[Unit]", "member" : "monix.connect.redis.commands.ServerCommands.clientNameSet", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#clientNameSet(name:K):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "clientName", "tail" : "(): Task[Option[K]]", "member" : "monix.connect.redis.commands.ServerCommands.clientName", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#clientName:monix.eval.Task[Option[K]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/ServerCommands.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(reactiveCmd: RedisServerReactiveCommands[K, V]): ServerCommands[K, V]", "member" : "monix.connect.redis.commands.ServerCommands.apply", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#apply[K,V](reactiveCmd:io.lettuce.core.api.reactive.RedisServerReactiveCommands[K,V]):monix.connect.redis.commands.ServerCommands[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/ServerCommands$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/commands\/ServerCommands.html", "kind" : "class"}, {"name" : "monix.connect.redis.commands.SetCommands", "shortDescription" : "Exposes the set of redis **set** commands available.", "members_class" : [{"label" : "sUnionStore", "tail" : "(destination: K, keys: Iterable[K]): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sUnionStore", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sUnionStore(destination:K,keys:Iterable[K]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sUnionStore", "tail" : "(destination: K, keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sUnionStore", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sUnionStore(destination:K,keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sUnion", "tail" : "(keys: Iterable[K]): Observable[V]", "member" : "monix.connect.redis.commands.SetCommands.sUnion", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sUnion(keys:Iterable[K]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sUnion", "tail" : "(keys: K*): Observable[V]", "member" : "monix.connect.redis.commands.SetCommands.sUnion", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sUnion(keys:K*):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sRem", "tail" : "(key: K, members: Iterable[V]): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sRem", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sRem(key:K,members:Iterable[V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sRem", "tail" : "(key: K, members: V*): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sRem", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sRem(key:K,members:V*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sRandMember", "tail" : "(key: K, count: Long): Observable[V]", "member" : "monix.connect.redis.commands.SetCommands.sRandMember", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sRandMember(key:K,count:Long):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sRandMember", "tail" : "(key: K): Task[Option[V]]", "member" : "monix.connect.redis.commands.SetCommands.sRandMember", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sRandMember(key:K):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "sPop", "tail" : "(key: K, count: Long): Observable[V]", "member" : "monix.connect.redis.commands.SetCommands.sPop", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sPop(key:K,count:Long):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sPop", "tail" : "(key: K): Task[Option[V]]", "member" : "monix.connect.redis.commands.SetCommands.sPop", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sPop(key:K):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "sMove", "tail" : "(source: K, destination: K, member: V): Task[Boolean]", "member" : "monix.connect.redis.commands.SetCommands.sMove", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sMove(source:K,destination:K,member:V):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sMembers", "tail" : "(key: K): Observable[V]", "member" : "monix.connect.redis.commands.SetCommands.sMembers", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sMembers(key:K):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sIsMember", "tail" : "(key: K, member: V): Task[Boolean]", "member" : "monix.connect.redis.commands.SetCommands.sIsMember", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sIsMember(key:K,member:V):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sInterStore", "tail" : "(destination: K, keys: Iterable[K]): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sInterStore", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sInterStore(destination:K,keys:Iterable[K]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sInterStore", "tail" : "(destination: K, keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sInterStore", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sInterStore(destination:K,keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sInter", "tail" : "(keys: Iterable[K]): Observable[V]", "member" : "monix.connect.redis.commands.SetCommands.sInter", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sInter(keys:Iterable[K]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sInter", "tail" : "(keys: K*): Observable[V]", "member" : "monix.connect.redis.commands.SetCommands.sInter", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sInter(keys:K*):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sDiffStore", "tail" : "(destination: K, first: K, rest: Iterable[K]): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sDiffStore", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sDiffStore(destination:K,first:K,rest:Iterable[K]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sDiffStore", "tail" : "(destination: K, first: K, rest: K*): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sDiffStore", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sDiffStore(destination:K,first:K,rest:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sDiff", "tail" : "(first: K, rest: Iterable[K]): Observable[V]", "member" : "monix.connect.redis.commands.SetCommands.sDiff", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sDiff(first:K,rest:Iterable[K]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sDiff", "tail" : "(first: K, rest: K*): Observable[V]", "member" : "monix.connect.redis.commands.SetCommands.sDiff", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sDiff(first:K,rest:K*):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sCard", "tail" : "(key: K): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sCard", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sCard(key:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sAdd", "tail" : "(key: K, members: Iterable[V]): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sAdd", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sAdd(key:K,members:Iterable[V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sAdd", "tail" : "(key: K, members: V*): Task[Long]", "member" : "monix.connect.redis.commands.SetCommands.sAdd", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#sAdd(key:K,members:V*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/SetCommands.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/SetCommands.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/commands\/SetCommands.html", "kind" : "class"}, {"name" : "monix.connect.redis.commands.SortedSetCommands", "shortDescription" : "Exposes the set of redis sorted set commands available.", "object" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html", "members_class" : [{"label" : "zUnionStore", "tail" : "(destination: K, keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zUnionStore", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zUnionStore(destination:K,keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zScore", "tail" : "(key: K, member: V): Task[Double]", "member" : "monix.connect.redis.commands.SortedSetCommands.zScore", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zScore(key:K,member:V):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zRevMembers", "tail" : "(key: K): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRevMembers", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRevMembers(key:K):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zMembers", "tail" : "(key: K): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zMembers", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zMembers(key:K):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zRevGetAll", "tail" : "(key: K): Observable[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRevGetAll", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRevGetAll(key:K):monix.reactive.Observable[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zGetAll", "tail" : "(key: K): Observable[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zGetAll", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zGetAll(key:K):monix.reactive.Observable[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zRevRank", "tail" : "(key: K, member: V): Task[Option[Long]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRevRank", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRevRank(key:K,member:V):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "zRevRangeByScoreWithScores", "tail" : "(key: K, range: ZRange[_ <: Number], limit: Int, offset: Int): Observable[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRevRangeByScoreWithScores", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRevRangeByScoreWithScores(key:K,range:monix.connect.redis.domain.ZRange[_<:Number],limit:Int,offset:Int):monix.reactive.Observable[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zRevRangeByScoreWithScores", "tail" : "(key: K, range: ZRange[_ <: Number]): Observable[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRevRangeByScoreWithScores", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRevRangeByScoreWithScores(key:K,range:monix.connect.redis.domain.ZRange[_<:Number]):monix.reactive.Observable[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zRevRangeByScore", "tail" : "(key: K, range: ZRange[_ <: Number], limit: Int, offset: Int): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRevRangeByScore", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRevRangeByScore(key:K,range:monix.connect.redis.domain.ZRange[_<:Number],limit:Int,offset:Int):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zRevRangeByScore", "tail" : "(key: K, range: ZRange[_ <: Number]): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRevRangeByScore", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRevRangeByScore(key:K,range:monix.connect.redis.domain.ZRange[_<:Number]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zRevRangeByLex", "tail" : "(key: K, range: ZRange[_ <: V], limit: Int, offset: Int): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRevRangeByLex", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRevRangeByLex(key:K,range:monix.connect.redis.domain.ZRange[_<:V],limit:Int,offset:Int):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zRevRangeByLex", "tail" : "(key: K, range: ZRange[_ <: V]): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRevRangeByLex", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRevRangeByLex(key:K,range:monix.connect.redis.domain.ZRange[_<:V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zRemRangeByScore", "tail" : "(key: K, range: ZRange[_ <: Number]): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRemRangeByScore", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRemRangeByScore(key:K,range:monix.connect.redis.domain.ZRange[_<:Number]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zRemRangeByLex", "tail" : "(key: K, range: ZRange[_ <: V]): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRemRangeByLex", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRemRangeByLex(key:K,range:monix.connect.redis.domain.ZRange[_<:V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zRem", "tail" : "(key: K, members: V*): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRem", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRem(key:K,members:V*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zRank", "tail" : "(key: K, member: V): Task[Option[Long]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRank", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRank(key:K,member:V):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "zRangeByScoreWithScores", "tail" : "(key: K, range: ZRange[_ <: Number], limit: Int, offset: Int): Observable[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRangeByScoreWithScores", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRangeByScoreWithScores(key:K,range:monix.connect.redis.domain.ZRange[_<:Number],limit:Int,offset:Int):monix.reactive.Observable[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zRangeByScoreWithScores", "tail" : "(key: K, range: ZRange[_ <: Number]): Observable[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRangeByScoreWithScores", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRangeByScoreWithScores(key:K,range:monix.connect.redis.domain.ZRange[_<:Number]):monix.reactive.Observable[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zRangeByScore", "tail" : "(key: K, range: ZRange[_ <: Number], limit: Int, offset: Int): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRangeByScore", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRangeByScore(key:K,range:monix.connect.redis.domain.ZRange[_<:Number],limit:Int,offset:Int):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zRangeByScore", "tail" : "(key: K, range: ZRange[_ <: Number]): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRangeByScore", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRangeByScore(key:K,range:monix.connect.redis.domain.ZRange[_<:Number]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zRangeByLex", "tail" : "(key: K, range: ZRange[_ <: V], limit: Int, offset: Int): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRangeByLex", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRangeByLex(key:K,range:monix.connect.redis.domain.ZRange[_<:V],limit:Int,offset:Int):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zRangeByLex", "tail" : "(key: K, range: ZRange[_ <: V]): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRangeByLex", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRangeByLex(key:K,range:monix.connect.redis.domain.ZRange[_<:V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zRange", "tail" : "(key: K, start: Long, stop: Long): Observable[V]", "member" : "monix.connect.redis.commands.SortedSetCommands.zRange", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zRange(key:K,start:Long,stop:Long):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zPopMin", "tail" : "(key: K, count: Long): Observable[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zPopMin", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zPopMin(key:K,count:Long):monix.reactive.Observable[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zPopMin", "tail" : "(key: K): Task[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zPopMin", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zPopMin(key:K):monix.eval.Task[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zPopMax", "tail" : "(key: K, count: Long): Observable[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zPopMax", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zPopMax(key:K,count:Long):monix.reactive.Observable[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zPopMax", "tail" : "(key: K): Task[VScore[V]]", "member" : "monix.connect.redis.commands.SortedSetCommands.zPopMax", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zPopMax(key:K):monix.eval.Task[monix.connect.redis.domain.VScore[V]]", "kind" : "def"}, {"label" : "zLexCount", "tail" : "(key: K, range: ZRange[_ <: V]): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zLexCount", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zLexCount(key:K,range:monix.connect.redis.domain.ZRange[_<:V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zInterStore", "tail" : "(destination: K, keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zInterStore", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zInterStore(destination:K,keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zIncrBy", "tail" : "(key: K, amount: Double, member: V): Task[Double]", "member" : "monix.connect.redis.commands.SortedSetCommands.zIncrBy", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zIncrBy(key:K,amount:Double,member:V):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zCount", "tail" : "(key: K, range: ZRange[_ <: Number]): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zCount", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zCount(key:K,range:monix.connect.redis.domain.ZRange[_<:Number]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zCard", "tail" : "(key: K): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zCard", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zCard(key:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zAddIncr", "tail" : "(key: K, zArg: ZArg, score: Double, member: V): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zAddIncr", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zAddIncr(key:K,zArg:monix.connect.redis.domain.ZArgs.ZArg,score:Double,member:V):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zAddIncr", "tail" : "(key: K, score: Double, member: V): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zAddIncr", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zAddIncr(key:K,score:Double,member:V):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zAdd", "tail" : "(key: K, zArg: ZArg, scoredValues: List[VScore[V]]): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zAdd", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zAdd(key:K,zArg:monix.connect.redis.domain.ZArgs.ZArg,scoredValues:List[monix.connect.redis.domain.VScore[V]]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zAdd", "tail" : "(key: K, zArg: ZArg, scoredValues: VScore[V]*): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zAdd", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zAdd(key:K,zArg:monix.connect.redis.domain.ZArgs.ZArg,scoredValues:monix.connect.redis.domain.VScore[V]*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zAdd", "tail" : "(key: K, zArg: ZArg, score: Double, value: V): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zAdd", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zAdd(key:K,zArg:monix.connect.redis.domain.ZArgs.ZArg,score:Double,value:V):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zAdd", "tail" : "(key: K, scoredValues: List[VScore[V]]): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zAdd", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zAdd(key:K,scoredValues:List[monix.connect.redis.domain.VScore[V]]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zAdd", "tail" : "(key: K, scoredValues: VScore[V]*): Task[Long]", "member" : "monix.connect.redis.commands.SortedSetCommands.zAdd", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zAdd(key:K,scoredValues:monix.connect.redis.domain.VScore[V]*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zAdd", "tail" : "(key: K, score: Double, member: V): Task[Boolean]", "member" : "monix.connect.redis.commands.SortedSetCommands.zAdd", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#zAdd(key:K,score:Double,member:V):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "bZPopMax", "tail" : "(timeout: FiniteDuration, keys: K*): Task[Option[(K, VScore[V])]]", "member" : "monix.connect.redis.commands.SortedSetCommands.bZPopMax", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#bZPopMax(timeout:scala.concurrent.duration.FiniteDuration,keys:K*):monix.eval.Task[Option[(K,monix.connect.redis.domain.VScore[V])]]", "kind" : "def"}, {"label" : "bZPopMin", "tail" : "(timeout: FiniteDuration, keys: K*): Task[Option[(K, VScore[V])]]", "member" : "monix.connect.redis.commands.SortedSetCommands.bZPopMin", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#bZPopMin(timeout:scala.concurrent.duration.FiniteDuration,keys:K*):monix.eval.Task[Option[(K,monix.connect.redis.domain.VScore[V])]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "apply", "tail" : "(reactiveCmd: RedisSortedSetReactiveCommands[K, V]): SortedSetCommands[K, V]", "member" : "monix.connect.redis.commands.SortedSetCommands.apply", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#apply[K,V](reactiveCmd:io.lettuce.core.api.reactive.RedisSortedSetReactiveCommands[K,V]):monix.connect.redis.commands.SortedSetCommands[K,V]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/SortedSetCommands$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/commands\/SortedSetCommands.html", "kind" : "class"}, {"name" : "monix.connect.redis.commands.StringCommands", "shortDescription" : "Exposes the set of redis string commands available.", "members_class" : [{"label" : "strLen", "tail" : "(key: K): Task[Long]", "member" : "monix.connect.redis.commands.StringCommands.strLen", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#strLen(key:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setRange", "tail" : "(key: K, offset: Long, value: V): Task[Long]", "member" : "monix.connect.redis.commands.StringCommands.setRange", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#setRange(key:K,offset:Long,value:V):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setNx", "tail" : "(key: K, value: V): Task[Boolean]", "member" : "monix.connect.redis.commands.StringCommands.setNx", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#setNx(key:K,value:V):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "setEx", "tail" : "(key: K, timeout: FiniteDuration, value: V): Task[Unit]", "member" : "monix.connect.redis.commands.StringCommands.setEx", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#setEx(key:K,timeout:scala.concurrent.duration.FiniteDuration,value:V):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "setBit", "tail" : "(key: K, offset: Long, value: Int): Task[Option[Long]]", "member" : "monix.connect.redis.commands.StringCommands.setBit", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#setBit(key:K,offset:Long,value:Int):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "set", "tail" : "(key: K, value: V): Task[Unit]", "member" : "monix.connect.redis.commands.StringCommands.set", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#set(key:K,value:V):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "mSetNx", "tail" : "(map: Map[K, V]): Task[Boolean]", "member" : "monix.connect.redis.commands.StringCommands.mSetNx", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#mSetNx(map:Map[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "mSet", "tail" : "(map: Map[K, V]): Task[Unit]", "member" : "monix.connect.redis.commands.StringCommands.mSet", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#mSet(map:Map[K,V]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "mGet", "tail" : "(keys: List[K]): Observable[(K, Option[V])]", "member" : "monix.connect.redis.commands.StringCommands.mGet", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#mGet(keys:List[K]):monix.reactive.Observable[(K,Option[V])]", "kind" : "def"}, {"label" : "mGet", "tail" : "(keys: K*): Observable[(K, Option[V])]", "member" : "monix.connect.redis.commands.StringCommands.mGet", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#mGet(keys:K*):monix.reactive.Observable[(K,Option[V])]", "kind" : "def"}, {"label" : "incrByFloat", "tail" : "(key: K, amount: Double): Task[Option[Double]]", "member" : "monix.connect.redis.commands.StringCommands.incrByFloat", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#incrByFloat(key:K,amount:Double):monix.eval.Task[Option[Double]]", "kind" : "def"}, {"label" : "incrBy", "tail" : "(key: K, amount: Long): Task[Option[Long]]", "member" : "monix.connect.redis.commands.StringCommands.incrBy", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#incrBy(key:K,amount:Long):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "incr", "tail" : "(key: K): Task[Option[Long]]", "member" : "monix.connect.redis.commands.StringCommands.incr", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#incr(key:K):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "getSet", "tail" : "(key: K, value: V): Task[Option[V]]", "member" : "monix.connect.redis.commands.StringCommands.getSet", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#getSet(key:K,value:V):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "getRange", "tail" : "(key: K, start: Long, end: Long): Task[Option[V]]", "member" : "monix.connect.redis.commands.StringCommands.getRange", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#getRange(key:K,start:Long,end:Long):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "getBit", "tail" : "(key: K, offset: Long): Task[Option[Long]]", "member" : "monix.connect.redis.commands.StringCommands.getBit", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#getBit(key:K,offset:Long):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "get", "tail" : "(key: K): Task[Option[V]]", "member" : "monix.connect.redis.commands.StringCommands.get", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#get(key:K):monix.eval.Task[Option[V]]", "kind" : "def"}, {"label" : "decrBy", "tail" : "(key: K, amount: Long): Task[Option[Long]]", "member" : "monix.connect.redis.commands.StringCommands.decrBy", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#decrBy(key:K,amount:Long):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "decr", "tail" : "(key: K): Task[Option[Long]]", "member" : "monix.connect.redis.commands.StringCommands.decr", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#decr(key:K):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "bitOpXor", "tail" : "(destination: K, keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.StringCommands.bitOpXor", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#bitOpXor(destination:K,keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitOpOr", "tail" : "(destination: K, keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.StringCommands.bitOpOr", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#bitOpOr(destination:K,keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitOpNot", "tail" : "(destination: K, source: K): Task[Long]", "member" : "monix.connect.redis.commands.StringCommands.bitOpNot", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#bitOpNot(destination:K,source:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitOpAnd", "tail" : "(destination: K, keys: K*): Task[Long]", "member" : "monix.connect.redis.commands.StringCommands.bitOpAnd", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#bitOpAnd(destination:K,keys:K*):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitPosZero", "tail" : "(key: K): Task[Option[Long]]", "member" : "monix.connect.redis.commands.StringCommands.bitPosZero", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#bitPosZero(key:K):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "bitPosOne", "tail" : "(key: K): Task[Option[Long]]", "member" : "monix.connect.redis.commands.StringCommands.bitPosOne", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#bitPosOne(key:K):monix.eval.Task[Option[Long]]", "kind" : "def"}, {"label" : "bitCount", "tail" : "(key: K, start: Long, end: Long): Task[Long]", "member" : "monix.connect.redis.commands.StringCommands.bitCount", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#bitCount(key:K,start:Long,end:Long):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitCount", "tail" : "(key: K): Task[Long]", "member" : "monix.connect.redis.commands.StringCommands.bitCount", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#bitCount(key:K):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "append", "tail" : "(key: K, value: V): Task[Long]", "member" : "monix.connect.redis.commands.StringCommands.append", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#append(key:K,value:V):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/commands\/StringCommands.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/commands\/StringCommands.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/redis\/commands\/StringCommands.html", "kind" : "class"}], "monix.connect.sqs" : [{"name" : "monix.connect.sqs.Sqs", "shortDescription" : "", "object" : "monix\/connect\/sqs\/Sqs$.html", "members_object" : [{"label" : "createUnsafe", "tail" : "(credentialsProvider: AwsCredentialsProvider, region: Region, endpoint: Option[String], httpClient: Option[SdkAsyncHttpClient]): Sqs", "member" : "monix.connect.sqs.Sqs.createUnsafe", "link" : "monix\/connect\/sqs\/Sqs$.html#createUnsafe(credentialsProvider:software.amazon.awssdk.auth.credentials.AwsCredentialsProvider,region:software.amazon.awssdk.regions.Region,endpoint:Option[String],httpClient:Option[software.amazon.awssdk.http.async.SdkAsyncHttpClient]):monix.connect.sqs.Sqs", "kind" : "def"}, {"label" : "createUnsafe", "tail" : "(sqsAsyncClient: SqsAsyncClient): Sqs", "member" : "monix.connect.sqs.Sqs.createUnsafe", "link" : "monix\/connect\/sqs\/Sqs$.html#createUnsafe(implicitsqsAsyncClient:software.amazon.awssdk.services.sqs.SqsAsyncClient):monix.connect.sqs.Sqs", "kind" : "def"}, {"label" : "create", "tail" : "(credentialsProvider: AwsCredentialsProvider, region: Region, endpoint: Option[String], httpClient: Option[SdkAsyncHttpClient]): Resource[Task, Sqs]", "member" : "monix.connect.sqs.Sqs.create", "link" : "monix\/connect\/sqs\/Sqs$.html#create(credentialsProvider:software.amazon.awssdk.auth.credentials.AwsCredentialsProvider,region:software.amazon.awssdk.regions.Region,endpoint:Option[String],httpClient:Option[software.amazon.awssdk.http.async.SdkAsyncHttpClient]):cats.effect.Resource[monix.eval.Task,monix.connect.sqs.Sqs]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(monixAwsConf: Task[MonixAwsConf]): Resource[Task, Sqs]", "member" : "monix.connect.sqs.Sqs.fromConfig", "link" : "monix\/connect\/sqs\/Sqs$.html#fromConfig(monixAwsConf:monix.eval.Task[monix.connect.aws.auth.MonixAwsConf]):cats.effect.Resource[monix.eval.Task,monix.connect.sqs.Sqs]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(monixAwsConf: MonixAwsConf): Resource[Task, Sqs]", "member" : "monix.connect.sqs.Sqs.fromConfig", "link" : "monix\/connect\/sqs\/Sqs$.html#fromConfig(monixAwsConf:monix.connect.aws.auth.MonixAwsConf):cats.effect.Resource[monix.eval.Task,monix.connect.sqs.Sqs]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(namingConvention: NamingConvention): Resource[Task, Sqs]", "member" : "monix.connect.sqs.Sqs.fromConfig", "link" : "monix\/connect\/sqs\/Sqs$.html#fromConfig(namingConvention:pureconfig.NamingConvention):cats.effect.Resource[monix.eval.Task,monix.connect.sqs.Sqs]", "kind" : "def"}, {"label" : "fromConfig", "tail" : "(): Resource[Task, Sqs]", "member" : "monix.connect.sqs.Sqs.fromConfig", "link" : "monix\/connect\/sqs\/Sqs$.html#fromConfig:cats.effect.Resource[monix.eval.Task,monix.connect.sqs.Sqs]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/Sqs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/Sqs$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/Sqs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/Sqs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/Sqs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/Sqs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/Sqs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/Sqs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/Sqs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/Sqs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/Sqs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/Sqs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/Sqs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/Sqs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/Sqs$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/Sqs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/Sqs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/Sqs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/Sqs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "close", "tail" : "(): Task[Unit]", "member" : "monix.connect.sqs.Sqs.close", "link" : "monix\/connect\/sqs\/Sqs.html#close:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "consumer", "tail" : ": SqsConsumer", "member" : "monix.connect.sqs.Sqs.consumer", "link" : "monix\/connect\/sqs\/Sqs.html#consumer:monix.connect.sqs.consumer.SqsConsumer", "kind" : "val"}, {"label" : "producer", "tail" : ": SqsProducer", "member" : "monix.connect.sqs.Sqs.producer", "link" : "monix\/connect\/sqs\/Sqs.html#producer:monix.connect.sqs.producer.SqsProducer", "kind" : "val"}, {"label" : "operator", "tail" : ": SqsOperator", "member" : "monix.connect.sqs.Sqs.operator", "link" : "monix\/connect\/sqs\/Sqs.html#operator:monix.connect.sqs.SqsOperator", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/sqs\/Sqs.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/Sqs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/Sqs.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/Sqs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/Sqs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/Sqs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/Sqs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/Sqs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/Sqs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/Sqs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/Sqs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/Sqs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/Sqs.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/Sqs.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/Sqs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/Sqs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/Sqs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/sqs\/Sqs.html", "kind" : "object"}, {"name" : "monix.connect.sqs.SqsOp", "object" : "monix\/connect\/sqs\/SqsOp$.html", "members_object" : [{"label" : "untagQueue", "tail" : ": SqsOp[UntagQueueRequest, UntagQueueResponse]", "member" : "monix.connect.sqs.SqsOp.untagQueue", "link" : "monix\/connect\/sqs\/SqsOp$.html#untagQueue:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.UntagQueueRequest,software.amazon.awssdk.services.sqs.model.UntagQueueResponse]", "kind" : "implicit val"}, {"label" : "tagQueue", "tail" : ": SqsOp[TagQueueRequest, TagQueueResponse]", "member" : "monix.connect.sqs.SqsOp.tagQueue", "link" : "monix\/connect\/sqs\/SqsOp$.html#tagQueue:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.TagQueueRequest,software.amazon.awssdk.services.sqs.model.TagQueueResponse]", "kind" : "implicit val"}, {"label" : "setQueueAttributes", "tail" : ": SqsOp[SetQueueAttributesRequest, SetQueueAttributesResponse]", "member" : "monix.connect.sqs.SqsOp.setQueueAttributes", "link" : "monix\/connect\/sqs\/SqsOp$.html#setQueueAttributes:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.SetQueueAttributesRequest,software.amazon.awssdk.services.sqs.model.SetQueueAttributesResponse]", "kind" : "implicit val"}, {"label" : "sendMessageBatch", "tail" : ": SqsOp[SendMessageBatchRequest, SendMessageBatchResponse]", "member" : "monix.connect.sqs.SqsOp.sendMessageBatch", "link" : "monix\/connect\/sqs\/SqsOp$.html#sendMessageBatch:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.SendMessageBatchRequest,software.amazon.awssdk.services.sqs.model.SendMessageBatchResponse]", "kind" : "implicit val"}, {"label" : "sendMessage", "tail" : ": SqsOp[SendMessageRequest, SendMessageResponse]", "member" : "monix.connect.sqs.SqsOp.sendMessage", "link" : "monix\/connect\/sqs\/SqsOp$.html#sendMessage:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.SendMessageRequest,software.amazon.awssdk.services.sqs.model.SendMessageResponse]", "kind" : "implicit val"}, {"label" : "removePermission", "tail" : ": SqsOp[RemovePermissionRequest, RemovePermissionResponse]", "member" : "monix.connect.sqs.SqsOp.removePermission", "link" : "monix\/connect\/sqs\/SqsOp$.html#removePermission:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.RemovePermissionRequest,software.amazon.awssdk.services.sqs.model.RemovePermissionResponse]", "kind" : "implicit val"}, {"label" : "receiveMessage", "tail" : ": SqsOp[ReceiveMessageRequest, ReceiveMessageResponse]", "member" : "monix.connect.sqs.SqsOp.receiveMessage", "link" : "monix\/connect\/sqs\/SqsOp$.html#receiveMessage:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.ReceiveMessageRequest,software.amazon.awssdk.services.sqs.model.ReceiveMessageResponse]", "kind" : "implicit val"}, {"label" : "purgeQueue", "tail" : ": SqsOp[PurgeQueueRequest, PurgeQueueResponse]", "member" : "monix.connect.sqs.SqsOp.purgeQueue", "link" : "monix\/connect\/sqs\/SqsOp$.html#purgeQueue:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.PurgeQueueRequest,software.amazon.awssdk.services.sqs.model.PurgeQueueResponse]", "kind" : "implicit val"}, {"label" : "listQueueTags", "tail" : ": SqsOp[ListQueueTagsRequest, ListQueueTagsResponse]", "member" : "monix.connect.sqs.SqsOp.listQueueTags", "link" : "monix\/connect\/sqs\/SqsOp$.html#listQueueTags:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.ListQueueTagsRequest,software.amazon.awssdk.services.sqs.model.ListQueueTagsResponse]", "kind" : "implicit val"}, {"label" : "listQueues", "tail" : ": SqsOp[ListQueuesRequest, ListQueuesResponse]", "member" : "monix.connect.sqs.SqsOp.listQueues", "link" : "monix\/connect\/sqs\/SqsOp$.html#listQueues:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.ListQueuesRequest,software.amazon.awssdk.services.sqs.model.ListQueuesResponse]", "kind" : "implicit val"}, {"label" : "listDeadLetter", "tail" : ": SqsOp[ListDeadLetterSourceQueuesRequest, ListDeadLetterSourceQueuesResponse]", "member" : "monix.connect.sqs.SqsOp.listDeadLetter", "link" : "monix\/connect\/sqs\/SqsOp$.html#listDeadLetter:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.ListDeadLetterSourceQueuesRequest,software.amazon.awssdk.services.sqs.model.ListDeadLetterSourceQueuesResponse]", "kind" : "implicit val"}, {"label" : "getQueueAttributes", "tail" : ": SqsOp[GetQueueAttributesRequest, GetQueueAttributesResponse]", "member" : "monix.connect.sqs.SqsOp.getQueueAttributes", "link" : "monix\/connect\/sqs\/SqsOp$.html#getQueueAttributes:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.GetQueueAttributesRequest,software.amazon.awssdk.services.sqs.model.GetQueueAttributesResponse]", "kind" : "implicit val"}, {"label" : "getQueueUrl", "tail" : ": SqsOp[GetQueueUrlRequest, GetQueueUrlResponse]", "member" : "monix.connect.sqs.SqsOp.getQueueUrl", "link" : "monix\/connect\/sqs\/SqsOp$.html#getQueueUrl:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.GetQueueUrlRequest,software.amazon.awssdk.services.sqs.model.GetQueueUrlResponse]", "kind" : "implicit val"}, {"label" : "deleteQueue", "tail" : ": SqsOp[DeleteQueueRequest, DeleteQueueResponse]", "member" : "monix.connect.sqs.SqsOp.deleteQueue", "link" : "monix\/connect\/sqs\/SqsOp$.html#deleteQueue:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.DeleteQueueRequest,software.amazon.awssdk.services.sqs.model.DeleteQueueResponse]", "kind" : "implicit val"}, {"label" : "deleteMessage", "tail" : ": SqsOp[DeleteMessageRequest, DeleteMessageResponse]", "member" : "monix.connect.sqs.SqsOp.deleteMessage", "link" : "monix\/connect\/sqs\/SqsOp$.html#deleteMessage:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.DeleteMessageRequest,software.amazon.awssdk.services.sqs.model.DeleteMessageResponse]", "kind" : "implicit val"}, {"label" : "createQueue", "tail" : ": SqsOp[CreateQueueRequest, CreateQueueResponse]", "member" : "monix.connect.sqs.SqsOp.createQueue", "link" : "monix\/connect\/sqs\/SqsOp$.html#createQueue:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.CreateQueueRequest,software.amazon.awssdk.services.sqs.model.CreateQueueResponse]", "kind" : "implicit val"}, {"label" : "changeMessageVisibility", "tail" : ": SqsOp[ChangeMessageVisibilityRequest, ChangeMessageVisibilityResponse]", "member" : "monix.connect.sqs.SqsOp.changeMessageVisibility", "link" : "monix\/connect\/sqs\/SqsOp$.html#changeMessageVisibility:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.ChangeMessageVisibilityRequest,software.amazon.awssdk.services.sqs.model.ChangeMessageVisibilityResponse]", "kind" : "implicit val"}, {"label" : "addPermission", "tail" : ": SqsOp[AddPermissionRequest, AddPermissionResponse]", "member" : "monix.connect.sqs.SqsOp.addPermission", "link" : "monix\/connect\/sqs\/SqsOp$.html#addPermission:monix.connect.sqs.SqsOp[software.amazon.awssdk.services.sqs.model.AddPermissionRequest,software.amazon.awssdk.services.sqs.model.AddPermissionResponse]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/SqsOp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/SqsOp$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/SqsOp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/SqsOp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/SqsOp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/SqsOp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/SqsOp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/SqsOp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/SqsOp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/SqsOp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/SqsOp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/SqsOp$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/SqsOp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/SqsOp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/SqsOp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/SqsOp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/sqs\/SqsOp.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/SqsOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/SqsOp.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/SqsOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/SqsOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/SqsOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/SqsOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/SqsOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/SqsOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/SqsOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/SqsOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/SqsOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/SqsOp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/SqsOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/SqsOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/SqsOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/SqsOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "execute", "tail" : "(sqsRequest: Request)(client: SqsAsyncClient): Task[Response]", "member" : "monix.connect.sqs.SqsOp.execute", "link" : "monix\/connect\/sqs\/SqsOp.html#execute(sqsRequest:Request)(implicitclient:software.amazon.awssdk.services.sqs.SqsAsyncClient):monix.eval.Task[Response]", "kind" : "abstract def"}], "shortDescription" : ""}, {"name" : "monix.connect.sqs.SqsOperator", "shortDescription" : "", "object" : "monix\/connect\/sqs\/SqsOperator$.html", "members_class" : [{"label" : "transformer", "tail" : "(sqsOp: SqsOp[In, Out]): Transformer[In, Out]", "member" : "monix.connect.sqs.SqsOperator.transformer", "link" : "monix\/connect\/sqs\/SqsOperator.html#transformer[In<:software.amazon.awssdk.services.sqs.model.SqsRequest,Out<:software.amazon.awssdk.services.sqs.model.SqsResponse](implicitsqsOp:monix.connect.sqs.SqsOp[In,Out]):monix.reactive.Observable.Transformer[In,Out]", "kind" : "def"}, {"label" : "untagQueue", "tail" : "(queueUrl: QueueUrl, tagKeys: List[String]): Task[Unit]", "member" : "monix.connect.sqs.SqsOperator.untagQueue", "link" : "monix\/connect\/sqs\/SqsOperator.html#untagQueue(queueUrl:monix.connect.sqs.domain.QueueUrl,tagKeys:List[String]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "tagQueue", "tail" : "(queueUrl: QueueUrl, tags: Map[String, String]): Task[Unit]", "member" : "monix.connect.sqs.SqsOperator.tagQueue", "link" : "monix\/connect\/sqs\/SqsOperator.html#tagQueue(queueUrl:monix.connect.sqs.domain.QueueUrl,tags:Map[String,String]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "setQueueAttributes", "tail" : "(queueUrl: QueueUrl, attributes: Map[QueueAttributeName, String]): Task[Unit]", "member" : "monix.connect.sqs.SqsOperator.setQueueAttributes", "link" : "monix\/connect\/sqs\/SqsOperator.html#setQueueAttributes(queueUrl:monix.connect.sqs.domain.QueueUrl,attributes:Map[software.amazon.awssdk.services.sqs.model.QueueAttributeName,String]):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "purgeQueue", "tail" : "(queueUrl: QueueUrl): Task[Unit]", "member" : "monix.connect.sqs.SqsOperator.purgeQueue", "link" : "monix\/connect\/sqs\/SqsOperator.html#purgeQueue(queueUrl:monix.connect.sqs.domain.QueueUrl):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "listQueueTags", "tail" : "(queueUrl: QueueUrl): Task[Map[String, String]]", "member" : "monix.connect.sqs.SqsOperator.listQueueTags", "link" : "monix\/connect\/sqs\/SqsOperator.html#listQueueTags(queueUrl:monix.connect.sqs.domain.QueueUrl):monix.eval.Task[Map[String,String]]", "kind" : "def"}, {"label" : "listQueueUrls", "tail" : "(queuePrefix: Option[String], maxResults: Int): Observable[QueueUrl]", "member" : "monix.connect.sqs.SqsOperator.listQueueUrls", "link" : "monix\/connect\/sqs\/SqsOperator.html#listQueueUrls(queuePrefix:Option[String],maxResults:Int):monix.reactive.Observable[monix.connect.sqs.domain.QueueUrl]", "kind" : "def"}, {"label" : "getQueueAttributes", "tail" : "(queueUrl: QueueUrl): Task[Map[QueueAttributeName, String]]", "member" : "monix.connect.sqs.SqsOperator.getQueueAttributes", "link" : "monix\/connect\/sqs\/SqsOperator.html#getQueueAttributes(queueUrl:monix.connect.sqs.domain.QueueUrl):monix.eval.Task[Map[software.amazon.awssdk.services.sqs.model.QueueAttributeName,String]]", "kind" : "def"}, {"label" : "getQueueUrl", "tail" : "(queueName: QueueName, queueOwnerAWSAccountId: Option[String]): Task[QueueUrl]", "member" : "monix.connect.sqs.SqsOperator.getQueueUrl", "link" : "monix\/connect\/sqs\/SqsOperator.html#getQueueUrl(queueName:monix.connect.sqs.domain.QueueName,queueOwnerAWSAccountId:Option[String]):monix.eval.Task[monix.connect.sqs.domain.QueueUrl]", "kind" : "def"}, {"label" : "existsQueue", "tail" : "(queueName: QueueName, queueOwnerAWSAccountId: Option[String]): Task[Boolean]", "member" : "monix.connect.sqs.SqsOperator.existsQueue", "link" : "monix\/connect\/sqs\/SqsOperator.html#existsQueue(queueName:monix.connect.sqs.domain.QueueName,queueOwnerAWSAccountId:Option[String]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "createQueue", "tail" : "(queueName: QueueName, tags: Map[String, String], attributes: Map[QueueAttributeName, String]): Task[QueueUrl]", "member" : "monix.connect.sqs.SqsOperator.createQueue", "link" : "monix\/connect\/sqs\/SqsOperator.html#createQueue(queueName:monix.connect.sqs.domain.QueueName,tags:Map[String,String],attributes:Map[software.amazon.awssdk.services.sqs.model.QueueAttributeName,String]):monix.eval.Task[monix.connect.sqs.domain.QueueUrl]", "kind" : "def"}, {"label" : "deleteQueue", "tail" : "(queueUrl: QueueUrl): Task[Unit]", "member" : "monix.connect.sqs.SqsOperator.deleteQueue", "link" : "monix\/connect\/sqs\/SqsOperator.html#deleteQueue(queueUrl:monix.connect.sqs.domain.QueueUrl):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "removePermission", "tail" : "(queueUrl: QueueUrl, label: String): Task[Unit]", "member" : "monix.connect.sqs.SqsOperator.removePermission", "link" : "monix\/connect\/sqs\/SqsOperator.html#removePermission(queueUrl:monix.connect.sqs.domain.QueueUrl,label:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "addPermission", "tail" : "(queueUrl: QueueUrl, actions: List[String], awsAccountIds: List[String], label: String): Task[Unit]", "member" : "monix.connect.sqs.SqsOperator.addPermission", "link" : "monix\/connect\/sqs\/SqsOperator.html#addPermission(queueUrl:monix.connect.sqs.domain.QueueUrl,actions:List[String],awsAccountIds:List[String],label:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/SqsOperator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/SqsOperator.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/SqsOperator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/SqsOperator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/SqsOperator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/SqsOperator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/SqsOperator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOperator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOperator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOperator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/SqsOperator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/SqsOperator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/SqsOperator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/SqsOperator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/SqsOperator.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/SqsOperator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/SqsOperator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/SqsOperator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/SqsOperator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "create", "tail" : "(asyncClient: SqsAsyncClient): SqsOperator", "member" : "monix.connect.sqs.SqsOperator.create", "link" : "monix\/connect\/sqs\/SqsOperator$.html#create(implicitasyncClient:software.amazon.awssdk.services.sqs.SqsAsyncClient):monix.connect.sqs.SqsOperator", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/SqsOperator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/SqsOperator$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/SqsOperator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/SqsOperator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/SqsOperator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/SqsOperator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/SqsOperator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOperator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOperator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/SqsOperator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/SqsOperator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/SqsOperator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/SqsOperator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/SqsOperator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/SqsOperator$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/SqsOperator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/SqsOperator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/SqsOperator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/SqsOperator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/sqs\/SqsOperator.html", "kind" : "object"}], "monix.connect.mongodb" : [{"name" : "monix.connect.mongodb.MongoDb", "shortDescription" : "Object for managing the mongo databases and collections", "object" : "monix\/connect\/mongodb\/MongoDb$.html", "members_class" : [{"label" : "listDatabases", "tail" : "(): Observable[String]", "member" : "monix.connect.mongodb.MongoDb.listDatabases", "link" : "monix\/connect\/mongodb\/MongoDb.html#listDatabases:monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "listCollections", "tail" : "(db: String): Observable[String]", "member" : "monix.connect.mongodb.MongoDb.listCollections", "link" : "monix\/connect\/mongodb\/MongoDb.html#listCollections(db:String):monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "listCollections", "tail" : "(): Observable[String]", "member" : "monix.connect.mongodb.MongoDb.listCollections", "link" : "monix\/connect\/mongodb\/MongoDb.html#listCollections:monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "renameCollection", "tail" : "(oldCollection: String, newCollection: String): Task[Boolean]", "member" : "monix.connect.mongodb.MongoDb.renameCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#renameCollection(oldCollection:String,newCollection:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "existsDatabase", "tail" : "(dbName: String): Task[Boolean]", "member" : "monix.connect.mongodb.MongoDb.existsDatabase", "link" : "monix\/connect\/mongodb\/MongoDb.html#existsDatabase(dbName:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "existsCollection", "tail" : "(db: String, collection: String): Task[Boolean]", "member" : "monix.connect.mongodb.MongoDb.existsCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#existsCollection(db:String,collection:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "existsCollection", "tail" : "(collection: String): Task[Boolean]", "member" : "monix.connect.mongodb.MongoDb.existsCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#existsCollection(collection:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "dropCollection", "tail" : "(db: String, collection: String): Task[Unit]", "member" : "monix.connect.mongodb.MongoDb.dropCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#dropCollection(db:String,collection:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "dropCollection", "tail" : "(collection: String): Task[Unit]", "member" : "monix.connect.mongodb.MongoDb.dropCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#dropCollection(collection:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "dropDatabase", "tail" : "(db: String): Task[Unit]", "member" : "monix.connect.mongodb.MongoDb.dropDatabase", "link" : "monix\/connect\/mongodb\/MongoDb.html#dropDatabase(db:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "dropDatabase", "tail" : "(): Task[Unit]", "member" : "monix.connect.mongodb.MongoDb.dropDatabase", "link" : "monix\/connect\/mongodb\/MongoDb.html#dropDatabase:monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "createCollection", "tail" : "(db: String, collection: String): Task[Unit]", "member" : "monix.connect.mongodb.MongoDb.createCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#createCollection(db:String,collection:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "createCollection", "tail" : "(collectionName: String): Task[Unit]", "member" : "monix.connect.mongodb.MongoDb.createCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#createCollection(collectionName:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "getClusterDescription", "tail" : "(): Task[ClusterDescription]", "member" : "monix.connect.mongodb.MongoDb.getClusterDescription", "link" : "monix\/connect\/mongodb\/MongoDb.html#getClusterDescription:monix.eval.Task[com.mongodb.connection.ClusterDescription]", "kind" : "def"}, {"member" : "monix.connect.mongodb.MongoDb#<init>", "error" : "unsupported entity"}, {"label" : "listDatabases", "tail" : "(client: MongoClient): Observable[String]", "member" : "monix.connect.mongodb.internal.MongoDbImpl.listDatabases", "link" : "monix\/connect\/mongodb\/MongoDb.html#listDatabases(client:com.mongodb.reactivestreams.client.MongoClient):monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "listCollections", "tail" : "(db: MongoDatabase): Observable[String]", "member" : "monix.connect.mongodb.internal.MongoDbImpl.listCollections", "link" : "monix\/connect\/mongodb\/MongoDb.html#listCollections(db:com.mongodb.reactivestreams.client.MongoDatabase):monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "renameCollection", "tail" : "(db: MongoDatabase, oldCollectionName: String, newCollectionName: String): Task[Boolean]", "member" : "monix.connect.mongodb.internal.MongoDbImpl.renameCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#renameCollection(db:com.mongodb.reactivestreams.client.MongoDatabase,oldCollectionName:String,newCollectionName:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "existsDatabase", "tail" : "(client: MongoClient, dbName: String): Task[Boolean]", "member" : "monix.connect.mongodb.internal.MongoDbImpl.existsDatabase", "link" : "monix\/connect\/mongodb\/MongoDb.html#existsDatabase(client:com.mongodb.reactivestreams.client.MongoClient,dbName:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "existsCollection", "tail" : "(db: MongoDatabase, collectionName: String): Task[Boolean]", "member" : "monix.connect.mongodb.internal.MongoDbImpl.existsCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#existsCollection(db:com.mongodb.reactivestreams.client.MongoDatabase,collectionName:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "dropCollection", "tail" : "(db: MongoDatabase, collectionName: String): Task[Unit]", "member" : "monix.connect.mongodb.internal.MongoDbImpl.dropCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#dropCollection(db:com.mongodb.reactivestreams.client.MongoDatabase,collectionName:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "dropDatabase", "tail" : "(db: MongoDatabase): Task[Unit]", "member" : "monix.connect.mongodb.internal.MongoDbImpl.dropDatabase", "link" : "monix\/connect\/mongodb\/MongoDb.html#dropDatabase(db:com.mongodb.reactivestreams.client.MongoDatabase):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "createCollection", "tail" : "(db: MongoDatabase, collectionName: String): Task[Unit]", "member" : "monix.connect.mongodb.internal.MongoDbImpl.createCollection", "link" : "monix\/connect\/mongodb\/MongoDb.html#createCollection(db:com.mongodb.reactivestreams.client.MongoDatabase,collectionName:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/MongoDb.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/MongoDb.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/MongoDb.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/MongoDb.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/MongoDb.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/MongoDb.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/MongoDb.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoDb.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoDb.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoDb.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/MongoDb.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/MongoDb.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/MongoDb.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/MongoDb.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/MongoDb.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/MongoDb.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/MongoDb.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/MongoDb.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/MongoDb.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "listDatabases", "tail" : "(client: MongoClient): Observable[String]", "member" : "monix.connect.mongodb.MongoDb.listDatabases", "link" : "monix\/connect\/mongodb\/MongoDb$.html#listDatabases(client:com.mongodb.reactivestreams.client.MongoClient):monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "listCollections", "tail" : "(db: MongoDatabase): Observable[String]", "member" : "monix.connect.mongodb.MongoDb.listCollections", "link" : "monix\/connect\/mongodb\/MongoDb$.html#listCollections(db:com.mongodb.reactivestreams.client.MongoDatabase):monix.reactive.Observable[String]", "kind" : "def"}, {"label" : "renameCollection", "tail" : "(db: MongoDatabase, oldCollectionName: String, newCollectionName: String): Task[Boolean]", "member" : "monix.connect.mongodb.MongoDb.renameCollection", "link" : "monix\/connect\/mongodb\/MongoDb$.html#renameCollection(db:com.mongodb.reactivestreams.client.MongoDatabase,oldCollectionName:String,newCollectionName:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "existsDatabase", "tail" : "(client: MongoClient, dbName: String): Task[Boolean]", "member" : "monix.connect.mongodb.MongoDb.existsDatabase", "link" : "monix\/connect\/mongodb\/MongoDb$.html#existsDatabase(client:com.mongodb.reactivestreams.client.MongoClient,dbName:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "existsCollection", "tail" : "(db: MongoDatabase, collectionName: String): Task[Boolean]", "member" : "monix.connect.mongodb.MongoDb.existsCollection", "link" : "monix\/connect\/mongodb\/MongoDb$.html#existsCollection(db:com.mongodb.reactivestreams.client.MongoDatabase,collectionName:String):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "dropCollection", "tail" : "(db: MongoDatabase, collectionName: String): Task[Unit]", "member" : "monix.connect.mongodb.MongoDb.dropCollection", "link" : "monix\/connect\/mongodb\/MongoDb$.html#dropCollection(db:com.mongodb.reactivestreams.client.MongoDatabase,collectionName:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "dropDatabase", "tail" : "(db: MongoDatabase): Task[Unit]", "member" : "monix.connect.mongodb.MongoDb.dropDatabase", "link" : "monix\/connect\/mongodb\/MongoDb$.html#dropDatabase(db:com.mongodb.reactivestreams.client.MongoDatabase):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "createCollection", "tail" : "(db: MongoDatabase, collectionName: String): Task[Unit]", "member" : "monix.connect.mongodb.MongoDb.createCollection", "link" : "monix\/connect\/mongodb\/MongoDb$.html#createCollection(db:com.mongodb.reactivestreams.client.MongoDatabase,collectionName:String):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(client: MongoClient, db: MongoDatabase): MongoDb", "member" : "monix.connect.mongodb.MongoDb.apply", "link" : "monix\/connect\/mongodb\/MongoDb$.html#apply(client:com.mongodb.reactivestreams.client.MongoClient,db:com.mongodb.reactivestreams.client.MongoDatabase):monix.connect.mongodb.MongoDb", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/MongoDb$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/MongoDb$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/MongoDb$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/MongoDb$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/MongoDb$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/MongoDb$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/MongoDb$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoDb$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoDb$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoDb$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/MongoDb$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/MongoDb$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/MongoDb$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/MongoDb$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/MongoDb$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/MongoDb$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/MongoDb$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/MongoDb$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/MongoDb$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/mongodb\/MongoDb.html", "kind" : "object"}, {"name" : "monix.connect.mongodb.MongoOp", "shortDescription" : "Provides an idiomatic api for performing single operations against MongoDb.", "object" : "monix\/connect\/mongodb\/MongoOp$.html", "members_object" : [{"label" : "updateMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson, updateOptions: UpdateOptions, retries: Int, timeout: Option[FiniteDuration], delayAfterFailure: Option[FiniteDuration]): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoOp.updateMany", "link" : "monix\/connect\/mongodb\/MongoOp$.html#updateMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,updateOptions:com.mongodb.client.model.UpdateOptions,retries:Int,timeout:Option[scala.concurrent.duration.FiniteDuration],delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration]):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoOp.updateMany", "link" : "monix\/connect\/mongodb\/MongoOp$.html#updateMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson, updateOptions: UpdateOptions, retries: Int, timeout: Option[FiniteDuration], delayAfterFailure: Option[FiniteDuration]): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoOp.updateOne", "link" : "monix\/connect\/mongodb\/MongoOp$.html#updateOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,updateOptions:com.mongodb.client.model.UpdateOptions,retries:Int,timeout:Option[scala.concurrent.duration.FiniteDuration],delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration]):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoOp.updateOne", "link" : "monix\/connect\/mongodb\/MongoOp$.html#updateOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc, replaceOptions: ReplaceOptions, retries: Int, timeout: Option[FiniteDuration], delayAfterFailure: Option[FiniteDuration]): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoOp.replaceOne", "link" : "monix\/connect\/mongodb\/MongoOp$.html#replaceOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc,replaceOptions:com.mongodb.client.model.ReplaceOptions,retries:Int,timeout:Option[scala.concurrent.duration.FiniteDuration],delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration]):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoOp.replaceOne", "link" : "monix\/connect\/mongodb\/MongoOp$.html#replaceOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(collection: MongoCollection[Doc], docs: Seq[Doc], insertManyOptions: InsertManyOptions, retries: Int, timeout: Option[FiniteDuration], delayAfterFailure: Option[FiniteDuration]): Task[InsertManyResult]", "member" : "monix.connect.mongodb.MongoOp.insertMany", "link" : "monix\/connect\/mongodb\/MongoOp$.html#insertMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],docs:Seq[Doc],insertManyOptions:com.mongodb.client.model.InsertManyOptions,retries:Int,timeout:Option[scala.concurrent.duration.FiniteDuration],delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration]):monix.eval.Task[monix.connect.mongodb.domain.InsertManyResult]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(collection: MongoCollection[Doc], docs: Seq[Doc]): Task[InsertManyResult]", "member" : "monix.connect.mongodb.MongoOp.insertMany", "link" : "monix\/connect\/mongodb\/MongoOp$.html#insertMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],docs:Seq[Doc]):monix.eval.Task[monix.connect.mongodb.domain.InsertManyResult]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(collection: MongoCollection[Doc], document: Doc, insertOneOptions: InsertOneOptions, retries: Int, timeout: Option[FiniteDuration], delayAfterFailure: Option[FiniteDuration]): Task[InsertOneResult]", "member" : "monix.connect.mongodb.MongoOp.insertOne", "link" : "monix\/connect\/mongodb\/MongoOp$.html#insertOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],document:Doc,insertOneOptions:com.mongodb.client.model.InsertOneOptions,retries:Int,timeout:Option[scala.concurrent.duration.FiniteDuration],delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration]):monix.eval.Task[monix.connect.mongodb.domain.InsertOneResult]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(collection: MongoCollection[Doc], document: Doc): Task[InsertOneResult]", "member" : "monix.connect.mongodb.MongoOp.insertOne", "link" : "monix\/connect\/mongodb\/MongoOp$.html#insertOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],document:Doc):monix.eval.Task[monix.connect.mongodb.domain.InsertOneResult]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson, deleteOptions: DeleteOptions, retries: Int, timeout: Option[FiniteDuration], delayAfterFailure: Option[FiniteDuration]): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoOp.deleteMany", "link" : "monix\/connect\/mongodb\/MongoOp$.html#deleteMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,deleteOptions:com.mongodb.client.model.DeleteOptions,retries:Int,timeout:Option[scala.concurrent.duration.FiniteDuration],delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration]):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoOp.deleteMany", "link" : "monix\/connect\/mongodb\/MongoOp$.html#deleteMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, deleteOptions: DeleteOptions, retries: Int, timeout: Option[FiniteDuration], delayAfterFailure: Option[FiniteDuration]): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoOp.deleteOne", "link" : "monix\/connect\/mongodb\/MongoOp$.html#deleteOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,deleteOptions:com.mongodb.client.model.DeleteOptions,retries:Int,timeout:Option[scala.concurrent.duration.FiniteDuration],delayAfterFailure:Option[scala.concurrent.duration.FiniteDuration]):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoOp.deleteOne", "link" : "monix\/connect\/mongodb\/MongoOp$.html#deleteOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/MongoOp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/MongoOp$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/MongoOp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/MongoOp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/MongoOp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/MongoOp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/MongoOp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoOp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoOp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoOp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/MongoOp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/MongoOp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/MongoOp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/MongoOp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/MongoOp$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/MongoOp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/MongoOp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/MongoOp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/MongoOp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.mongodb.MongoSingle", "shortDescription" : "Provides an idiomatic api for performing single operations against MongoDb.", "object" : "monix\/connect\/mongodb\/MongoSingle$.html", "members_class" : [{"label" : "updateMany", "tail" : "(filter: Bson, update: Bson, updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.updateMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#updateMany(filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateMany", "tail" : "(filter: Bson, update: Bson): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.updateMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#updateMany(filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(filter: Bson, update: Bson, updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.updateOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#updateOne(filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(filter: Bson, update: Bson): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.updateOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#updateOne(filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(filter: Bson, replacement: Doc, replaceOptions: ReplaceOptions, retryStrategy: RetryStrategy): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.replaceOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#replaceOne(filter:org.bson.conversions.Bson,replacement:Doc,replaceOptions:com.mongodb.client.model.ReplaceOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(filter: Bson, replacement: Doc): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.replaceOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#replaceOne(filter:org.bson.conversions.Bson,replacement:Doc):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(docs: Seq[Doc], insertManyOptions: InsertManyOptions, retryStrategy: RetryStrategy): Task[InsertManyResult]", "member" : "monix.connect.mongodb.MongoSingle.insertMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#insertMany(docs:Seq[Doc],insertManyOptions:com.mongodb.client.model.InsertManyOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.InsertManyResult]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(docs: Seq[Doc]): Task[InsertManyResult]", "member" : "monix.connect.mongodb.MongoSingle.insertMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#insertMany(docs:Seq[Doc]):monix.eval.Task[monix.connect.mongodb.domain.InsertManyResult]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(document: Doc, insertOneOptions: InsertOneOptions, retryStrategy: RetryStrategy): Task[InsertOneResult]", "member" : "monix.connect.mongodb.MongoSingle.insertOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#insertOne(document:Doc,insertOneOptions:com.mongodb.client.model.InsertOneOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.InsertOneResult]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(document: Doc): Task[InsertOneResult]", "member" : "monix.connect.mongodb.MongoSingle.insertOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#insertOne(document:Doc):monix.eval.Task[monix.connect.mongodb.domain.InsertOneResult]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(filter: Bson, deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoSingle.deleteMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#deleteMany(filter:org.bson.conversions.Bson,deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(filter: Bson): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoSingle.deleteMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#deleteMany(filter:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(filter: Bson, deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoSingle.deleteOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#deleteOne(filter:org.bson.conversions.Bson,deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(filter: Bson): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoSingle.deleteOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#deleteOne(filter:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"member" : "monix.connect.mongodb.MongoSingle#<init>", "error" : "unsupported entity"}, {"label" : "updateMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson, updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Task[UpdateResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.updateMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#updateMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson): Task[UpdateResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.updateMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#updateMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson, updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Task[UpdateResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.updateOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#updateOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson): Task[UpdateResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.updateOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#updateOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc, replaceOptions: ReplaceOptions, retryStrategy: RetryStrategy): Task[UpdateResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.replaceOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#replaceOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc,replaceOptions:com.mongodb.client.model.ReplaceOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc): Task[UpdateResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.replaceOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#replaceOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(collection: MongoCollection[Doc], docs: Seq[Doc], insertManyOptions: InsertManyOptions, retryStrategy: RetryStrategy): Task[InsertManyResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.insertMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#insertMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],docs:Seq[Doc],insertManyOptions:com.mongodb.client.model.InsertManyOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.InsertManyResult]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(collection: MongoCollection[Doc], docs: Seq[Doc]): Task[InsertManyResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.insertMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#insertMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],docs:Seq[Doc]):monix.eval.Task[monix.connect.mongodb.domain.InsertManyResult]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(collection: MongoCollection[Doc], document: Doc, insertOneOptions: InsertOneOptions, retryStrategy: RetryStrategy): Task[InsertOneResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.insertOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#insertOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],document:Doc,insertOneOptions:com.mongodb.client.model.InsertOneOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.InsertOneResult]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(collection: MongoCollection[Doc], document: Doc): Task[InsertOneResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.insertOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#insertOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],document:Doc):monix.eval.Task[monix.connect.mongodb.domain.InsertOneResult]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson, deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Task[DeleteResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.deleteMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#deleteMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[DeleteResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.deleteMany", "link" : "monix\/connect\/mongodb\/MongoSingle.html#deleteMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Task[DeleteResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.deleteOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#deleteOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[DeleteResult]", "member" : "monix.connect.mongodb.internal.MongoSingleImpl.deleteOne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#deleteOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/MongoSingle.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/MongoSingle.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/MongoSingle.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/MongoSingle.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/MongoSingle.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/MongoSingle.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/MongoSingle.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSingle.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSingle.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSingle.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/MongoSingle.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/MongoSingle.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/MongoSingle.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/MongoSingle.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/MongoSingle.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/MongoSingle.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/MongoSingle.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSingle.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSingle.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "updateMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson, updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.updateMany", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#updateMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.updateMany", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#updateMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson, updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.updateOne", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#updateOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.updateOne", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#updateOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc, replaceOptions: ReplaceOptions, retryStrategy: RetryStrategy): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.replaceOne", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#replaceOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc,replaceOptions:com.mongodb.client.model.ReplaceOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc): Task[UpdateResult]", "member" : "monix.connect.mongodb.MongoSingle.replaceOne", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#replaceOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc):monix.eval.Task[monix.connect.mongodb.domain.UpdateResult]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(collection: MongoCollection[Doc], docs: Seq[Doc], insertManyOptions: InsertManyOptions, retryStrategy: RetryStrategy): Task[InsertManyResult]", "member" : "monix.connect.mongodb.MongoSingle.insertMany", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#insertMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],docs:Seq[Doc],insertManyOptions:com.mongodb.client.model.InsertManyOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.InsertManyResult]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(collection: MongoCollection[Doc], docs: Seq[Doc]): Task[InsertManyResult]", "member" : "monix.connect.mongodb.MongoSingle.insertMany", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#insertMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],docs:Seq[Doc]):monix.eval.Task[monix.connect.mongodb.domain.InsertManyResult]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(collection: MongoCollection[Doc], document: Doc, insertOneOptions: InsertOneOptions, retryStrategy: RetryStrategy): Task[InsertOneResult]", "member" : "monix.connect.mongodb.MongoSingle.insertOne", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#insertOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],document:Doc,insertOneOptions:com.mongodb.client.model.InsertOneOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.InsertOneResult]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(collection: MongoCollection[Doc], document: Doc): Task[InsertOneResult]", "member" : "monix.connect.mongodb.MongoSingle.insertOne", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#insertOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],document:Doc):monix.eval.Task[monix.connect.mongodb.domain.InsertOneResult]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson, deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoSingle.deleteMany", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#deleteMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoSingle.deleteMany", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#deleteMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson, deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoSingle.deleteOne", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#deleteOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[DeleteResult]", "member" : "monix.connect.mongodb.MongoSingle.deleteOne", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#deleteOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[monix.connect.mongodb.domain.DeleteResult]", "kind" : "def"}, {"label" : "apply", "tail" : "(collection: MongoCollection[Doc]): MongoSingle[Doc]", "member" : "monix.connect.mongodb.MongoSingle.apply", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#apply[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc]):monix.connect.mongodb.MongoSingle[Doc]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/MongoSingle$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSingle$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/mongodb\/MongoSingle.html", "kind" : "object"}, {"name" : "monix.connect.mongodb.MongoSink", "shortDescription" : "Companion object and factory for building a predefined MongoSink.", "object" : "monix\/connect\/mongodb\/MongoSink$.html", "members_class" : [{"label" : "updateMany", "tail" : "(updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Consumer[(Bson, Bson), Unit]", "member" : "monix.connect.mongodb.MongoSink.updateMany", "link" : "monix\/connect\/mongodb\/MongoSink.html#updateMany(updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[(org.bson.conversions.Bson,org.bson.conversions.Bson),Unit]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Consumer[(Bson, Bson), Unit]", "member" : "monix.connect.mongodb.MongoSink.updateOne", "link" : "monix\/connect\/mongodb\/MongoSink.html#updateOne(updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[(org.bson.conversions.Bson,org.bson.conversions.Bson),Unit]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(replaceOptions: ReplaceOptions, retryStrategy: RetryStrategy): Consumer[(Bson, Doc), Unit]", "member" : "monix.connect.mongodb.MongoSink.replaceOne", "link" : "monix\/connect\/mongodb\/MongoSink.html#replaceOne(replaceOptions:com.mongodb.client.model.ReplaceOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[(org.bson.conversions.Bson,Doc),Unit]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(insertManyOptions: InsertManyOptions, retryStrategy: RetryStrategy): Consumer[Seq[Doc], Unit]", "member" : "monix.connect.mongodb.MongoSink.insertMany", "link" : "monix\/connect\/mongodb\/MongoSink.html#insertMany(insertManyOptions:com.mongodb.client.model.InsertManyOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[Seq[Doc],Unit]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(insertOneOptions: InsertOneOptions, retryStrategy: RetryStrategy): Consumer[Doc, Unit]", "member" : "monix.connect.mongodb.MongoSink.insertOne", "link" : "monix\/connect\/mongodb\/MongoSink.html#insertOne(insertOneOptions:com.mongodb.client.model.InsertOneOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[Doc,Unit]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Consumer[Bson, Unit]", "member" : "monix.connect.mongodb.MongoSink.deleteMany", "link" : "monix\/connect\/mongodb\/MongoSink.html#deleteMany(deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[org.bson.conversions.Bson,Unit]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Consumer[Bson, Unit]", "member" : "monix.connect.mongodb.MongoSink.deleteOne", "link" : "monix\/connect\/mongodb\/MongoSink.html#deleteOne(deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[org.bson.conversions.Bson,Unit]", "kind" : "def"}, {"member" : "monix.connect.mongodb.MongoSink#<init>", "error" : "unsupported entity"}, {"label" : "updateMany", "tail" : "(collection: MongoCollection[Doc], updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Consumer[(Bson, Bson), Unit]", "member" : "monix.connect.mongodb.internal.MongoSinkImpl.updateMany", "link" : "monix\/connect\/mongodb\/MongoSink.html#updateMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[(org.bson.conversions.Bson,org.bson.conversions.Bson),Unit]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(collection: MongoCollection[Doc], updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Consumer[(Bson, Bson), Unit]", "member" : "monix.connect.mongodb.internal.MongoSinkImpl.updateOne", "link" : "monix\/connect\/mongodb\/MongoSink.html#updateOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[(org.bson.conversions.Bson,org.bson.conversions.Bson),Unit]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(collection: MongoCollection[Doc], replaceOptions: ReplaceOptions, retryStrategy: RetryStrategy): Consumer[(Bson, Doc), Unit]", "member" : "monix.connect.mongodb.internal.MongoSinkImpl.replaceOne", "link" : "monix\/connect\/mongodb\/MongoSink.html#replaceOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],replaceOptions:com.mongodb.client.model.ReplaceOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[(org.bson.conversions.Bson,Doc),Unit]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(collection: MongoCollection[Doc], insertManyOptions: InsertManyOptions, retryStrategy: RetryStrategy): Consumer[Seq[Doc], Unit]", "member" : "monix.connect.mongodb.internal.MongoSinkImpl.insertMany", "link" : "monix\/connect\/mongodb\/MongoSink.html#insertMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],insertManyOptions:com.mongodb.client.model.InsertManyOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[Seq[Doc],Unit]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(collection: MongoCollection[Doc], insertOneOptions: InsertOneOptions, retryStrategy: RetryStrategy): Consumer[Doc, Unit]", "member" : "monix.connect.mongodb.internal.MongoSinkImpl.insertOne", "link" : "monix\/connect\/mongodb\/MongoSink.html#insertOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],insertOneOptions:com.mongodb.client.model.InsertOneOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[Doc,Unit]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(collection: MongoCollection[Doc], deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Consumer[Bson, Unit]", "member" : "monix.connect.mongodb.internal.MongoSinkImpl.deleteMany", "link" : "monix\/connect\/mongodb\/MongoSink.html#deleteMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[org.bson.conversions.Bson,Unit]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(collection: MongoCollection[Doc], deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Consumer[Bson, Unit]", "member" : "monix.connect.mongodb.internal.MongoSinkImpl.deleteOne", "link" : "monix\/connect\/mongodb\/MongoSink.html#deleteOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[org.bson.conversions.Bson,Unit]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/MongoSink.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/MongoSink.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/MongoSink.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/MongoSink.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/MongoSink.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/MongoSink.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/MongoSink.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSink.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSink.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSink.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/MongoSink.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/MongoSink.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/MongoSink.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/MongoSink.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/MongoSink.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/MongoSink.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/MongoSink.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSink.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSink.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "updateMany", "tail" : "(collection: MongoCollection[Doc], updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Consumer[(Bson, Bson), Unit]", "member" : "monix.connect.mongodb.MongoSink.updateMany", "link" : "monix\/connect\/mongodb\/MongoSink$.html#updateMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[(org.bson.conversions.Bson,org.bson.conversions.Bson),Unit]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(collection: MongoCollection[Doc], updateOptions: UpdateOptions, retryStrategy: RetryStrategy): Consumer[(Bson, Bson), Unit]", "member" : "monix.connect.mongodb.MongoSink.updateOne", "link" : "monix\/connect\/mongodb\/MongoSink$.html#updateOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],updateOptions:com.mongodb.client.model.UpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[(org.bson.conversions.Bson,org.bson.conversions.Bson),Unit]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(collection: MongoCollection[Doc], replaceOptions: ReplaceOptions, retryStrategy: RetryStrategy): Consumer[(Bson, Doc), Unit]", "member" : "monix.connect.mongodb.MongoSink.replaceOne", "link" : "monix\/connect\/mongodb\/MongoSink$.html#replaceOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],replaceOptions:com.mongodb.client.model.ReplaceOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[(org.bson.conversions.Bson,Doc),Unit]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(collection: MongoCollection[Doc], insertManyOptions: InsertManyOptions, retryStrategy: RetryStrategy): Consumer[Seq[Doc], Unit]", "member" : "monix.connect.mongodb.MongoSink.insertMany", "link" : "monix\/connect\/mongodb\/MongoSink$.html#insertMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],insertManyOptions:com.mongodb.client.model.InsertManyOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[Seq[Doc],Unit]", "kind" : "def"}, {"label" : "insertOne", "tail" : "(collection: MongoCollection[Doc], insertOneOptions: InsertOneOptions, retryStrategy: RetryStrategy): Consumer[Doc, Unit]", "member" : "monix.connect.mongodb.MongoSink.insertOne", "link" : "monix\/connect\/mongodb\/MongoSink$.html#insertOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],insertOneOptions:com.mongodb.client.model.InsertOneOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[Doc,Unit]", "kind" : "def"}, {"label" : "deleteMany", "tail" : "(collection: MongoCollection[Doc], deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Consumer[Bson, Unit]", "member" : "monix.connect.mongodb.MongoSink.deleteMany", "link" : "monix\/connect\/mongodb\/MongoSink$.html#deleteMany[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[org.bson.conversions.Bson,Unit]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(collection: MongoCollection[Doc], deleteOptions: DeleteOptions, retryStrategy: RetryStrategy): Consumer[Bson, Unit]", "member" : "monix.connect.mongodb.MongoSink.deleteOne", "link" : "monix\/connect\/mongodb\/MongoSink$.html#deleteOne[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],deleteOptions:com.mongodb.client.model.DeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.reactive.Consumer[org.bson.conversions.Bson,Unit]", "kind" : "def"}, {"label" : "apply", "tail" : "(collection: MongoCollection[Doc]): MongoSink[Doc]", "member" : "monix.connect.mongodb.MongoSink.apply", "link" : "monix\/connect\/mongodb\/MongoSink$.html#apply[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc]):monix.connect.mongodb.MongoSink[Doc]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/MongoSink$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/MongoSink$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/MongoSink$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/MongoSink$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/MongoSink$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/MongoSink$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/MongoSink$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSink$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSink$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSink$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/MongoSink$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/MongoSink$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/MongoSink$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/MongoSink$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/MongoSink$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/MongoSink$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/MongoSink$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSink$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSink$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/mongodb\/MongoSink.html", "kind" : "object"}, {"name" : "monix.connect.mongodb.MongoSource", "shortDescription" : "An object that exposes those MongoDb definitions for fetching datafrom collections by performing different type of read queries availablesuch like find, count, distinct or aggregation.", "object" : "monix\/connect\/mongodb\/MongoSource$.html", "members_class" : [{"label" : "findOneAndUpdate", "tail" : "(filter: Bson, update: Bson, findOneAndUpdateOptions: FindOneAndUpdateOptions, retryStrategy: RetryStrategy): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndUpdate", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndUpdate(filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,findOneAndUpdateOptions:com.mongodb.client.model.FindOneAndUpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndUpdate", "tail" : "(filter: Bson, update: Bson): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndUpdate", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndUpdate(filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndReplace", "tail" : "(filter: Bson, replacement: Doc, findOneAndReplaceOptions: FindOneAndReplaceOptions, retryStrategy: RetryStrategy): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndReplace", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndReplace(filter:org.bson.conversions.Bson,replacement:Doc,findOneAndReplaceOptions:com.mongodb.client.model.FindOneAndReplaceOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndReplace", "tail" : "(filter: Bson, replacement: Doc): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndReplace", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndReplace(filter:org.bson.conversions.Bson,replacement:Doc):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndDelete", "tail" : "(filter: Bson, findOneAndDeleteOptions: FindOneAndDeleteOptions, retryStrategy: RetryStrategy): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndDelete", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndDelete(filter:org.bson.conversions.Bson,findOneAndDeleteOptions:com.mongodb.client.model.FindOneAndDeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndDelete", "tail" : "(filter: Bson): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndDelete", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndDelete(filter:org.bson.conversions.Bson):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "find", "tail" : "(filter: Bson): Observable[Doc]", "member" : "monix.connect.mongodb.MongoSource.find", "link" : "monix\/connect\/mongodb\/MongoSource.html#find(filter:org.bson.conversions.Bson):monix.reactive.Observable[Doc]", "kind" : "def"}, {"label" : "findAll", "tail" : "(): Observable[Doc]", "member" : "monix.connect.mongodb.MongoSource.findAll", "link" : "monix\/connect\/mongodb\/MongoSource.html#findAll:monix.reactive.Observable[Doc]", "kind" : "def"}, {"label" : "count", "tail" : "(filter: Bson, countOptions: CountOptions, retryStrategy: RetryStrategy): Task[Long]", "member" : "monix.connect.mongodb.MongoSource.count", "link" : "monix\/connect\/mongodb\/MongoSource.html#count(filter:org.bson.conversions.Bson,countOptions:com.mongodb.client.model.CountOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "count", "tail" : "(filter: Bson): Task[Long]", "member" : "monix.connect.mongodb.MongoSource.count", "link" : "monix\/connect\/mongodb\/MongoSource.html#count(filter:org.bson.conversions.Bson):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "countAll", "tail" : "(retryStrategy: RetryStrategy): Task[Long]", "member" : "monix.connect.mongodb.MongoSource.countAll", "link" : "monix\/connect\/mongodb\/MongoSource.html#countAll(retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "countAll", "tail" : "(): Task[Long]", "member" : "monix.connect.mongodb.MongoSource.countAll", "link" : "monix\/connect\/mongodb\/MongoSource.html#countAll:monix.eval.Task[Long]", "kind" : "def"}, {"label" : "distinct", "tail" : "(fieldName: String, filter: Bson)(m: Manifest[Doc]): Observable[Doc]", "member" : "monix.connect.mongodb.MongoSource.distinct", "link" : "monix\/connect\/mongodb\/MongoSource.html#distinct(fieldName:String,filter:org.bson.conversions.Bson)(implicitm:Manifest[Doc]):monix.reactive.Observable[Doc]", "kind" : "def"}, {"label" : "distinct", "tail" : "(fieldName: String, clazz: Class[T]): Observable[T]", "member" : "monix.connect.mongodb.MongoSource.distinct", "link" : "monix\/connect\/mongodb\/MongoSource.html#distinct[T](fieldName:String,clazz:Class[T]):monix.reactive.Observable[T]", "kind" : "def"}, {"label" : "aggregate", "tail" : "(pipeline: Seq[Bson]): Observable[Document]", "member" : "monix.connect.mongodb.MongoSource.aggregate", "link" : "monix\/connect\/mongodb\/MongoSource.html#aggregate(pipeline:Seq[org.bson.conversions.Bson]):monix.reactive.Observable[org.bson.Document]", "kind" : "def"}, {"label" : "aggregate", "tail" : "(pipeline: Seq[Bson], clazz: Class[T]): Observable[T]", "member" : "monix.connect.mongodb.MongoSource.aggregate", "link" : "monix\/connect\/mongodb\/MongoSource.html#aggregate[T](pipeline:Seq[org.bson.conversions.Bson],clazz:Class[T]):monix.reactive.Observable[T]", "kind" : "def"}, {"member" : "monix.connect.mongodb.MongoSource#<init>", "error" : "unsupported entity"}, {"label" : "findOneAndUpdate", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson, findOneAndUpdateOptions: FindOneAndUpdateOptions, retryStrategy: RetryStrategy): Task[Option[Doc]]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.findOneAndUpdate", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndUpdate[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,findOneAndUpdateOptions:com.mongodb.client.model.FindOneAndUpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndUpdate", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson): Task[Option[Doc]]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.findOneAndUpdate", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndUpdate[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndReplace", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc, findOneAndReplaceOptions: FindOneAndReplaceOptions, retryStrategy: RetryStrategy): Task[Option[Doc]]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.findOneAndReplace", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndReplace[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc,findOneAndReplaceOptions:com.mongodb.client.model.FindOneAndReplaceOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndReplace", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc): Task[Option[Doc]]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.findOneAndReplace", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndReplace[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndDelete", "tail" : "(collection: MongoCollection[Doc], filter: Bson, findOneAndDeleteOptions: FindOneAndDeleteOptions, retryStrategy: RetryStrategy): Task[Option[Doc]]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.findOneAndDelete", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndDelete[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,findOneAndDeleteOptions:com.mongodb.client.model.FindOneAndDeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndDelete", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[Option[Doc]]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.findOneAndDelete", "link" : "monix\/connect\/mongodb\/MongoSource.html#findOneAndDelete[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "find", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Observable[Doc]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.find", "link" : "monix\/connect\/mongodb\/MongoSource.html#find[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.reactive.Observable[Doc]", "kind" : "def"}, {"label" : "findAll", "tail" : "(collection: MongoCollection[Doc]): Observable[Doc]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.findAll", "link" : "monix\/connect\/mongodb\/MongoSource.html#findAll[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc]):monix.reactive.Observable[Doc]", "kind" : "def"}, {"label" : "count", "tail" : "(collection: MongoCollection[Doc], filter: Bson, countOptions: CountOptions, retryStrategy: RetryStrategy): Task[Long]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.count", "link" : "monix\/connect\/mongodb\/MongoSource.html#count[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,countOptions:com.mongodb.client.model.CountOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "count", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[Long]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.count", "link" : "monix\/connect\/mongodb\/MongoSource.html#count[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "countAll", "tail" : "(collection: MongoCollection[Doc], retryStrategy: RetryStrategy): Task[Long]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.countAll", "link" : "monix\/connect\/mongodb\/MongoSource.html#countAll[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "countAll", "tail" : "(collection: MongoCollection[Doc]): Task[Long]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.countAll", "link" : "monix\/connect\/mongodb\/MongoSource.html#countAll[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "distinct", "tail" : "(collection: MongoCollection[Doc], fieldName: String, filter: Bson)(m: Manifest[Doc]): Observable[Doc]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.distinct", "link" : "monix\/connect\/mongodb\/MongoSource.html#distinct[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],fieldName:String,filter:org.bson.conversions.Bson)(implicitm:Manifest[Doc]):monix.reactive.Observable[Doc]", "kind" : "def"}, {"label" : "distinct", "tail" : "(collection: MongoCollection[Doc], fieldName: String, clazz: Class[T]): Observable[T]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.distinct", "link" : "monix\/connect\/mongodb\/MongoSource.html#distinct[Doc,T](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],fieldName:String,clazz:Class[T]):monix.reactive.Observable[T]", "kind" : "def"}, {"label" : "aggregate", "tail" : "(collection: MongoCollection[Doc], pipeline: Seq[Bson]): Observable[Document]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.aggregate", "link" : "monix\/connect\/mongodb\/MongoSource.html#aggregate[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],pipeline:Seq[org.bson.conversions.Bson]):monix.reactive.Observable[org.bson.Document]", "kind" : "def"}, {"label" : "aggregate", "tail" : "(collection: MongoCollection[A], pipeline: Seq[Bson], clazz: Class[B]): Observable[B]", "member" : "monix.connect.mongodb.internal.MongoSourceImpl.aggregate", "link" : "monix\/connect\/mongodb\/MongoSource.html#aggregate[A,B](collection:com.mongodb.reactivestreams.client.MongoCollection[A],pipeline:Seq[org.bson.conversions.Bson],clazz:Class[B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/MongoSource.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/MongoSource.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/MongoSource.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/MongoSource.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/MongoSource.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/MongoSource.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/MongoSource.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSource.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSource.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSource.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/MongoSource.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/MongoSource.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/MongoSource.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/MongoSource.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/MongoSource.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/MongoSource.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/MongoSource.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSource.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSource.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "findOneAndUpdate", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson, findOneAndUpdateOptions: FindOneAndUpdateOptions, retryStrategy: RetryStrategy): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndUpdate", "link" : "monix\/connect\/mongodb\/MongoSource$.html#findOneAndUpdate[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson,findOneAndUpdateOptions:com.mongodb.client.model.FindOneAndUpdateOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndUpdate", "tail" : "(collection: MongoCollection[Doc], filter: Bson, update: Bson): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndUpdate", "link" : "monix\/connect\/mongodb\/MongoSource$.html#findOneAndUpdate[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,update:org.bson.conversions.Bson):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndReplace", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc, findOneAndReplaceOptions: FindOneAndReplaceOptions, retryStrategy: RetryStrategy): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndReplace", "link" : "monix\/connect\/mongodb\/MongoSource$.html#findOneAndReplace[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc,findOneAndReplaceOptions:com.mongodb.client.model.FindOneAndReplaceOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndReplace", "tail" : "(collection: MongoCollection[Doc], filter: Bson, replacement: Doc): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndReplace", "link" : "monix\/connect\/mongodb\/MongoSource$.html#findOneAndReplace[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,replacement:Doc):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndDelete", "tail" : "(collection: MongoCollection[Doc], filter: Bson, findOneAndDeleteOptions: FindOneAndDeleteOptions, retryStrategy: RetryStrategy): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndDelete", "link" : "monix\/connect\/mongodb\/MongoSource$.html#findOneAndDelete[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,findOneAndDeleteOptions:com.mongodb.client.model.FindOneAndDeleteOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "findOneAndDelete", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[Option[Doc]]", "member" : "monix.connect.mongodb.MongoSource.findOneAndDelete", "link" : "monix\/connect\/mongodb\/MongoSource$.html#findOneAndDelete[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[Option[Doc]]", "kind" : "def"}, {"label" : "find", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Observable[Doc]", "member" : "monix.connect.mongodb.MongoSource.find", "link" : "monix\/connect\/mongodb\/MongoSource$.html#find[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.reactive.Observable[Doc]", "kind" : "def"}, {"label" : "findAll", "tail" : "(collection: MongoCollection[Doc]): Observable[Doc]", "member" : "monix.connect.mongodb.MongoSource.findAll", "link" : "monix\/connect\/mongodb\/MongoSource$.html#findAll[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc]):monix.reactive.Observable[Doc]", "kind" : "def"}, {"label" : "count", "tail" : "(collection: MongoCollection[Doc], filter: Bson, countOptions: CountOptions, retryStrategy: RetryStrategy): Task[Long]", "member" : "monix.connect.mongodb.MongoSource.count", "link" : "monix\/connect\/mongodb\/MongoSource$.html#count[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson,countOptions:com.mongodb.client.model.CountOptions,retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "count", "tail" : "(collection: MongoCollection[Doc], filter: Bson): Task[Long]", "member" : "monix.connect.mongodb.MongoSource.count", "link" : "monix\/connect\/mongodb\/MongoSource$.html#count[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],filter:org.bson.conversions.Bson):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "countAll", "tail" : "(collection: MongoCollection[Doc], retryStrategy: RetryStrategy): Task[Long]", "member" : "monix.connect.mongodb.MongoSource.countAll", "link" : "monix\/connect\/mongodb\/MongoSource$.html#countAll[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],retryStrategy:monix.connect.mongodb.domain.RetryStrategy):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "countAll", "tail" : "(collection: MongoCollection[Doc]): Task[Long]", "member" : "monix.connect.mongodb.MongoSource.countAll", "link" : "monix\/connect\/mongodb\/MongoSource$.html#countAll[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "distinct", "tail" : "(collection: MongoCollection[Doc], fieldName: String, filter: Bson)(m: Manifest[Doc]): Observable[Doc]", "member" : "monix.connect.mongodb.MongoSource.distinct", "link" : "monix\/connect\/mongodb\/MongoSource$.html#distinct[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],fieldName:String,filter:org.bson.conversions.Bson)(implicitm:Manifest[Doc]):monix.reactive.Observable[Doc]", "kind" : "def"}, {"label" : "distinct", "tail" : "(collection: MongoCollection[Doc], fieldName: String, clazz: Class[T]): Observable[T]", "member" : "monix.connect.mongodb.MongoSource.distinct", "link" : "monix\/connect\/mongodb\/MongoSource$.html#distinct[Doc,T](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],fieldName:String,clazz:Class[T]):monix.reactive.Observable[T]", "kind" : "def"}, {"label" : "aggregate", "tail" : "(collection: MongoCollection[Doc], pipeline: Seq[Bson]): Observable[Document]", "member" : "monix.connect.mongodb.MongoSource.aggregate", "link" : "monix\/connect\/mongodb\/MongoSource$.html#aggregate[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc],pipeline:Seq[org.bson.conversions.Bson]):monix.reactive.Observable[org.bson.Document]", "kind" : "def"}, {"label" : "aggregate", "tail" : "(collection: MongoCollection[A], pipeline: Seq[Bson], clazz: Class[B]): Observable[B]", "member" : "monix.connect.mongodb.MongoSource.aggregate", "link" : "monix\/connect\/mongodb\/MongoSource$.html#aggregate[A,B](collection:com.mongodb.reactivestreams.client.MongoCollection[A],pipeline:Seq[org.bson.conversions.Bson],clazz:Class[B]):monix.reactive.Observable[B]", "kind" : "def"}, {"label" : "apply", "tail" : "(collection: MongoCollection[Doc]): MongoSource[Doc]", "member" : "monix.connect.mongodb.MongoSource.apply", "link" : "monix\/connect\/mongodb\/MongoSource$.html#apply[Doc](collection:com.mongodb.reactivestreams.client.MongoCollection[Doc]):monix.connect.mongodb.MongoSource[Doc]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/mongodb\/MongoSource$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/mongodb\/MongoSource$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/mongodb\/MongoSource$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/mongodb\/MongoSource$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/mongodb\/MongoSource$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/mongodb\/MongoSource$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/mongodb\/MongoSource$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSource$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSource$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/mongodb\/MongoSource$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/mongodb\/MongoSource$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/mongodb\/MongoSource$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/mongodb\/MongoSource$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/mongodb\/MongoSource$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/mongodb\/MongoSource$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/mongodb\/MongoSource$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/mongodb\/MongoSource$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSource$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/mongodb\/MongoSource$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/mongodb\/MongoSource.html", "kind" : "object"}], "monix" : [], "monix.connect.dynamodb.domain" : [{"name" : "monix.connect.dynamodb.domain.RetryStrategy", "shortDescription" : "A retry strategy is defined by the amount of retries and backoff delay.", "members_case class" : [{"member" : "monix.connect.dynamodb.domain.RetryStrategy#<init>", "error" : "unsupported entity"}, {"label" : "backoffDelay", "tail" : ": FiniteDuration", "member" : "monix.connect.dynamodb.domain.RetryStrategy.backoffDelay", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#backoffDelay:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "retries", "tail" : ": Int", "member" : "monix.connect.dynamodb.domain.RetryStrategy.retries", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#retries:Int", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/dynamodb\/domain\/package$$RetryStrategy.html", "kind" : "case class"}], "monix.connect.redis" : [{"name" : "monix.connect.redis.Redis", "shortDescription" : "An object that provides an aggregation of all the different Redis Apis.", "object" : "monix\/connect\/redis\/Redis$.html", "members_object" : [{"label" : "flushdbAsync", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.flushdbAsync", "link" : "monix\/connect\/redis\/Redis$.html#flushdbAsync[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "flushallAsync", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.flushallAsync", "link" : "monix\/connect\/redis\/Redis$.html#flushallAsync[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "configResetstat", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.configResetstat", "link" : "monix\/connect\/redis\/Redis$.html#configResetstat[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "configGet", "tail" : "(parameter: String)(connection: StatefulRedisConnection[K, V]): Task[Map[String, String]]", "member" : "monix.connect.redis.RedisServer.configGet", "link" : "monix\/connect\/redis\/Redis$.html#configGet[K,V](parameter:String)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[scala.collection.mutable.Map[String,String]]", "kind" : "def"}, {"label" : "commandCount", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisServer.commandCount", "link" : "monix\/connect\/redis\/Redis$.html#commandCount[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "clientList", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientList", "link" : "monix\/connect\/redis\/Redis$.html#clientList[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientKill", "tail" : "(addr: String)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientKill", "link" : "monix\/connect\/redis\/Redis$.html#clientKill[K,V](addr:String)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientSetname", "tail" : "(name: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientSetname", "link" : "monix\/connect\/redis\/Redis$.html#clientSetname[K,V](name:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientGetname", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientGetname", "link" : "monix\/connect\/redis\/Redis$.html#clientGetname[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "bgsave", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.bgsave", "link" : "monix\/connect\/redis\/Redis$.html#bgsave[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "bgrewriteaof", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.bgrewriteaof", "link" : "monix\/connect\/redis\/Redis$.html#bgrewriteaof[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "strlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.strlen", "link" : "monix\/connect\/redis\/Redis$.html#strlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setrange", "tail" : "(key: K, offset: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.setrange", "link" : "monix\/connect\/redis\/Redis$.html#setrange[K,V](key:K,offset:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setnx", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisString.setnx", "link" : "monix\/connect\/redis\/Redis$.html#setnx[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "psetex", "tail" : "(key: K, milliseconds: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.psetex", "link" : "monix\/connect\/redis\/Redis$.html#psetex[K,V](key:K,milliseconds:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "setex", "tail" : "(key: K, seconds: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.setex", "link" : "monix\/connect\/redis\/Redis$.html#setex[K,V](key:K,seconds:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "setbit", "tail" : "(key: K, offset: Long, value: Int)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.setbit", "link" : "monix\/connect\/redis\/Redis$.html#setbit[K,V](key:K,offset:Long,value:Int)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "set", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.set", "link" : "monix\/connect\/redis\/Redis$.html#set[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "msetnx", "tail" : "(map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisString.msetnx", "link" : "monix\/connect\/redis\/Redis$.html#msetnx[K,V](map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "mset", "tail" : "(map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.mset", "link" : "monix\/connect\/redis\/Redis$.html#mset[K,V](map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "mget", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisString.mget", "link" : "monix\/connect\/redis\/Redis$.html#mget[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "incrbyfloat", "tail" : "(key: K, amount: Double)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisString.incrbyfloat", "link" : "monix\/connect\/redis\/Redis$.html#incrbyfloat[K,V](key:K,amount:Double)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "incrby", "tail" : "(key: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.incrby", "link" : "monix\/connect\/redis\/Redis$.html#incrby[K,V](key:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "incr", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.incr", "link" : "monix\/connect\/redis\/Redis$.html#incr[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "getset", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.getset", "link" : "monix\/connect\/redis\/Redis$.html#getset[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "getrange", "tail" : "(key: K, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.getrange", "link" : "monix\/connect\/redis\/Redis$.html#getrange[K,V](key:K,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "getbit", "tail" : "(key: K, offset: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.getbit", "link" : "monix\/connect\/redis\/Redis$.html#getbit[K,V](key:K,offset:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "get", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.get", "link" : "monix\/connect\/redis\/Redis$.html#get[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "decrby", "tail" : "(key: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.decrby", "link" : "monix\/connect\/redis\/Redis$.html#decrby[K,V](key:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "decr", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.decr", "link" : "monix\/connect\/redis\/Redis$.html#decr[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopXor", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopXor", "link" : "monix\/connect\/redis\/Redis$.html#bitopXor[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopOr", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopOr", "link" : "monix\/connect\/redis\/Redis$.html#bitopOr[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopNot", "tail" : "(destination: K, source: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopNot", "link" : "monix\/connect\/redis\/Redis$.html#bitopNot[K,V](destination:K,source:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopAnd", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopAnd", "link" : "monix\/connect\/redis\/Redis$.html#bitopAnd[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/Redis$.html#bitpos[K,V](key:K,state:Boolean,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean, start: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/Redis$.html#bitpos[K,V](key:K,state:Boolean,start:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/Redis$.html#bitpos[K,V](key:K,state:Boolean)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitcount", "tail" : "(key: K, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitcount", "link" : "monix\/connect\/redis\/Redis$.html#bitcount[K,V](key:K,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitcount", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitcount", "link" : "monix\/connect\/redis\/Redis$.html#bitcount[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "append", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.append", "link" : "monix\/connect\/redis\/Redis$.html#append[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xtrim", "tail" : "(key: K, approximateTrimming: Boolean, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/Redis$.html#xtrim[K,V](key:K,approximateTrimming:Boolean,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xtrim", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/Redis$.html#xtrim[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/Redis$.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/Redis$.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xreadgroup", "tail" : "(consumer: Consumer[K], streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xreadgroup", "link" : "monix\/connect\/redis\/Redis$.html#xreadgroup[K,V](consumer:io.lettuce.core.Consumer[K],streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xread", "tail" : "(streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xread", "link" : "monix\/connect\/redis\/Redis$.html#xread[K,V](streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/Redis$.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/Redis$.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, consumer: Consumer[K], range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/Redis$.html#xpending[K,V](key:K,consumer:io.lettuce.core.Consumer[K],range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/Redis$.html#xpending[K,V](key:K,group:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/Redis$.html#xpending[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xlen", "link" : "monix\/connect\/redis\/Redis$.html#xlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xgroupSetid", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupSetid", "link" : "monix\/connect\/redis\/Redis$.html#xgroupSetid[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xgroupDestroy", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisStream.xgroupDestroy", "link" : "monix\/connect\/redis\/Redis$.html#xgroupDestroy[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "xgroupDelconsumer", "tail" : "(key: K, consumer: Consumer[K])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xgroupDelconsumer", "link" : "monix\/connect\/redis\/Redis$.html#xgroupDelconsumer[K,V](key:K,consumer:io.lettuce.core.Consumer[K])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xgroupCreate", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupCreate", "link" : "monix\/connect\/redis\/Redis$.html#xgroupCreate[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xdel", "tail" : "(key: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xdel", "link" : "monix\/connect\/redis\/Redis$.html#xdel[K,V](key:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xclaim", "tail" : "(key: K, consumer: Consumer[K], minIdleTime: Long, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xclaim", "link" : "monix\/connect\/redis\/Redis$.html#xclaim[K,V](key:K,consumer:io.lettuce.core.Consumer[K],minIdleTime:Long,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xadd", "tail" : "(key: K, body: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xadd", "link" : "monix\/connect\/redis\/Redis$.html#xadd[K,V](key:K,body:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xack", "tail" : "(key: K, group: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xack", "link" : "monix\/connect\/redis\/Redis$.html#xack[K,V](key:K,group:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zunionstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zunionstore", "link" : "monix\/connect\/redis\/Redis$.html#zunionstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zscore", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zscore", "link" : "monix\/connect\/redis\/Redis$.html#zscore[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValueScanCursor[V]]", "member" : "monix.connect.redis.RedisSortedSet.zscan", "link" : "monix\/connect\/redis\/Redis$.html#zscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValueScanCursor[V]]", "kind" : "def"}, {"label" : "zrevrank", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrevrank", "link" : "monix\/connect\/redis\/Redis$.html#zrevrank[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrevrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscoreWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscoreWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrangebyscore", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebylex", "tail" : "(key: K, range: Range[_ <: V], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangeWithScores", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangeWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrevrangeWithScores[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrange", "link" : "monix\/connect\/redis\/Redis$.html#zrevrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zremrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zremrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zremrangebyrank", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebyrank", "link" : "monix\/connect\/redis\/Redis$.html#zremrangebyrank[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zremrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zremrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrem", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrem", "link" : "monix\/connect\/redis\/Redis$.html#zrem[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrank", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrank", "link" : "monix\/connect\/redis\/Redis$.html#zrank[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscoreWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscoreWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrangebyscore", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscore", "link" : "monix\/connect\/redis\/Redis$.html#zrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebylex", "tail" : "(key: K, range: Range[_ <: V], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebylex", "link" : "monix\/connect\/redis\/Redis$.html#zrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangeWithScores", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangeWithScores", "link" : "monix\/connect\/redis\/Redis$.html#zrangeWithScores[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrange", "link" : "monix\/connect\/redis\/Redis$.html#zrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zpopmax", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmax", "link" : "monix\/connect\/redis\/Redis$.html#zpopmax[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmax", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmax", "link" : "monix\/connect\/redis\/Redis$.html#zpopmax[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmin", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmin", "link" : "monix\/connect\/redis\/Redis$.html#zpopmin[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmin", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmin", "link" : "monix\/connect\/redis\/Redis$.html#zpopmin[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zlexcount", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zlexcount", "link" : "monix\/connect\/redis\/Redis$.html#zlexcount[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zinterstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zinterstore", "link" : "monix\/connect\/redis\/Redis$.html#zinterstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zincrby", "tail" : "(key: K, amount: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zincrby", "link" : "monix\/connect\/redis\/Redis$.html#zincrby[K,V](key:K,amount:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zcount", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zcount", "link" : "monix\/connect\/redis\/Redis$.html#zcount[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zcard", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zcard", "link" : "monix\/connect\/redis\/Redis$.html#zcard[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zaddincr", "tail" : "(key: K, score: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zaddincr", "link" : "monix\/connect\/redis\/Redis$.html#zaddincr[K,V](key:K,score:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zadd", "tail" : "(key: K, scoredValues: ScoredValue[V]*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zadd", "link" : "monix\/connect\/redis\/Redis$.html#zadd[K,V](key:K,scoredValues:io.lettuce.core.ScoredValue[V]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zadd", "tail" : "(key: K, score: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zadd", "link" : "monix\/connect\/redis\/Redis$.html#zadd[K,V](key:K,score:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bzpopmax", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, ScoredValue[V]]]", "member" : "monix.connect.redis.RedisSortedSet.bzpopmax", "link" : "monix\/connect\/redis\/Redis$.html#bzpopmax[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,io.lettuce.core.ScoredValue[V]]]", "kind" : "def"}, {"label" : "bzpopmin", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, ScoredValue[V]]]", "member" : "monix.connect.redis.RedisSortedSet.bzpopmin", "link" : "monix\/connect\/redis\/Redis$.html#bzpopmin[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,io.lettuce.core.ScoredValue[V]]]", "kind" : "def"}, {"label" : "sscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ValueScanCursor[V]]", "member" : "monix.connect.redis.RedisSet.sscan", "link" : "monix\/connect\/redis\/Redis$.html#sscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ValueScanCursor[V]]", "kind" : "def"}, {"label" : "sunionstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sunionstore", "link" : "monix\/connect\/redis\/Redis$.html#sunionstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sunion", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sunion", "link" : "monix\/connect\/redis\/Redis$.html#sunion[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "srem", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.srem", "link" : "monix\/connect\/redis\/Redis$.html#srem[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "srandmember", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.srandmember", "link" : "monix\/connect\/redis\/Redis$.html#srandmember[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "srandmember", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisSet.srandmember", "link" : "monix\/connect\/redis\/Redis$.html#srandmember[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "spop", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.spop", "link" : "monix\/connect\/redis\/Redis$.html#spop[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "spop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisSet.spop", "link" : "monix\/connect\/redis\/Redis$.html#spop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "smembers", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.smembers", "link" : "monix\/connect\/redis\/Redis$.html#smembers[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "smove", "tail" : "(source: K, destination: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisSet.smove", "link" : "monix\/connect\/redis\/Redis$.html#smove[K,V](source:K,destination:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sismember", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisSet.sismember", "link" : "monix\/connect\/redis\/Redis$.html#sismember[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sinterstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sinterstore", "link" : "monix\/connect\/redis\/Redis$.html#sinterstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sinter", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sinter", "link" : "monix\/connect\/redis\/Redis$.html#sinter[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sdiffstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sdiffstore", "link" : "monix\/connect\/redis\/Redis$.html#sdiffstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sdiff", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sdiff", "link" : "monix\/connect\/redis\/Redis$.html#sdiff[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "scard", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.scard", "link" : "monix\/connect\/redis\/Redis$.html#scard[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sadd", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sadd", "link" : "monix\/connect\/redis\/Redis$.html#sadd[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "waitForReplication", "tail" : "(replicas: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.waitForReplication", "link" : "monix\/connect\/redis\/Redis$.html#waitForReplication[K,V](replicas:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "quit", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.quit", "link" : "monix\/connect\/redis\/Redis$.html#quit[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readWrite", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readWrite", "link" : "monix\/connect\/redis\/Redis$.html#readWrite[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readOnly", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readOnly", "link" : "monix\/connect\/redis\/Redis$.html#readOnly[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ping", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.ping", "link" : "monix\/connect\/redis\/Redis$.html#ping[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "role", "tail" : "()(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisPubSub.role", "link" : "monix\/connect\/redis\/Redis$.html#role[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "echo", "tail" : "(msg: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisPubSub.echo", "link" : "monix\/connect\/redis\/Redis$.html#echo[K,V](msg:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "pubsubNumpat", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumpat", "link" : "monix\/connect\/redis\/Redis$.html#pubsubNumpat[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pubsubNumsub", "tail" : "(channels: K*)(connection: StatefulRedisConnection[K, V]): Task[Map[K, Long]]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumsub", "link" : "monix\/connect\/redis\/Redis$.html#pubsubNumsub[K,V](channels:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Map[K,Long]]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(channel: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/Redis$.html#pubsubChannels[K,V](channel:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/Redis$.html#pubsubChannels[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "publish", "tail" : "(channel: K, message: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.publish", "link" : "monix\/connect\/redis\/Redis$.html#publish[K,V](channel:K,message:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpushx", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.rpushx", "link" : "monix\/connect\/redis\/Redis$.html#rpushx[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpush", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.rpush", "link" : "monix\/connect\/redis\/Redis$.html#rpush[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpoplpush", "tail" : "(source: K, destination: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.rpoplpush", "link" : "monix\/connect\/redis\/Redis$.html#rpoplpush[K,V](source:K,destination:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "rpop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.rpop", "link" : "monix\/connect\/redis\/Redis$.html#rpop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "ltrim", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisList.ltrim", "link" : "monix\/connect\/redis\/Redis$.html#ltrim[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "lset", "tail" : "(key: K, index: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisList.lset", "link" : "monix\/connect\/redis\/Redis$.html#lset[K,V](key:K,index:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "lrem", "tail" : "(key: K, count: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lrem", "link" : "monix\/connect\/redis\/Redis$.html#lrem[K,V](key:K,count:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisList.lrange", "link" : "monix\/connect\/redis\/Redis$.html#lrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "lpushx", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lpushx", "link" : "monix\/connect\/redis\/Redis$.html#lpushx[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lpush", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lpush", "link" : "monix\/connect\/redis\/Redis$.html#lpush[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lpop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.lpop", "link" : "monix\/connect\/redis\/Redis$.html#lpop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "llen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.llen", "link" : "monix\/connect\/redis\/Redis$.html#llen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "linsert", "tail" : "(key: K, before: Boolean, pivot: V, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.linsert", "link" : "monix\/connect\/redis\/Redis$.html#linsert[K,V](key:K,before:Boolean,pivot:V,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lindex", "tail" : "(key: K, index: Long)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.lindex", "link" : "monix\/connect\/redis\/Redis$.html#lindex[K,V](key:K,index:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "brpoplpush", "tail" : "(timeout: Long, source: K, destination: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.brpoplpush", "link" : "monix\/connect\/redis\/Redis$.html#brpoplpush[K,V](timeout:Long,source:K,destination:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "brpop", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisList.brpop", "link" : "monix\/connect\/redis\/Redis$.html#brpop[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "blpop", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisList.blpop", "link" : "monix\/connect\/redis\/Redis$.html#blpop[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "hvals", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisHash.hvals", "link" : "monix\/connect\/redis\/Redis$.html#hvals[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "hstrlen", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hstrlen", "link" : "monix\/connect\/redis\/Redis$.html#hstrlen[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hsetnx", "tail" : "(key: K, field: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hsetnx", "link" : "monix\/connect\/redis\/Redis$.html#hsetnx[K,V](key:K,field:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hset", "tail" : "(key: K, field: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hset", "link" : "monix\/connect\/redis\/Redis$.html#hset[K,V](key:K,field:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hscan", "tail" : "(key: K, scanCursor: ScanCursor)(connection: StatefulRedisConnection[K, V]): Task[MapScanCursor[K, V]]", "member" : "monix.connect.redis.RedisHash.hscan", "link" : "monix\/connect\/redis\/Redis$.html#hscan[K,V](key:K,scanCursor:io.lettuce.core.ScanCursor)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.MapScanCursor[K,V]]", "kind" : "def"}, {"label" : "hscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[MapScanCursor[K, V]]", "member" : "monix.connect.redis.RedisHash.hscan", "link" : "monix\/connect\/redis\/Redis$.html#hscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.MapScanCursor[K,V]]", "kind" : "def"}, {"label" : "hmset", "tail" : "(key: K, map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisHash.hmset", "link" : "monix\/connect\/redis\/Redis$.html#hmset[K,V](key:K,map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "hmget", "tail" : "(key: K, fields: K*)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisHash.hmget", "link" : "monix\/connect\/redis\/Redis$.html#hmget[K,V](key:K,fields:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "hlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hlen", "link" : "monix\/connect\/redis\/Redis$.html#hlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hkeys", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisHash.hkeys", "link" : "monix\/connect\/redis\/Redis$.html#hkeys[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "hgetall", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisHash.hgetall", "link" : "monix\/connect\/redis\/Redis$.html#hgetall[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "hincrbyfloat", "tail" : "(key: K, field: K, amount: Double)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisHash.hincrbyfloat", "link" : "monix\/connect\/redis\/Redis$.html#hincrbyfloat[K,V](key:K,field:K,amount:Double)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "hincrby", "tail" : "(key: K, field: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hincrby", "link" : "monix\/connect\/redis\/Redis$.html#hincrby[K,V](key:K,field:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hget", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisHash.hget", "link" : "monix\/connect\/redis\/Redis$.html#hget[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "hexists", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hexists", "link" : "monix\/connect\/redis\/Redis$.html#hexists[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hdel", "tail" : "(key: K, fields: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hdel", "link" : "monix\/connect\/redis\/Redis$.html#hdel[K,V](key:K,fields:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "scan", "tail" : "(scanCursor: ScanCursor)(connection: StatefulRedisConnection[K, V]): Task[KeyScanCursor[K]]", "member" : "monix.connect.redis.RedisKey.scan", "link" : "monix\/connect\/redis\/Redis$.html#scan[K,V](scanCursor:io.lettuce.core.ScanCursor)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyScanCursor[K]]", "kind" : "def"}, {"label" : "scan", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[KeyScanCursor[K]]", "member" : "monix.connect.redis.RedisKey.scan", "link" : "monix\/connect\/redis\/Redis$.html#scan[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyScanCursor[K]]", "kind" : "def"}, {"label" : "type", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.type", "link" : "monix\/connect\/redis\/Redis$.html#type[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ttl", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.ttl", "link" : "monix\/connect\/redis\/Redis$.html#ttl[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "touch", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.touch", "link" : "monix\/connect\/redis\/Redis$.html#touch[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sort", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisKey.sort", "link" : "monix\/connect\/redis\/Redis$.html#sort[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "restore", "tail" : "(key: K, ttl: Long, value: Array[Byte])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.restore", "link" : "monix\/connect\/redis\/Redis$.html#restore[K,V](key:K,ttl:Long,value:Array[Byte])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "renamenx", "tail" : "(key: K, newKey: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.renamenx", "link" : "monix\/connect\/redis\/Redis$.html#renamenx[K,V](key:K,newKey:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "rename", "tail" : "(key: K, newKey: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.rename", "link" : "monix\/connect\/redis\/Redis$.html#rename[K,V](key:K,newKey:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "randomkey", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[K]", "member" : "monix.connect.redis.RedisKey.randomkey", "link" : "monix\/connect\/redis\/Redis$.html#randomkey[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[K]", "kind" : "def"}, {"label" : "pttl", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.pttl", "link" : "monix\/connect\/redis\/Redis$.html#pttl[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pexpireat", "tail" : "(key: K, timestamp: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpireat", "link" : "monix\/connect\/redis\/Redis$.html#pexpireat[K,V](key:K,timestamp:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "pexpireat", "tail" : "(key: K, timestamp: Date)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpireat", "link" : "monix\/connect\/redis\/Redis$.html#pexpireat[K,V](key:K,timestamp:java.util.Date)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "pexpire", "tail" : "(key: K, milliseconds: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpire", "link" : "monix\/connect\/redis\/Redis$.html#pexpire[K,V](key:K,milliseconds:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "persist", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.persist", "link" : "monix\/connect\/redis\/Redis$.html#persist[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "objectRefcount", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.objectRefcount", "link" : "monix\/connect\/redis\/Redis$.html#objectRefcount[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "objectIdletime", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.objectIdletime", "link" : "monix\/connect\/redis\/Redis$.html#objectIdletime[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "objectEncoding", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.objectEncoding", "link" : "monix\/connect\/redis\/Redis$.html#objectEncoding[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "move", "tail" : "(key: K, db: Int)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.move", "link" : "monix\/connect\/redis\/Redis$.html#move[K,V](key:K,db:Int)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "migrate", "tail" : "(host: String, port: Int, key: K, db: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.migrate", "link" : "monix\/connect\/redis\/Redis$.html#migrate[K,V](host:String,port:Int,key:K,db:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "keys", "tail" : "(pattern: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisKey.keys", "link" : "monix\/connect\/redis\/Redis$.html#keys[K,V](pattern:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "expireat", "tail" : "(key: K, timestamp: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expireat", "link" : "monix\/connect\/redis\/Redis$.html#expireat[K,V](key:K,timestamp:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "expireat", "tail" : "(key: K, timestamp: Date)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expireat", "link" : "monix\/connect\/redis\/Redis$.html#expireat[K,V](key:K,timestamp:java.util.Date)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "expire", "tail" : "(key: K, seconds: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expire", "link" : "monix\/connect\/redis\/Redis$.html#expire[K,V](key:K,seconds:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "exists", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.exists", "link" : "monix\/connect\/redis\/Redis$.html#exists[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "dump", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Array[Byte]]", "member" : "monix.connect.redis.RedisKey.dump", "link" : "monix\/connect\/redis\/Redis$.html#dump[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "unlink", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.unlink", "link" : "monix\/connect\/redis\/Redis$.html#unlink[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "del", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.del", "link" : "monix\/connect\/redis\/Redis$.html#del[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/Redis$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/Redis$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/Redis$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/Redis$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/Redis$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/Redis$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/Redis$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/Redis$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/Redis$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/Redis$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/Redis$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/Redis$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/Redis$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/Redis$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/Redis$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/Redis$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/Redis$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/Redis$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/Redis$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisHash", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisHash$.html", "members_object" : [{"label" : "hvals", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisHash.hvals", "link" : "monix\/connect\/redis\/RedisHash$.html#hvals[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "hstrlen", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hstrlen", "link" : "monix\/connect\/redis\/RedisHash$.html#hstrlen[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hsetnx", "tail" : "(key: K, field: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hsetnx", "link" : "monix\/connect\/redis\/RedisHash$.html#hsetnx[K,V](key:K,field:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hset", "tail" : "(key: K, field: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hset", "link" : "monix\/connect\/redis\/RedisHash$.html#hset[K,V](key:K,field:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hscan", "tail" : "(key: K, scanCursor: ScanCursor)(connection: StatefulRedisConnection[K, V]): Task[MapScanCursor[K, V]]", "member" : "monix.connect.redis.RedisHash.hscan", "link" : "monix\/connect\/redis\/RedisHash$.html#hscan[K,V](key:K,scanCursor:io.lettuce.core.ScanCursor)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.MapScanCursor[K,V]]", "kind" : "def"}, {"label" : "hscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[MapScanCursor[K, V]]", "member" : "monix.connect.redis.RedisHash.hscan", "link" : "monix\/connect\/redis\/RedisHash$.html#hscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.MapScanCursor[K,V]]", "kind" : "def"}, {"label" : "hmset", "tail" : "(key: K, map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisHash.hmset", "link" : "monix\/connect\/redis\/RedisHash$.html#hmset[K,V](key:K,map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "hmget", "tail" : "(key: K, fields: K*)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisHash.hmget", "link" : "monix\/connect\/redis\/RedisHash$.html#hmget[K,V](key:K,fields:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "hlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hlen", "link" : "monix\/connect\/redis\/RedisHash$.html#hlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hkeys", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisHash.hkeys", "link" : "monix\/connect\/redis\/RedisHash$.html#hkeys[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "hgetall", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisHash.hgetall", "link" : "monix\/connect\/redis\/RedisHash$.html#hgetall[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "hincrbyfloat", "tail" : "(key: K, field: K, amount: Double)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisHash.hincrbyfloat", "link" : "monix\/connect\/redis\/RedisHash$.html#hincrbyfloat[K,V](key:K,field:K,amount:Double)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "hincrby", "tail" : "(key: K, field: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hincrby", "link" : "monix\/connect\/redis\/RedisHash$.html#hincrby[K,V](key:K,field:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "hget", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisHash.hget", "link" : "monix\/connect\/redis\/RedisHash$.html#hget[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "hexists", "tail" : "(key: K, field: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisHash.hexists", "link" : "monix\/connect\/redis\/RedisHash$.html#hexists[K,V](key:K,field:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "hdel", "tail" : "(key: K, fields: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisHash.hdel", "link" : "monix\/connect\/redis\/RedisHash$.html#hdel[K,V](key:K,fields:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisHash$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisHash$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisHash$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisHash$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisHash$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisHash$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisHash$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisHash$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisHash$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisHash$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisHash$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisHash$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisHash$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisHash$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisHash$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisHash$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisHash$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisHash$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisHash$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisKey", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisKey$.html", "members_object" : [{"label" : "scan", "tail" : "(scanCursor: ScanCursor)(connection: StatefulRedisConnection[K, V]): Task[KeyScanCursor[K]]", "member" : "monix.connect.redis.RedisKey.scan", "link" : "monix\/connect\/redis\/RedisKey$.html#scan[K,V](scanCursor:io.lettuce.core.ScanCursor)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyScanCursor[K]]", "kind" : "def"}, {"label" : "scan", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[KeyScanCursor[K]]", "member" : "monix.connect.redis.RedisKey.scan", "link" : "monix\/connect\/redis\/RedisKey$.html#scan[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyScanCursor[K]]", "kind" : "def"}, {"label" : "type", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.type", "link" : "monix\/connect\/redis\/RedisKey$.html#type[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ttl", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.ttl", "link" : "monix\/connect\/redis\/RedisKey$.html#ttl[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "touch", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.touch", "link" : "monix\/connect\/redis\/RedisKey$.html#touch[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sort", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisKey.sort", "link" : "monix\/connect\/redis\/RedisKey$.html#sort[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "restore", "tail" : "(key: K, ttl: Long, value: Array[Byte])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.restore", "link" : "monix\/connect\/redis\/RedisKey$.html#restore[K,V](key:K,ttl:Long,value:Array[Byte])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "renamenx", "tail" : "(key: K, newKey: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.renamenx", "link" : "monix\/connect\/redis\/RedisKey$.html#renamenx[K,V](key:K,newKey:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "rename", "tail" : "(key: K, newKey: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.rename", "link" : "monix\/connect\/redis\/RedisKey$.html#rename[K,V](key:K,newKey:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "randomkey", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[K]", "member" : "monix.connect.redis.RedisKey.randomkey", "link" : "monix\/connect\/redis\/RedisKey$.html#randomkey[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[K]", "kind" : "def"}, {"label" : "pttl", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.pttl", "link" : "monix\/connect\/redis\/RedisKey$.html#pttl[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pexpireat", "tail" : "(key: K, timestamp: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpireat", "link" : "monix\/connect\/redis\/RedisKey$.html#pexpireat[K,V](key:K,timestamp:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "pexpireat", "tail" : "(key: K, timestamp: Date)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpireat", "link" : "monix\/connect\/redis\/RedisKey$.html#pexpireat[K,V](key:K,timestamp:java.util.Date)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "pexpire", "tail" : "(key: K, milliseconds: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.pexpire", "link" : "monix\/connect\/redis\/RedisKey$.html#pexpire[K,V](key:K,milliseconds:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "persist", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.persist", "link" : "monix\/connect\/redis\/RedisKey$.html#persist[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "objectRefcount", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.objectRefcount", "link" : "monix\/connect\/redis\/RedisKey$.html#objectRefcount[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "objectIdletime", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.objectIdletime", "link" : "monix\/connect\/redis\/RedisKey$.html#objectIdletime[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "objectEncoding", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.objectEncoding", "link" : "monix\/connect\/redis\/RedisKey$.html#objectEncoding[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "move", "tail" : "(key: K, db: Int)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.move", "link" : "monix\/connect\/redis\/RedisKey$.html#move[K,V](key:K,db:Int)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "migrate", "tail" : "(host: String, port: Int, key: K, db: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisKey.migrate", "link" : "monix\/connect\/redis\/RedisKey$.html#migrate[K,V](host:String,port:Int,key:K,db:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "keys", "tail" : "(pattern: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisKey.keys", "link" : "monix\/connect\/redis\/RedisKey$.html#keys[K,V](pattern:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "expireat", "tail" : "(key: K, timestamp: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expireat", "link" : "monix\/connect\/redis\/RedisKey$.html#expireat[K,V](key:K,timestamp:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "expireat", "tail" : "(key: K, timestamp: Date)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expireat", "link" : "monix\/connect\/redis\/RedisKey$.html#expireat[K,V](key:K,timestamp:java.util.Date)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "expire", "tail" : "(key: K, seconds: Long)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisKey.expire", "link" : "monix\/connect\/redis\/RedisKey$.html#expire[K,V](key:K,seconds:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "exists", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.exists", "link" : "monix\/connect\/redis\/RedisKey$.html#exists[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "dump", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Array[Byte]]", "member" : "monix.connect.redis.RedisKey.dump", "link" : "monix\/connect\/redis\/RedisKey$.html#dump[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Array[Byte]]", "kind" : "def"}, {"label" : "unlink", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.unlink", "link" : "monix\/connect\/redis\/RedisKey$.html#unlink[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "del", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisKey.del", "link" : "monix\/connect\/redis\/RedisKey$.html#del[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisKey$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisKey$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisKey$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisKey$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisList", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisList$.html", "members_object" : [{"label" : "rpushx", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.rpushx", "link" : "monix\/connect\/redis\/RedisList$.html#rpushx[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpush", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.rpush", "link" : "monix\/connect\/redis\/RedisList$.html#rpush[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "rpoplpush", "tail" : "(source: K, destination: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.rpoplpush", "link" : "monix\/connect\/redis\/RedisList$.html#rpoplpush[K,V](source:K,destination:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "rpop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.rpop", "link" : "monix\/connect\/redis\/RedisList$.html#rpop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "ltrim", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisList.ltrim", "link" : "monix\/connect\/redis\/RedisList$.html#ltrim[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "lset", "tail" : "(key: K, index: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisList.lset", "link" : "monix\/connect\/redis\/RedisList$.html#lset[K,V](key:K,index:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "lrem", "tail" : "(key: K, count: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lrem", "link" : "monix\/connect\/redis\/RedisList$.html#lrem[K,V](key:K,count:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisList.lrange", "link" : "monix\/connect\/redis\/RedisList$.html#lrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "lpushx", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lpushx", "link" : "monix\/connect\/redis\/RedisList$.html#lpushx[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lpush", "tail" : "(key: K, values: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.lpush", "link" : "monix\/connect\/redis\/RedisList$.html#lpush[K,V](key:K,values:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lpop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.lpop", "link" : "monix\/connect\/redis\/RedisList$.html#lpop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "llen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.llen", "link" : "monix\/connect\/redis\/RedisList$.html#llen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "linsert", "tail" : "(key: K, before: Boolean, pivot: V, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisList.linsert", "link" : "monix\/connect\/redis\/RedisList$.html#linsert[K,V](key:K,before:Boolean,pivot:V,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "lindex", "tail" : "(key: K, index: Long)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.lindex", "link" : "monix\/connect\/redis\/RedisList$.html#lindex[K,V](key:K,index:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "brpoplpush", "tail" : "(timeout: Long, source: K, destination: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisList.brpoplpush", "link" : "monix\/connect\/redis\/RedisList$.html#brpoplpush[K,V](timeout:Long,source:K,destination:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "brpop", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisList.brpop", "link" : "monix\/connect\/redis\/RedisList$.html#brpop[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "blpop", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisList.blpop", "link" : "monix\/connect\/redis\/RedisList$.html#blpop[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisList$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisList$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisList$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisList$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisList$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisList$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisList$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisList$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisList$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisList$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisList$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisList$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisList$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisList$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisList$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisList$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisList$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisList$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisList$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisPubSub", "object" : "monix\/connect\/redis\/RedisPubSub$.html", "members_object" : [{"label" : "waitForReplication", "tail" : "(replicas: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.waitForReplication", "link" : "monix\/connect\/redis\/RedisPubSub$.html#waitForReplication[K,V](replicas:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "quit", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.quit", "link" : "monix\/connect\/redis\/RedisPubSub$.html#quit[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readWrite", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readWrite", "link" : "monix\/connect\/redis\/RedisPubSub$.html#readWrite[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readOnly", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readOnly", "link" : "monix\/connect\/redis\/RedisPubSub$.html#readOnly[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ping", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.ping", "link" : "monix\/connect\/redis\/RedisPubSub$.html#ping[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "role", "tail" : "()(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisPubSub.role", "link" : "monix\/connect\/redis\/RedisPubSub$.html#role[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "echo", "tail" : "(msg: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisPubSub.echo", "link" : "monix\/connect\/redis\/RedisPubSub$.html#echo[K,V](msg:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "pubsubNumpat", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumpat", "link" : "monix\/connect\/redis\/RedisPubSub$.html#pubsubNumpat[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pubsubNumsub", "tail" : "(channels: K*)(connection: StatefulRedisConnection[K, V]): Task[Map[K, Long]]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumsub", "link" : "monix\/connect\/redis\/RedisPubSub$.html#pubsubNumsub[K,V](channels:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Map[K,Long]]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(channel: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/RedisPubSub$.html#pubsubChannels[K,V](channel:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/RedisPubSub$.html#pubsubChannels[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "publish", "tail" : "(channel: K, message: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.publish", "link" : "monix\/connect\/redis\/RedisPubSub$.html#publish[K,V](channel:K,message:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisPubSub$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisPubSub$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisPubSub$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisPubSub$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisPubSub$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisPubSub$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisPubSub$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisPubSub$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisPubSub$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisPubSub$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisPubSub$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisPubSub$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisPubSub$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisPubSub$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisPubSub$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisPubSub$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/redis\/RedisPubSub.html", "kind" : "trait", "members_trait" : [{"label" : "waitForReplication", "tail" : "(replicas: Int, timeout: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.waitForReplication", "link" : "monix\/connect\/redis\/RedisPubSub.html#waitForReplication[K,V](replicas:Int,timeout:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "quit", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.quit", "link" : "monix\/connect\/redis\/RedisPubSub.html#quit[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readWrite", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readWrite", "link" : "monix\/connect\/redis\/RedisPubSub.html#readWrite[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "readOnly", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.readOnly", "link" : "monix\/connect\/redis\/RedisPubSub.html#readOnly[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "ping", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisPubSub.ping", "link" : "monix\/connect\/redis\/RedisPubSub.html#ping[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "role", "tail" : "()(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisPubSub.role", "link" : "monix\/connect\/redis\/RedisPubSub.html#role[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "echo", "tail" : "(msg: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisPubSub.echo", "link" : "monix\/connect\/redis\/RedisPubSub.html#echo[K,V](msg:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "pubsubNumpat", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumpat", "link" : "monix\/connect\/redis\/RedisPubSub.html#pubsubNumpat[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "pubsubNumsub", "tail" : "(channels: K*)(connection: StatefulRedisConnection[K, V]): Task[Map[K, Long]]", "member" : "monix.connect.redis.RedisPubSub.pubsubNumsub", "link" : "monix\/connect\/redis\/RedisPubSub.html#pubsubNumsub[K,V](channels:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Map[K,Long]]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(channel: K)(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/RedisPubSub.html#pubsubChannels[K,V](channel:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "pubsubChannels", "tail" : "(connection: StatefulRedisConnection[K, V]): Observable[K]", "member" : "monix.connect.redis.RedisPubSub.pubsubChannels", "link" : "monix\/connect\/redis\/RedisPubSub.html#pubsubChannels[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[K]", "kind" : "def"}, {"label" : "publish", "tail" : "(channel: K, message: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisPubSub.publish", "link" : "monix\/connect\/redis\/RedisPubSub.html#publish[K,V](channel:K,message:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisPubSub.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisPubSub.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisPubSub.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisPubSub.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisPubSub.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisPubSub.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisPubSub.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisPubSub.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisPubSub.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisPubSub.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisPubSub.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisPubSub.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisPubSub.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisPubSub.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisPubSub.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisPubSub.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisPubSub.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : ""}, {"name" : "monix.connect.redis.RedisServer", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisServer$.html", "members_object" : [{"label" : "flushdbAsync", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.flushdbAsync", "link" : "monix\/connect\/redis\/RedisServer$.html#flushdbAsync[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "flushallAsync", "tail" : "()(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.flushallAsync", "link" : "monix\/connect\/redis\/RedisServer$.html#flushallAsync[K,V]()(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "configResetstat", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.configResetstat", "link" : "monix\/connect\/redis\/RedisServer$.html#configResetstat[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "configGet", "tail" : "(parameter: String)(connection: StatefulRedisConnection[K, V]): Task[Map[String, String]]", "member" : "monix.connect.redis.RedisServer.configGet", "link" : "monix\/connect\/redis\/RedisServer$.html#configGet[K,V](parameter:String)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[scala.collection.mutable.Map[String,String]]", "kind" : "def"}, {"label" : "commandCount", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisServer.commandCount", "link" : "monix\/connect\/redis\/RedisServer$.html#commandCount[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "clientList", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientList", "link" : "monix\/connect\/redis\/RedisServer$.html#clientList[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientKill", "tail" : "(addr: String)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientKill", "link" : "monix\/connect\/redis\/RedisServer$.html#clientKill[K,V](addr:String)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientSetname", "tail" : "(name: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientSetname", "link" : "monix\/connect\/redis\/RedisServer$.html#clientSetname[K,V](name:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "clientGetname", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.clientGetname", "link" : "monix\/connect\/redis\/RedisServer$.html#clientGetname[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "bgsave", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.bgsave", "link" : "monix\/connect\/redis\/RedisServer$.html#bgsave[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "bgrewriteaof", "tail" : "(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisServer.bgrewriteaof", "link" : "monix\/connect\/redis\/RedisServer$.html#bgrewriteaof[K,V](implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisServer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisServer$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisServer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisServer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisServer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisServer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisServer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisServer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisServer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisServer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisServer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisServer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisServer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisServer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisServer$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisServer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisServer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisServer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisServer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisSet", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisSet$.html", "members_object" : [{"label" : "sscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ValueScanCursor[V]]", "member" : "monix.connect.redis.RedisSet.sscan", "link" : "monix\/connect\/redis\/RedisSet$.html#sscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ValueScanCursor[V]]", "kind" : "def"}, {"label" : "sunionstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sunionstore", "link" : "monix\/connect\/redis\/RedisSet$.html#sunionstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sunion", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sunion", "link" : "monix\/connect\/redis\/RedisSet$.html#sunion[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "srem", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.srem", "link" : "monix\/connect\/redis\/RedisSet$.html#srem[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "srandmember", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.srandmember", "link" : "monix\/connect\/redis\/RedisSet$.html#srandmember[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "srandmember", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisSet.srandmember", "link" : "monix\/connect\/redis\/RedisSet$.html#srandmember[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "spop", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.spop", "link" : "monix\/connect\/redis\/RedisSet$.html#spop[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "spop", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisSet.spop", "link" : "monix\/connect\/redis\/RedisSet$.html#spop[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "smembers", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.smembers", "link" : "monix\/connect\/redis\/RedisSet$.html#smembers[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "smove", "tail" : "(source: K, destination: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisSet.smove", "link" : "monix\/connect\/redis\/RedisSet$.html#smove[K,V](source:K,destination:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sismember", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisSet.sismember", "link" : "monix\/connect\/redis\/RedisSet$.html#sismember[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "sinterstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sinterstore", "link" : "monix\/connect\/redis\/RedisSet$.html#sinterstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sinter", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sinter", "link" : "monix\/connect\/redis\/RedisSet$.html#sinter[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "sdiffstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sdiffstore", "link" : "monix\/connect\/redis\/RedisSet$.html#sdiffstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sdiff", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSet.sdiff", "link" : "monix\/connect\/redis\/RedisSet$.html#sdiff[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "scard", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.scard", "link" : "monix\/connect\/redis\/RedisSet$.html#scard[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "sadd", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSet.sadd", "link" : "monix\/connect\/redis\/RedisSet$.html#sadd[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisSet$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisSet$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisSortedSet", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisSortedSet$.html", "members_object" : [{"label" : "zunionstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zunionstore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zunionstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zscore", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zscore[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zscan", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValueScanCursor[V]]", "member" : "monix.connect.redis.RedisSortedSet.zscan", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zscan[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValueScanCursor[V]]", "kind" : "def"}, {"label" : "zrevrank", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrevrank", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrank[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrevrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscoreWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscoreWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrangebyscore", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebylex", "tail" : "(key: K, range: Range[_ <: V], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrevrangeWithScores", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrevrangeWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrangeWithScores[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrevrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrevrange", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrevrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zremrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zremrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zremrangebyrank", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebyrank", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zremrangebyrank[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zremrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zremrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zremrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrem", "tail" : "(key: K, members: V*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrem", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrem[K,V](key:K,members:V*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrank", "tail" : "(key: K, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zrank", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrank[K,V](key:K,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscoreWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrangebyscoreWithScores", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscoreWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebyscoreWithScores[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrangebyscore", "tail" : "(key: K, range: Range[_ <: Number], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebyscore", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebyscore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebyscore[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebylex", "tail" : "(key: K, range: Range[_ <: V], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangebylex", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrangebylex", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangebylex[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zrangeWithScores", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zrangeWithScores", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrangeWithScores[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zrange", "tail" : "(key: K, start: Long, stop: Long)(connection: StatefulRedisConnection[K, V]): Observable[V]", "member" : "monix.connect.redis.RedisSortedSet.zrange", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zrange[K,V](key:K,start:Long,stop:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[V]", "kind" : "def"}, {"label" : "zpopmax", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmax", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zpopmax[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmax", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmax", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zpopmax[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmin", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Observable[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmin", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zpopmin[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zpopmin", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[ScoredValue[V]]", "member" : "monix.connect.redis.RedisSortedSet.zpopmin", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zpopmin[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.ScoredValue[V]]", "kind" : "def"}, {"label" : "zlexcount", "tail" : "(key: K, range: Range[_ <: V])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zlexcount", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zlexcount[K,V](key:K,range:io.lettuce.core.Range[_<:V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zinterstore", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zinterstore", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zinterstore[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zincrby", "tail" : "(key: K, amount: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zincrby", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zincrby[K,V](key:K,amount:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zcount", "tail" : "(key: K, range: Range[_ <: Number])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zcount", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zcount[K,V](key:K,range:io.lettuce.core.Range[_<:Number])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zcard", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zcard", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zcard[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zaddincr", "tail" : "(key: K, score: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisSortedSet.zaddincr", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zaddincr[K,V](key:K,score:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "zadd", "tail" : "(key: K, scoredValues: ScoredValue[V]*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zadd", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zadd[K,V](key:K,scoredValues:io.lettuce.core.ScoredValue[V]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "zadd", "tail" : "(key: K, score: Double, member: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisSortedSet.zadd", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#zadd[K,V](key:K,score:Double,member:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bzpopmax", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, ScoredValue[V]]]", "member" : "monix.connect.redis.RedisSortedSet.bzpopmax", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#bzpopmax[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,io.lettuce.core.ScoredValue[V]]]", "kind" : "def"}, {"label" : "bzpopmin", "tail" : "(timeout: Long, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[KeyValue[K, ScoredValue[V]]]", "member" : "monix.connect.redis.RedisSortedSet.bzpopmin", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#bzpopmin[K,V](timeout:Long,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[io.lettuce.core.KeyValue[K,io.lettuce.core.ScoredValue[V]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisSortedSet$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisSortedSet$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "monix.connect.redis.RedisStream", "object" : "monix\/connect\/redis\/RedisStream$.html", "members_object" : [{"label" : "xtrim", "tail" : "(key: K, approximateTrimming: Boolean, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/RedisStream$.html#xtrim[K,V](key:K,approximateTrimming:Boolean,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xtrim", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/RedisStream$.html#xtrim[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/RedisStream$.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/RedisStream$.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xreadgroup", "tail" : "(consumer: Consumer[K], streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xreadgroup", "link" : "monix\/connect\/redis\/RedisStream$.html#xreadgroup[K,V](consumer:io.lettuce.core.Consumer[K],streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xread", "tail" : "(streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xread", "link" : "monix\/connect\/redis\/RedisStream$.html#xread[K,V](streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/RedisStream$.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/RedisStream$.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, consumer: Consumer[K], range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream$.html#xpending[K,V](key:K,consumer:io.lettuce.core.Consumer[K],range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream$.html#xpending[K,V](key:K,group:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream$.html#xpending[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xlen", "link" : "monix\/connect\/redis\/RedisStream$.html#xlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xgroupSetid", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupSetid", "link" : "monix\/connect\/redis\/RedisStream$.html#xgroupSetid[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xgroupDestroy", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisStream.xgroupDestroy", "link" : "monix\/connect\/redis\/RedisStream$.html#xgroupDestroy[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "xgroupDelconsumer", "tail" : "(key: K, consumer: Consumer[K])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xgroupDelconsumer", "link" : "monix\/connect\/redis\/RedisStream$.html#xgroupDelconsumer[K,V](key:K,consumer:io.lettuce.core.Consumer[K])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xgroupCreate", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupCreate", "link" : "monix\/connect\/redis\/RedisStream$.html#xgroupCreate[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xdel", "tail" : "(key: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xdel", "link" : "monix\/connect\/redis\/RedisStream$.html#xdel[K,V](key:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xclaim", "tail" : "(key: K, consumer: Consumer[K], minIdleTime: Long, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xclaim", "link" : "monix\/connect\/redis\/RedisStream$.html#xclaim[K,V](key:K,consumer:io.lettuce.core.Consumer[K],minIdleTime:Long,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xadd", "tail" : "(key: K, body: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xadd", "link" : "monix\/connect\/redis\/RedisStream$.html#xadd[K,V](key:K,body:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xack", "tail" : "(key: K, group: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xack", "link" : "monix\/connect\/redis\/RedisStream$.html#xack[K,V](key:K,group:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisStream$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisStream$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisStream$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisStream$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisStream$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisStream$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisStream$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisStream$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisStream$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisStream$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisStream$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisStream$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisStream$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisStream$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisStream$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisStream$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/connect\/redis\/RedisStream.html", "kind" : "trait", "members_trait" : [{"label" : "xtrim", "tail" : "(key: K, approximateTrimming: Boolean, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/RedisStream.html#xtrim[K,V](key:K,approximateTrimming:Boolean,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xtrim", "tail" : "(key: K, count: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xtrim", "link" : "monix\/connect\/redis\/RedisStream.html#xtrim[K,V](key:K,count:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/RedisStream.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrevrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrevrange", "link" : "monix\/connect\/redis\/RedisStream.html#xrevrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xreadgroup", "tail" : "(consumer: Consumer[K], streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xreadgroup", "link" : "monix\/connect\/redis\/RedisStream.html#xreadgroup[K,V](consumer:io.lettuce.core.Consumer[K],streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xread", "tail" : "(streams: StreamOffset[K]*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xread", "link" : "monix\/connect\/redis\/RedisStream.html#xread[K,V](streams:io.lettuce.core.XReadArgs.StreamOffset[K]*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/RedisStream.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xrange", "tail" : "(key: K, range: Range[String])(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xrange", "link" : "monix\/connect\/redis\/RedisStream.html#xrange[K,V](key:K,range:io.lettuce.core.Range[String])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, consumer: Consumer[K], range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream.html#xpending[K,V](key:K,consumer:io.lettuce.core.Consumer[K],range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K, range: Range[String], limit: Limit)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream.html#xpending[K,V](key:K,group:K,range:io.lettuce.core.Range[String],limit:io.lettuce.core.Limit)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xpending", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Observable[Any]", "member" : "monix.connect.redis.RedisStream.xpending", "link" : "monix\/connect\/redis\/RedisStream.html#xpending[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[Any]", "kind" : "def"}, {"label" : "xlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xlen", "link" : "monix\/connect\/redis\/RedisStream.html#xlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xgroupSetid", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupSetid", "link" : "monix\/connect\/redis\/RedisStream.html#xgroupSetid[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xgroupDestroy", "tail" : "(key: K, group: K)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisStream.xgroupDestroy", "link" : "monix\/connect\/redis\/RedisStream.html#xgroupDestroy[K,V](key:K,group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "xgroupDelconsumer", "tail" : "(key: K, consumer: Consumer[K])(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xgroupDelconsumer", "link" : "monix\/connect\/redis\/RedisStream.html#xgroupDelconsumer[K,V](key:K,consumer:io.lettuce.core.Consumer[K])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "xgroupCreate", "tail" : "(streamOffset: StreamOffset[K], group: K)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xgroupCreate", "link" : "monix\/connect\/redis\/RedisStream.html#xgroupCreate[K,V](streamOffset:io.lettuce.core.XReadArgs.StreamOffset[K],group:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xdel", "tail" : "(key: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xdel", "link" : "monix\/connect\/redis\/RedisStream.html#xdel[K,V](key:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xclaim", "tail" : "(key: K, consumer: Consumer[K], minIdleTime: Long, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Observable[StreamMessage[K, V]]", "member" : "monix.connect.redis.RedisStream.xclaim", "link" : "monix\/connect\/redis\/RedisStream.html#xclaim[K,V](key:K,consumer:io.lettuce.core.Consumer[K],minIdleTime:Long,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.StreamMessage[K,V]]", "kind" : "def"}, {"label" : "xadd", "tail" : "(key: K, body: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisStream.xadd", "link" : "monix\/connect\/redis\/RedisStream.html#xadd[K,V](key:K,body:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "xack", "tail" : "(key: K, group: K, messageIds: String*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisStream.xack", "link" : "monix\/connect\/redis\/RedisStream.html#xack[K,V](key:K,group:K,messageIds:String*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisStream.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisStream.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisStream.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisStream.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisStream.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisStream.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisStream.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisStream.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisStream.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisStream.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisStream.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisStream.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisStream.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisStream.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisStream.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisStream.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisStream.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "The Stream is a new data type introduced recently, wwhich models a log data structurein a more abstract way, like a log file often implemented as a file open in apend only mode,Redis streams are primarily an append only data structure."}, {"name" : "monix.connect.redis.RedisString", "shortDescription" : "", "object" : "monix\/connect\/redis\/RedisString$.html", "members_object" : [{"label" : "strlen", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.strlen", "link" : "monix\/connect\/redis\/RedisString$.html#strlen[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setrange", "tail" : "(key: K, offset: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.setrange", "link" : "monix\/connect\/redis\/RedisString$.html#setrange[K,V](key:K,offset:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "setnx", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisString.setnx", "link" : "monix\/connect\/redis\/RedisString$.html#setnx[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "psetex", "tail" : "(key: K, milliseconds: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.psetex", "link" : "monix\/connect\/redis\/RedisString$.html#psetex[K,V](key:K,milliseconds:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "setex", "tail" : "(key: K, seconds: Long, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.setex", "link" : "monix\/connect\/redis\/RedisString$.html#setex[K,V](key:K,seconds:Long,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "setbit", "tail" : "(key: K, offset: Long, value: Int)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.setbit", "link" : "monix\/connect\/redis\/RedisString$.html#setbit[K,V](key:K,offset:Long,value:Int)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "set", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.set", "link" : "monix\/connect\/redis\/RedisString$.html#set[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "msetnx", "tail" : "(map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[Boolean]", "member" : "monix.connect.redis.RedisString.msetnx", "link" : "monix\/connect\/redis\/RedisString$.html#msetnx[K,V](map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Boolean]", "kind" : "def"}, {"label" : "mset", "tail" : "(map: Map[K, V])(connection: StatefulRedisConnection[K, V]): Task[String]", "member" : "monix.connect.redis.RedisString.mset", "link" : "monix\/connect\/redis\/RedisString$.html#mset[K,V](map:Map[K,V])(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[String]", "kind" : "def"}, {"label" : "mget", "tail" : "(keys: K*)(connection: StatefulRedisConnection[K, V]): Observable[KeyValue[K, V]]", "member" : "monix.connect.redis.RedisString.mget", "link" : "monix\/connect\/redis\/RedisString$.html#mget[K,V](keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.reactive.Observable[io.lettuce.core.KeyValue[K,V]]", "kind" : "def"}, {"label" : "incrbyfloat", "tail" : "(key: K, amount: Double)(connection: StatefulRedisConnection[K, V]): Task[Double]", "member" : "monix.connect.redis.RedisString.incrbyfloat", "link" : "monix\/connect\/redis\/RedisString$.html#incrbyfloat[K,V](key:K,amount:Double)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Double]", "kind" : "def"}, {"label" : "incrby", "tail" : "(key: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.incrby", "link" : "monix\/connect\/redis\/RedisString$.html#incrby[K,V](key:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "incr", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.incr", "link" : "monix\/connect\/redis\/RedisString$.html#incr[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "getset", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.getset", "link" : "monix\/connect\/redis\/RedisString$.html#getset[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "getrange", "tail" : "(key: K, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.getrange", "link" : "monix\/connect\/redis\/RedisString$.html#getrange[K,V](key:K,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "getbit", "tail" : "(key: K, offset: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.getbit", "link" : "monix\/connect\/redis\/RedisString$.html#getbit[K,V](key:K,offset:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "get", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[V]", "member" : "monix.connect.redis.RedisString.get", "link" : "monix\/connect\/redis\/RedisString$.html#get[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[V]", "kind" : "def"}, {"label" : "decrby", "tail" : "(key: K, amount: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.decrby", "link" : "monix\/connect\/redis\/RedisString$.html#decrby[K,V](key:K,amount:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "decr", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.decr", "link" : "monix\/connect\/redis\/RedisString$.html#decr[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopXor", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopXor", "link" : "monix\/connect\/redis\/RedisString$.html#bitopXor[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopOr", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopOr", "link" : "monix\/connect\/redis\/RedisString$.html#bitopOr[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopNot", "tail" : "(destination: K, source: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopNot", "link" : "monix\/connect\/redis\/RedisString$.html#bitopNot[K,V](destination:K,source:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitopAnd", "tail" : "(destination: K, keys: K*)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitopAnd", "link" : "monix\/connect\/redis\/RedisString$.html#bitopAnd[K,V](destination:K,keys:K*)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/RedisString$.html#bitpos[K,V](key:K,state:Boolean,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean, start: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/RedisString$.html#bitpos[K,V](key:K,state:Boolean,start:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitpos", "tail" : "(key: K, state: Boolean)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitpos", "link" : "monix\/connect\/redis\/RedisString$.html#bitpos[K,V](key:K,state:Boolean)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitcount", "tail" : "(key: K, start: Long, end: Long)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitcount", "link" : "monix\/connect\/redis\/RedisString$.html#bitcount[K,V](key:K,start:Long,end:Long)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "bitcount", "tail" : "(key: K)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.bitcount", "link" : "monix\/connect\/redis\/RedisString$.html#bitcount[K,V](key:K)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "append", "tail" : "(key: K, value: V)(connection: StatefulRedisConnection[K, V]): Task[Long]", "member" : "monix.connect.redis.RedisString.append", "link" : "monix\/connect\/redis\/RedisString$.html#append[K,V](key:K,value:V)(implicitconnection:io.lettuce.core.api.StatefulRedisConnection[K,V]):monix.eval.Task[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/redis\/RedisString$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/redis\/RedisString$.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/redis\/RedisString$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/redis\/RedisString$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/redis\/RedisString$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/redis\/RedisString$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/redis\/RedisString$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisString$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisString$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/redis\/RedisString$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/redis\/RedisString$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/redis\/RedisString$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/redis\/RedisString$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/redis\/RedisString$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/redis\/RedisString$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/redis\/RedisString$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/redis\/RedisString$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/redis\/RedisString$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/redis\/RedisString$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.connect.s3.domain" : [{"name" : "monix.connect.s3.domain.CopyObjectSettings", "shortDescription" : "", "members_case class" : [{"member" : "monix.connect.s3.domain.CopyObjectSettings#<init>", "error" : "unsupported entity"}, {"label" : "requestPayer", "tail" : ": Option[RequestPayer]", "member" : "monix.connect.s3.domain.CopyObjectSettings.requestPayer", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#requestPayer:Option[software.amazon.awssdk.services.s3.model.RequestPayer]", "kind" : "val"}, {"label" : "objectLockLegalHoldStatus", "tail" : ": Option[ObjectLockLegalHoldStatus]", "member" : "monix.connect.s3.domain.CopyObjectSettings.objectLockLegalHoldStatus", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#objectLockLegalHoldStatus:Option[software.amazon.awssdk.services.s3.model.ObjectLockLegalHoldStatus]", "kind" : "val"}, {"label" : "objectLockRetainUntilDate", "tail" : ": Option[Instant]", "member" : "monix.connect.s3.domain.CopyObjectSettings.objectLockRetainUntilDate", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#objectLockRetainUntilDate:Option[java.time.Instant]", "kind" : "val"}, {"label" : "objectLockMode", "tail" : ": Option[ObjectLockMode]", "member" : "monix.connect.s3.domain.CopyObjectSettings.objectLockMode", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#objectLockMode:Option[software.amazon.awssdk.services.s3.model.ObjectLockMode]", "kind" : "val"}, {"label" : "copySourceSSECustomerKeyMD5", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.copySourceSSECustomerKeyMD5", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#copySourceSSECustomerKeyMD5:Option[String]", "kind" : "val"}, {"label" : "copySourceSSECustomerKey", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.copySourceSSECustomerKey", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#copySourceSSECustomerKey:Option[String]", "kind" : "val"}, {"label" : "copySourceSSECustomerAlgorithm", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.copySourceSSECustomerAlgorithm", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#copySourceSSECustomerAlgorithm:Option[String]", "kind" : "val"}, {"label" : "ssekmsKeyId", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.ssekmsKeyId", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#ssekmsKeyId:Option[String]", "kind" : "val"}, {"label" : "sseCustomerKeyMD5", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.sseCustomerKeyMD5", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#sseCustomerKeyMD5:Option[String]", "kind" : "val"}, {"label" : "sseCustomerKey", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.sseCustomerKey", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#sseCustomerKey:Option[String]", "kind" : "val"}, {"label" : "sseCustomerAlgorithm", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.sseCustomerAlgorithm", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#sseCustomerAlgorithm:Option[String]", "kind" : "val"}, {"label" : "storageClass", "tail" : ": StorageClass", "member" : "monix.connect.s3.domain.CopyObjectSettings.storageClass", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#storageClass:software.amazon.awssdk.services.s3.model.StorageClass", "kind" : "val"}, {"label" : "serverSideEncryption", "tail" : ": Option[ServerSideEncryption]", "member" : "monix.connect.s3.domain.CopyObjectSettings.serverSideEncryption", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#serverSideEncryption:Option[software.amazon.awssdk.services.s3.model.ServerSideEncryption]", "kind" : "val"}, {"label" : "taggingDirective", "tail" : ": Option[TaggingDirective]", "member" : "monix.connect.s3.domain.CopyObjectSettings.taggingDirective", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#taggingDirective:Option[software.amazon.awssdk.services.s3.model.TaggingDirective]", "kind" : "val"}, {"label" : "metadataDirective", "tail" : ": Option[MetadataDirective]", "member" : "monix.connect.s3.domain.CopyObjectSettings.metadataDirective", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#metadataDirective:Option[software.amazon.awssdk.services.s3.model.MetadataDirective]", "kind" : "val"}, {"label" : "metadata", "tail" : ": Map[String, String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.metadata", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#metadata:Map[String,String]", "kind" : "val"}, {"label" : "grantWriteACP", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.grantWriteACP", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#grantWriteACP:Option[String]", "kind" : "val"}, {"label" : "grantReadACP", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.grantReadACP", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#grantReadACP:Option[String]", "kind" : "val"}, {"label" : "grantRead", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.grantRead", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#grantRead:Option[String]", "kind" : "val"}, {"label" : "grantFullControl", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.grantFullControl", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#grantFullControl:Option[String]", "kind" : "val"}, {"label" : "acl", "tail" : ": Option[ObjectCannedACL]", "member" : "monix.connect.s3.domain.CopyObjectSettings.acl", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#acl:Option[software.amazon.awssdk.services.s3.model.ObjectCannedACL]", "kind" : "val"}, {"label" : "expires", "tail" : ": Option[Instant]", "member" : "monix.connect.s3.domain.CopyObjectSettings.expires", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#expires:Option[java.time.Instant]", "kind" : "val"}, {"label" : "copyIfUnmodifiedSince", "tail" : ": Option[Instant]", "member" : "monix.connect.s3.domain.CopyObjectSettings.copyIfUnmodifiedSince", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#copyIfUnmodifiedSince:Option[java.time.Instant]", "kind" : "val"}, {"label" : "copyIfModifiedSince", "tail" : ": Option[Instant]", "member" : "monix.connect.s3.domain.CopyObjectSettings.copyIfModifiedSince", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#copyIfModifiedSince:Option[java.time.Instant]", "kind" : "val"}, {"label" : "copySourceIfNoneMatch", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.copySourceIfNoneMatch", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#copySourceIfNoneMatch:Option[String]", "kind" : "val"}, {"label" : "copySourceIfMatches", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.CopyObjectSettings.copySourceIfMatches", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#copySourceIfMatches:Option[String]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/s3\/domain\/CopyObjectSettings.html", "kind" : "case class"}, {"name" : "monix.connect.s3.domain.DownloadSettings", "shortDescription" : "", "members_case class" : [{"member" : "monix.connect.s3.domain.DownloadSettings#<init>", "error" : "unsupported entity"}, {"label" : "versionId", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.DownloadSettings.versionId", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#versionId:Option[String]", "kind" : "val"}, {"label" : "sseCustomerKeyMD5", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.DownloadSettings.sseCustomerKeyMD5", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#sseCustomerKeyMD5:Option[String]", "kind" : "val"}, {"label" : "sseCustomerKey", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.DownloadSettings.sseCustomerKey", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#sseCustomerKey:Option[String]", "kind" : "val"}, {"label" : "sseCustomerAlgorithm", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.DownloadSettings.sseCustomerAlgorithm", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#sseCustomerAlgorithm:Option[String]", "kind" : "val"}, {"label" : "requestPayer", "tail" : ": Option[RequestPayer]", "member" : "monix.connect.s3.domain.DownloadSettings.requestPayer", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#requestPayer:Option[software.amazon.awssdk.services.s3.model.RequestPayer]", "kind" : "val"}, {"label" : "ifUnmodifiedSince", "tail" : ": Option[Instant]", "member" : "monix.connect.s3.domain.DownloadSettings.ifUnmodifiedSince", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#ifUnmodifiedSince:Option[java.time.Instant]", "kind" : "val"}, {"label" : "ifNoneMatch", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.DownloadSettings.ifNoneMatch", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#ifNoneMatch:Option[String]", "kind" : "val"}, {"label" : "ifModifiedSince", "tail" : ": Option[Instant]", "member" : "monix.connect.s3.domain.DownloadSettings.ifModifiedSince", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#ifModifiedSince:Option[java.time.Instant]", "kind" : "val"}, {"label" : "ifMatch", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.DownloadSettings.ifMatch", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#ifMatch:Option[String]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/s3\/domain\/DownloadSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/s3\/domain\/DownloadSettings.html", "kind" : "case class"}, {"name" : "monix.connect.s3.domain.UploadSettings", "shortDescription" : "", "members_case class" : [{"member" : "monix.connect.s3.domain.UploadSettings#<init>", "error" : "unsupported entity"}, {"label" : "lastUploadTimeout", "tail" : ": FiniteDuration", "member" : "monix.connect.s3.domain.UploadSettings.lastUploadTimeout", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#lastUploadTimeout:scala.concurrent.duration.FiniteDuration", "kind" : "val"}, {"label" : "requestPayer", "tail" : ": Option[RequestPayer]", "member" : "monix.connect.s3.domain.UploadSettings.requestPayer", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#requestPayer:Option[software.amazon.awssdk.services.s3.model.RequestPayer]", "kind" : "val"}, {"label" : "ssekmsKeyId", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.ssekmsKeyId", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#ssekmsKeyId:Option[String]", "kind" : "val"}, {"label" : "ssekmsEncryptionContext", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.ssekmsEncryptionContext", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#ssekmsEncryptionContext:Option[String]", "kind" : "val"}, {"label" : "sseCustomerKeyMD5", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.sseCustomerKeyMD5", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#sseCustomerKeyMD5:Option[String]", "kind" : "val"}, {"label" : "sseCustomerKey", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.sseCustomerKey", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#sseCustomerKey:Option[String]", "kind" : "val"}, {"label" : "sseCustomerAlgorithm", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.sseCustomerAlgorithm", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#sseCustomerAlgorithm:Option[String]", "kind" : "val"}, {"label" : "serverSideEncryption", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.serverSideEncryption", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#serverSideEncryption:Option[String]", "kind" : "val"}, {"label" : "grantWriteACP", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.grantWriteACP", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#grantWriteACP:Option[String]", "kind" : "val"}, {"label" : "grantReadACP", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.grantReadACP", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#grantReadACP:Option[String]", "kind" : "val"}, {"label" : "grantRead", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.grantRead", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#grantRead:Option[String]", "kind" : "val"}, {"label" : "grantFullControl", "tail" : ": Option[String]", "member" : "monix.connect.s3.domain.UploadSettings.grantFullControl", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#grantFullControl:Option[String]", "kind" : "val"}, {"label" : "acl", "tail" : ": Option[ObjectCannedACL]", "member" : "monix.connect.s3.domain.UploadSettings.acl", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#acl:Option[software.amazon.awssdk.services.s3.model.ObjectCannedACL]", "kind" : "val"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/s3\/domain\/UploadSettings.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "monix\/connect\/s3\/domain\/UploadSettings.html", "kind" : "case class"}], "monix.connect.sqs.consumer" : [{"name" : "monix.connect.sqs.consumer.ConsumedMessage", "shortDescription" : "The representation of a message consumed from a specific queue.", "members_class" : [{"label" : "changeVisibilityTimeout", "tail" : "(timeout: FiniteDuration): Task[Unit]", "member" : "monix.connect.sqs.consumer.ConsumedMessage.changeVisibilityTimeout", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#changeVisibilityTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "md5OfBody", "tail" : ": String", "member" : "monix.connect.sqs.consumer.ConsumedMessage.md5OfBody", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#md5OfBody:String", "kind" : "val"}, {"label" : "attributes", "tail" : ": Map[MessageSystemAttributeName, String]", "member" : "monix.connect.sqs.consumer.ConsumedMessage.attributes", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#attributes:Map[software.amazon.awssdk.services.sqs.model.MessageSystemAttributeName,String]", "kind" : "val"}, {"label" : "messageId", "tail" : ": String", "member" : "monix.connect.sqs.consumer.ConsumedMessage.messageId", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#messageId:String", "kind" : "val"}, {"label" : "body", "tail" : ": String", "member" : "monix.connect.sqs.consumer.ConsumedMessage.body", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#body:String", "kind" : "val"}, {"label" : "message", "tail" : ": Message", "member" : "monix.connect.sqs.consumer.ConsumedMessage.message", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#message:software.amazon.awssdk.services.sqs.model.Message", "kind" : "val"}, {"label" : "queueUrl", "tail" : ": QueueUrl", "member" : "monix.connect.sqs.consumer.ConsumedMessage.queueUrl", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#queueUrl:monix.connect.sqs.domain.QueueUrl", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/sqs\/consumer\/ConsumedMessage.html", "kind" : "class"}, {"name" : "monix.connect.sqs.consumer.DeletableMessage", "shortDescription" : "Represents a message consumed with manual delete, meaning that it providescontrol over when the message is considered processed and wantsto be deleted from the source queue so that the next message can be consumed.", "members_class" : [{"label" : "deleteFromQueue", "tail" : "(): Task[Unit]", "member" : "monix.connect.sqs.consumer.DeletableMessage.deleteFromQueue", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#deleteFromQueue():monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "message", "tail" : ": Message", "member" : "monix.connect.sqs.consumer.DeletableMessage.message", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#message:software.amazon.awssdk.services.sqs.model.Message", "kind" : "val"}, {"label" : "queueUrl", "tail" : ": QueueUrl", "member" : "monix.connect.sqs.consumer.DeletableMessage.queueUrl", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#queueUrl:monix.connect.sqs.domain.QueueUrl", "kind" : "val"}, {"label" : "changeVisibilityTimeout", "tail" : "(timeout: FiniteDuration): Task[Unit]", "member" : "monix.connect.sqs.consumer.ConsumedMessage.changeVisibilityTimeout", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#changeVisibilityTimeout(timeout:scala.concurrent.duration.FiniteDuration):monix.eval.Task[Unit]", "kind" : "def"}, {"label" : "md5OfBody", "tail" : ": String", "member" : "monix.connect.sqs.consumer.ConsumedMessage.md5OfBody", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#md5OfBody:String", "kind" : "val"}, {"label" : "attributes", "tail" : ": Map[MessageSystemAttributeName, String]", "member" : "monix.connect.sqs.consumer.ConsumedMessage.attributes", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#attributes:Map[software.amazon.awssdk.services.sqs.model.MessageSystemAttributeName,String]", "kind" : "val"}, {"label" : "messageId", "tail" : ": String", "member" : "monix.connect.sqs.consumer.ConsumedMessage.messageId", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#messageId:String", "kind" : "val"}, {"label" : "body", "tail" : ": String", "member" : "monix.connect.sqs.consumer.ConsumedMessage.body", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#body:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/sqs\/consumer\/DeletableMessage.html", "kind" : "class"}, {"name" : "monix.connect.sqs.consumer.SqsConsumer", "shortDescription" : "", "members_class" : [{"label" : "receiveSingleAutoDelete", "tail" : "(queueUrl: QueueUrl, maxMessages: Int, waitTimeSeconds: FiniteDuration, onErrorMaxRetries: Int): Task[List[ConsumedMessage]]", "member" : "monix.connect.sqs.consumer.SqsConsumer.receiveSingleAutoDelete", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#receiveSingleAutoDelete(queueUrl:monix.connect.sqs.domain.QueueUrl,maxMessages:Int,waitTimeSeconds:scala.concurrent.duration.FiniteDuration,onErrorMaxRetries:Int):monix.eval.Task[List[monix.connect.sqs.consumer.ConsumedMessage]]", "kind" : "def"}, {"label" : "receiveSingleManualDelete", "tail" : "(queueUrl: QueueUrl, maxMessages: Int, visibilityTimeout: FiniteDuration, waitTimeSeconds: FiniteDuration, onErrorMaxRetries: Int): Task[List[DeletableMessage]]", "member" : "monix.connect.sqs.consumer.SqsConsumer.receiveSingleManualDelete", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#receiveSingleManualDelete(queueUrl:monix.connect.sqs.domain.QueueUrl,maxMessages:Int,visibilityTimeout:scala.concurrent.duration.FiniteDuration,waitTimeSeconds:scala.concurrent.duration.FiniteDuration,onErrorMaxRetries:Int):monix.eval.Task[List[monix.connect.sqs.consumer.DeletableMessage]]", "kind" : "def"}, {"label" : "receiveAutoDelete", "tail" : "(queueUrl: QueueUrl, maxMessages: Int, waitTimeSeconds: FiniteDuration, onErrorMaxRetries: Int): Observable[ConsumedMessage]", "member" : "monix.connect.sqs.consumer.SqsConsumer.receiveAutoDelete", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#receiveAutoDelete(queueUrl:monix.connect.sqs.domain.QueueUrl,maxMessages:Int,waitTimeSeconds:scala.concurrent.duration.FiniteDuration,onErrorMaxRetries:Int):monix.reactive.Observable[monix.connect.sqs.consumer.ConsumedMessage]", "kind" : "def"}, {"label" : "receiveManualDelete", "tail" : "(queueUrl: QueueUrl, maxMessages: Int, visibilityTimeout: FiniteDuration, waitTimeSeconds: FiniteDuration, onErrorMaxRetries: Int): Observable[DeletableMessage]", "member" : "monix.connect.sqs.consumer.SqsConsumer.receiveManualDelete", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#receiveManualDelete(queueUrl:monix.connect.sqs.domain.QueueUrl,maxMessages:Int,visibilityTimeout:scala.concurrent.duration.FiniteDuration,waitTimeSeconds:scala.concurrent.duration.FiniteDuration,onErrorMaxRetries:Int):monix.reactive.Observable[monix.connect.sqs.consumer.DeletableMessage]", "kind" : "def"}, {"label" : "logger", "tail" : ": Logger", "member" : "com.typesafe.scalalogging.StrictLogging.logger", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#logger:com.typesafe.scalalogging.Logger", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html###:Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/connect\/sqs\/consumer\/SqsConsumer.html", "kind" : "class"}]};